		; serial-port ROM monitor/boot for debugging Kaypro.
		; Uses "aux serial" a.k.a "Serial Printer" port.
		
0013          	VERN	equ	013h	; ROM version
		
0800          	romsiz	equ	0800h	; minimum space for ROM
		
			maclib	z80
**** z80.lib ****
**** monitor.asm ****
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
			$*macro
		
000D          	CR	equ	13
000A          	LF	equ	10
0003          	CTLC	equ	3
0007          	BEL	equ	7
0009          	TAB	equ	9
0008          	BS	equ	8
001B          	ESC	equ	27
0000          	TRM	equ	0
007F          	DEL	equ	127
		
		; WD1943 at 5.0688MHz...
000E          	B9600	equ	0eh
		; */84 (and 10) sysport drive select
0002          	DS0	equ	0010b
0001          	DS1	equ	0001b
0003          	DSNONE	equ	0011b	; also mask
		
0004          	sio1	equ	04h	; "serial data", "keyboard"
000C          	sio2	equ	0ch	; "serial printer", "modem"
0000          	brd1	equ	00h
0008          	brd2	equ	08h
		
0000          	sioA	equ	00h	; offsets
0001          	sioB	equ	01h
		
0000          	sioD	equ	00h	; offsets
0002          	sioC	equ	02h
		
		; Choose Z80SIO port to use...
0004          	condat	equ	sio1+sioA+sioD
0006          	conctl	equ	sio1+sioA+sioC
0000          	conbrr	equ	brd1
		
0014          	sysp84	equ	14h	; sysport on */84 (and 10). */83 have nothing here.
		
0000          	stack	equ	00000h	; stack at top of memory (wrapped)
		
		; Start of ROM code
0000          		org	00000h
0008          	rst0e	equ	$+8
0000  C36A00  		jmp	init
0003  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0010          	rst1e	equ	$+8
0008  C34B00  	rst1:	jmp	swtrap
000B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0018          	rst2e	equ	$+8
0010  C34B00  	rst2:	jmp	swtrap
0013  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0020          	rst3e	equ	$+8
0018  C34B00  	rst3:	jmp	swtrap
001B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0028          	rst4e	equ	$+8
0020  C34B00  	rst4:	jmp	swtrap
0023  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0030          	rst5e	equ	$+8
0028  C34B00  	rst5:	jmp	swtrap
002B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0038          	rst6e	equ	$+8
0030  C34B00  	rst6:	jmp	swtrap
0033  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0040          	rst7e	equ	$+8
0038  C34B00  	rst7:	jmp	swtrap
003B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
			; NMI not a problem?
		
0040  0D0A2A2A	swt:	db	CR,LF,'*** RST ',TRM
      2A205253
      542000
		
004B  F3      	swtrap:	di		; try to recover return address...
004C  D1      		pop	d	; should be caller of RST...
004D  310000  		lxi	sp,stack
0050  D5      		push	d	; not needed?
0051  214000  		lxi	h,swt
0054  CDDB04  		call	msgprt
0057  D1      		pop	d
0058  CDB204  		call	taddr
005B  CDD104  		call	crlf
			; TODO: print address, etc...
005E  C3DC00  		jmp	debug
		
0061  18      	sioini:	db	18h	; reset
0062  0444    		db	4,044h	;
0064  03C1    		db	3,0c1h	;
0066  05E8    		db	5,0e8h	;
0068  0100    		db	1,000h	;
0009          	siolen	equ	$-sioini
		
		; ROM start point - initialize everything
		; We know we have 64K RAM...
006A  F3      	init:	di
006B  310000  		lxi	sp,stack
		
			; init serial port
006E  3E0E    		mvi	a,B9600
0070  D300    		out	conbrr
0072  216100  		lxi	h,sioini
0075  0E06    		mvi	c,conctl
0077  0609    		mvi	b,siolen
0079          		outir
0079  EDB3    		DB	0EDH,0B3H
		
007B  21BF00  		lxi	h,signon
007E  CDDB04  		call	msgprt
		
0081  CD9705  		call	proginit
			; save registers on stack, for debugger access...
0084  C3DC00  		jmp	debug
		
0087          	belout:
0087  0E07    		mvi	c,BEL
		; Output char to console
		; C=char
0089          	conout:
0089  DB06    		in	conctl
008B  E604    		ani	00000100b
008D          		jrz	conout
008D  28FA    		DB	28H,conout-$-1
008F  79      		mov	a,c
0090  D304    		out	condat
0092  C9      		ret
		
0093  0D0A3A20	prompt:	db	CR,LF,': ',TRM
      00
		
		; Get char from console
		; Returns: A=char, stripped
0098  E5      	conin:	push	h
0099  210000  	ci2:	lxi	h,0
009C  DB06    	ci0:	in	conctl		; 11
009E  E601    		ani	00000001b	;  7
00A0          		jrnz	ci1		;  7
00A0  200A    		DB	20H,ci1-$-1
00A2  2B      		dcx	h		;  6
00A3  7D      		mov	a,l		;  4
00A4  B4      		ora	h		;  4
00A5          		jrnz	ci0		; 12 = 51 (12.75uS) (~0.8 sec)
00A5  20F5    		DB	20H,ci0-$-1
00A7  CDA505  		call	progress	; on */83 (20.4uS or ~1.3 sec)
00AA          		jr	ci2
00AA  18ED    		DB	18H,ci2-$-1
00AC  DB04    	ci1:	in	condat
00AE  E67F    		ani	07fh
00B0  E1      		pop	h
00B1  C9      		ret
		
		; Get char from console, toupper and echo
00B2          	conine:
00B2  CD9800  		call	conin
00B5  CDF604  		call	toupper
00B8  F5      		push	psw
00B9  4F      		mov	c,a
00BA  CD8900  		call	conout
00BD  F1      		pop	psw
00BE  C9      		ret
		
00BF  0D0A4B61	signon:	db	CR,LF,'Kaypro Monitor v'
      7970726F
      204D6F6E
      69746F72
      2076
00D1  312E33  	vernum:	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
00D4  0D0A00  		db	CR,LF,TRM
		
00D7  0D0A073F	errm:	db	CR,LF,BEL,'?',TRM
      00
		
		*********************************************************
		**  Debug mode
		*********************************************************
		
00DC          	debug:
00DC  310000  	cilp:	lxi	sp,stack
00DF  21DC00  		lxi	h,cilp		;setup return address
00E2  E5      		push	h
00E3  219300  		lxi	h,prompt	;prompt for a command
00E6  CDDB04  		call	msgprt
00E9  CDFF04  		call	linein		;wait for command line to be entered
00EC  1104FF  		lxi	d,line
00EF  CD4D05  		call	char		;get first character
00F2  C8      		rz			;ignore line if it is empty
00F3  210D01  		lxi	h,comnds	;search table for command character
00F6  0609    		mvi	b,ncmnds	;(number of commands)
00F8  BE      	cci0:	cmp	m		;search command table
00F9  23      		inx	h
00FA          		jrz	gotocmd		;command was found, execute it
00FA  280A    		DB	28H,gotocmd-$-1
00FC  23      		inx	h		;step past routine address
00FD  23      		inx	h
00FE          		djnz	cci0		;loop untill all valid commands are checked
00FE  10F8    		DB	10H,cci0-$-1
0100  21D700  	error:	lxi	h,errm		;if command unknown, beep and re-prompt
0103  C3DB04  		jmp	msgprt
		
0106          	gotocmd:
0106  D5      		push	d		;save command line buffer pointer
0107  5E      		mov	e,m		;get command routine address
0108  23      		inx	h
0109  56      		mov	d,m		;DE = routine address
010A  EB      		xchg			;HL = routine address
010B  D1      		pop	d		;restore buffer pointer
010C  E9      		pchl			;jump to command routine
		
		; All commands are started with DE=next char in line buffer
010D          	comnds:
010D  3F      		db	'?'
010E  8002    		dw	Qcomnd
0110  44      		db	'D'
0111  2803    		dw	Dcomnd
0113  53      		db	'S'
0114  8E03    		dw	Scomnd
0116  47      		db	'G'
0117  F603    		dw	Gcomnd
0119  4D      		db	'M'
011A  8702    		dw	Mcomnd
011C  46      		db	'F'
011D  E802    		dw	Fcomnd
011F  49      		db	'I'
0120  2E04    		dw	Icomnd
0122  4F      		db	'O'
0123  8004    		dw	Ocomnd
0125  56      		db	'V'
0126  AC04    		dw	Vcomnd
0009          	ncmnds	equ	($-comnds)/3
		
		*********************************************************
		**  Command subroutines
		*********************************************************
		
0128          	menu:
0128  0D0A4420		db	CR,LF,'D <start> <end> - display memory in HEX'
      3C737461
      72743E20
      3C656E64
      3E202D20
      64697370
      6C617920
      6D656D6F
      72792069
      6E204845
      58
0151  0D0A5320		db	CR,LF,'S <start> - set/view memory'
      3C737461
      72743E20
      2D207365
      742F7669
      6577206D
      656D6F72
      79
016E  0D0A2020		db	CR,LF,'    (CR) = skip fwd, ''-'' = skip bkwd, ''.'' = done'
      20202843
      5229203D
      20736B69
      70206677
      642C2027
      2D27203D
      20736B69
      7020626B
      77642C20
      272E2720
      3D20646F
      6E65
01A0  0D0A4720		db	CR,LF,'G <start> - go to address'
      3C737461
      72743E20
      2D20676F
      20746F20
      61646472
      657373
01BB  0D0A4620		db	CR,LF,'F <start> <end> <data> - fill memory'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6174613E
      202D2066
      696C6C20
      6D656D6F
      7279
01E1  0D0A4D20		db	CR,LF,'M <start> <end> <dest> - Move data'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6573743E
      202D204D
      6F766520
      64617461
0205  0D0A4920		db	CR,LF,'I <port> [num] - Input from port'
      3C706F72
      743E205B
      6E756D5D
      202D2049
      6E707574
      2066726F
      6D20706F
      7274
0227  0D0A4F20		db	CR,LF,'O <port> <value> [...] - Output to port'
      3C706F72
      743E203C
      76616C75
      653E205B
      2E2E2E5D
      202D204F
      75747075
      7420746F
      20706F72
      74
0250  0D0A5620		db	CR,LF,'V - Show ROM version'
      2D205368
      6F772052
      4F4D2076
      65727369
      6F6E
0266  0D0A5E43		db	CR,LF,'^C aborts command entry'
      2061626F
      72747320
      636F6D6D
      616E6420
      656E7472
      79
027F  00      		db	TRM
		
0280          	Qcomnd:
0280  212801  		lxi	h,menu
0283  CDDB04  		call	msgprt
0286  C9      		ret
		
0287  CD5905  	Mcomnd:	call	getaddr
028A  DA0001  		jc	error
028D          		bit	7,b
028D  CB78    		DB	0CBH,7*8+b+40H
028F  C20001  		jnz	error
0292  2200FF  		shld	addr0
0295  CD5905  		call	getaddr
0298  DA0001  		jc	error
029B          		bit	7,b
029B  CB78    		DB	0CBH,7*8+b+40H
029D  C20001  		jnz	error
02A0  2202FF  		shld	addr1
02A3  CD5905  		call	getaddr
02A6  DA0001  		jc	error
02A9          		bit	7,b
02A9  CB78    		DB	0CBH,7*8+b+40H
02AB  C20001  		jnz	error
02AE  EB      		xchg
02AF          		lbcd	addr0
02AF  ED4B    		DB	0EDH,4BH
02B1  00FF    		DW	addr0
02B3  2A02FF  		lhld	addr1
02B6  B7      		ora	a
02B7          		dsbc	b
02B7  ED42    		DB	0EDH,b*8+42H
02B9  DA0001  		jc	error
02BC  23      		inx	h
02BD  4D      		mov	c,l
02BE  44      		mov	b,h
02BF  D5      		push	d
02C0  EB      		xchg
02C1  09      		dad	b
02C2  D1      		pop	d
02C3  DA0001  		jc	error
02C6  2A02FF  		lhld	addr1
02C9  CDF004  		call	check
02CC  DAE202  		jc	mc0
02CF  2A00FF  		lhld	addr0
02D2  CDF004  		call	check
02D5  D2E202  		jnc	mc0
02D8  2A02FF  		lhld	addr1
02DB  EB      		xchg
02DC  09      		dad	b
02DD  2B      		dcx	h
02DE  EB      		xchg
02DF          		lddr
02DF  EDB8    		DB	0EDH,0B8H
02E1  C9      		ret
02E2  2A00FF  	mc0:	lhld	addr0
02E5          		ldir
02E5  EDB0    		DB	0EDH,0B0H
02E7  C9      		ret
02E8          	Fcomnd:
02E8  CD5905  		call	getaddr ;get address to start at
02EB  DA0001  		jc	error	;error if non-hex character
02EE          		bit	7,b	;test for no address (different from 0000)
02EE  CB78    		DB	0CBH,7*8+b+40H
02F0  C20001  		jnz	error	;error if no address was entered
02F3  2200FF  		shld	addr0	;save starting address
02F6  CD5905  		call	getaddr ;get stop address
02F9  DA0001  		jc	error	;error if non-hex character
02FC          		bit	7,b	;test for no entry
02FC  CB78    		DB	0CBH,7*8+b+40H
02FE  C20001  		jnz	error	;error if no stop address
0301  2202FF  		shld	addr1	;save stop address
0304  CD5905  		call	getaddr ;get fill data
0307  DA0001  		jc	error	;error if non-hex character
030A          		bit	7,b	;test for no entry
030A  CB78    		DB	0CBH,7*8+b+40H
030C  C20001  		jnz	error	;error if no fill data
030F  7C      		mov	a,h
0310  B7      		ora	a
0311  C20001  		jnz	error
0314  4D      		mov	c,l	;(C)=fill data
0315  2A02FF  		lhld	addr1	;get stop address
0318          		lded	addr0	;get start address
0318  ED5B    		DB	0EDH,5BH
031A  00FF    		DW	addr0
031C  79      	fc0:	mov	a,c	;
031D  12      		stax	d	;put byte in memory
031E  13      		inx	d	;step to next byte
031F  7A      		mov	a,d	;
0320  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
0321  C8      		rz		;
0322  CDF004  		call	check	;test for past stop address
0325  D8      		rc	;quit if past stop address
0326          		jr	fc0
0326  18F4    		DB	18H,fc0-$-1
		
0328          	Dcomnd:		;display memory
0328  CD5905  		call	getaddr ;get address to start at
032B  DA0001  		jc	error	;error if non-hex character
032E          		bit	7,b	;test for no address (different from 0000)
032E  CB78    		DB	0CBH,7*8+b+40H
0330  C20001  		jnz	error	;error if no address was entered
0333  2200FF  		shld	addr0	;save starting address
0336  CD5905  		call	getaddr ;get stop address
0339  DA0001  		jc	error	;error if non-hex character
033C          		bit	7,b	;test for no entry
033C  CB78    		DB	0CBH,7*8+b+40H
033E  C20001  		jnz	error	;error if no stop address
0341          		lded	addr0	;get start address into (DE)
0341  ED5B    		DB	0EDH,5BH
0343  00FF    		DW	addr0
0345  CDD104  	dis0:	call	crlf	;start on new line
0348  CDB204  		call	taddr	;print current address
034B  CDCC04  		call	space	;delimit it from data
034E  0610    		mvi	b,16	;display 16 bytes on each line
0350  1A      	dis1:	ldax	d	;get byte to display
0351  13      		inx	d	;step to next byte
0352  CDB704  		call	hexout	;display this byte in HEX
0355  CDCC04  		call	space	;delimit it from others
0358  7A      		mov	a,d
0359  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
035A          		jrz	dis2
035A  2807    		DB	28H,dis2-$-1
035C  CDF004  		call	check	;test for past stop address
035F          		jrc	dis2	;quit if past stop address
035F  3802    		DB	38H,dis2-$-1
0361          		djnz	dis1	;else do next byte on this line
0361  10ED    		DB	10H,dis1-$-1
0363  CDCC04  	dis2:	call	space	;delimit it from data
0366  CDCC04  		call	space
0369          		lded	addr0
0369  ED5B    		DB	0EDH,5BH
036B  00FF    		DW	addr0
036D  0610    		mvi	b,16	;display 16 bytes on each line
036F  1A      	dis3:	ldax	d	;get byte to display
0370  13      		inx	d	;step to next byte
0371  0E2E    		mvi	c,'.'
0373  FE20    		cpi	' '
0375          		jrc	dis4
0375  3805    		DB	38H,dis4-$-1
0377  FE7F    		cpi	'~'+1
0379          		jrnc	dis4
0379  3001    		DB	30H,dis4-$-1
037B  4F      		mov	c,a
037C  CD8900  	dis4:	call	conout
037F  7A      		mov	a,d
0380  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
0381  C8      		rz
0382  CDF004  		call	check	;test for past stop address
0385  D8      		rc	;quit if past stop address
0386          		djnz	dis3	;else do next byte on this line
0386  10E7    		DB	10H,dis3-$-1
0388          		sded	addr0
0388  ED53    		DB	0EDH,53H
038A  00FF    		DW	addr0
038C          		jr	dis0	;when line is finished, start another
038C  18B7    		DB	18H,dis0-$-1
		
038E          	Scomnd: 		;substitute (set) memory
038E  CD5905  		call	getaddr ;get address to start substitution at
0391  DA0001  		jc	error	;error if non-hex character
0394          		bit	7,b	;test for no entry
0394  CB78    		DB	0CBH,7*8+b+40H
0396  C20001  		jnz	error	;error if no address
0399  EB      		xchg		;put address in (DE)
039A  CDD104  	sb1:	call	crlf	;start on new line
039D  CDB204  		call	taddr	;print address
03A0  CDCC04  		call	space	;and delimit it
03A3  1A      		ldax	d	;get current value of byte
03A4  CDB704  		call	hexout	;and display it
03A7  CDCC04  		call	space	;delimit it from user's (posible) entry
03AA  0600    		mvi	b,0	;zero accumilator for user's entry
03AC  CDB200  	sb2:	call	conine	;get user's first character
03AF  FE0D    		cpi	CR	;if CR then skip to next byte
03B1          		jrz	foward
03B1  2833    		DB	28H,foward-$-1
03B3  FE20    		cpi	' '	;or if Space then skip to next
03B5          		jrz	foward
03B5  282F    		DB	28H,foward-$-1
03B7  FE2D    		cpi	'-'	;if Minus then step back to previous address
03B9          		jrz	bakwrd
03B9  282E    		DB	28H,bakwrd-$-1
03BB  FE2E    		cpi	'.'	;if Period then stop substitution
03BD  C8      		rz
03BE  CD8405  		call	hexcon	;if none of the above, should be HEX digit
03C1          		jrc	error0	;error if not
03C1  3829    		DB	38H,error0-$-1
03C3          		jr	sb3	;start accumilating HEX digits
03C3  1805    		DB	18H,sb3-$-1
03C5  CD8405  	sb0:	call	hexcon	;test for HEX digit
03C8          		jrc	error1	;error if not HEX
03C8  3827    		DB	38H,error1-$-1
03CA          	sb3:	slar	b	;roll accumilator to receive new digit
03CA  CB20    		DB	0CBH, 20H + b
03CC          		slar	b
03CC  CB20    		DB	0CBH, 20H + b
03CE          		slar	b
03CE  CB20    		DB	0CBH, 20H + b
03D0          		slar	b
03D0  CB20    		DB	0CBH, 20H + b
03D2  B0      		ora	b	;merge in new digit
03D3  47      		mov	b,a
03D4  CDB200  	sb4:	call	conine	;get next character
03D7  FE0D    		cpi	CR	;if CR then put existing byte into memory
03D9          		jrz	putbyte ;  and step to next.
03D9  2809    		DB	28H,putbyte-$-1
03DB  FE2E    		cpi	'.'
03DD  C8      		rz
03DE  FE7F    		cpi	del	;if DEL then restart at same address
03E0          		jrz	sb1
03E0  28B8    		DB	28H,sb1-$-1
03E2          		jr	sb0	;else continue entering hex digits
03E2  18E1    		DB	18H,sb0-$-1
03E4          	putbyte:
03E4  78      		mov	a,b	;store accumilated byte in memory
03E5  12      		stax	d
03E6          	foward:
03E6  13      		inx	d	;step to next location
03E7          		jr	sb1	;and allow substitution there
03E7  18B1    		DB	18H,sb1-$-1
		
03E9          	bakwrd:
03E9  1B      		dcx	d	;move address backward one location
03EA          		jr	sb1
03EA  18AE    		DB	18H,sb1-$-1
		
03EC  CD8700  	error0:	call	belout	;user's entry was not valid, beep and continue
03EF          		jr	sb2
03EF  18BB    		DB	18H,sb2-$-1
03F1  CD8700  	error1:	call	belout	;same as above but for different section of routine
03F4          		jr	sb4
03F4  18DE    		DB	18H,sb4-$-1
		
03F6          	Gcomnd: 		;jump to address given by user
03F6  CD5905  		call	getaddr ;get address to jump to
03F9  DA0001  		jc	error	;error if non-hex character
03FC          		bit	7,b	;test for no entry
03FC  CB78    		DB	0CBH,7*8+b+40H
03FE  C20001  		jnz	error	;error if no address entered
0401  CDD104  		call	crlf	;on new line,
0404  0E47    		mvi	c,'G'	;display "GO aaaa?" to ask
0406  CD8900  		call	conout	;user to verify that we should
0409  0E4F    		mvi	c,'O'	;jump to this address (in case user
040B  CD8900  		call	conout	;made a mistake we should not blindly
040E  CDCC04  		call	space	;commit suicide)
0411  EB      		xchg
0412  CDB204  		call	taddr
0415  CDCC04  		call	space
0418  0E3F    		mvi	c,'?'
041A  CD8900  		call	conout
041D  CDB200  		call	conine	;wait for user to type "Y" to
0420  FE59    		cpi	'Y'	;indicate that we should jump.
0422  C0      		rnz		;abort if response was not "Y"
0423  EB      		xchg
0424  E9      		pchl		;else jump to address
		
0425  0D0A496E	inpms:	db	CR,LF,'Input ',TRM
      70757420
      00
042E          	Icomnd:
042E  CD5905  		call	getaddr ;get port address, ignore extra MSDs
0431  DA0001  		jc	error	;error if non-hex character
0434          		bit	7,b	;test for no entry
0434  CB78    		DB	0CBH,7*8+b+40H
0436  C20001  		jnz	error	;error if no address entered
0439  E5      		push	h	; save port
043A  CD5905  		call	getaddr	; hex number of inputs to do
043D  DA0001  		jc	error
0440          		bit	7,b
0440  CB78    		DB	0CBH,7*8+b+40H
0442          		jrz	ic0
0442  2803    		DB	28H,ic0-$-1
0444  210100  		lxi	h,1
0447          	ic0:
0447  E3      		xthl		; save count
0448  E5      		push	h	; re-save port
0449  212504  		lxi	h,inpms
044C  CDDB04  		call	msgprt
044F  E1      		pop	h
0450  E5      		push	h
0451  7D      		mov	a,l
0452  CDB704  		call	hexout
0455  CDCC04  		call	space
0458  0E3D    		mvi	c,'='
045A  CD8900  		call	conout
			; "Input XX ="
045D  C1      		pop	b	; port to BC
045E  E1      		pop	h	; count to HL (L)
045F  260D    		mvi	h,16-3
0461  0600    		mvi	b,0	; safety
0463  C5      		push	b	; C gets trashed by conout
0464          	ic1:
0464  CDCC04  		call	space
0467  C1      		pop	b
0468  C5      		push	b
0469          		inp	a
0469  ED78    		DB	0EDH,a*8+40H
046B  CDB704  		call	hexout
046E  2D      		dcr	l	; assume <= 256
046F          		jrz	ic2
046F  280A    		DB	28H,ic2-$-1
0471  25      		dcr	h	; col count
0472          		jrnz	ic1
0472  20F0    		DB	20H,ic1-$-1
0474  CDD104  		call	crlf
0477  2610    		mvi	h,16
0479          		jr	ic1
0479  18E9    		DB	18H,ic1-$-1
047B          	ic2:
047B  C1      		pop	b	; fix stack
047C  CDD104  		call	crlf
047F  C9      		ret
		
		; TODO: no feedback?
0480          	Ocomnd:
0480  CD5905  		call	getaddr ;get port address, ignore extra MSDs
0483  DA0001  		jc	error	;error if non-hex character
0486          		bit	7,b	;test for no entry
0486  CB78    		DB	0CBH,7*8+b+40H
0488  C20001  		jnz	error	;error if no address entered
048B  2600    		mvi	h,0	; safety
048D  E5      		push	h	; save port
048E  CD5905  		call	getaddr ;get value, ignore extra MSDs
0491  DA0001  		jc	error	;error if non-hex character
0494          		bit	7,b	;test for no entry
0494  CB78    		DB	0CBH,7*8+b+40H
0496  C20001  		jnz	error	;error if no value entered
0499  CDD104  		call	crlf
049C          	oc0:		; L has byte to output...
049C  C1      		pop	b	; port
049D  C5      		push	b
049E          		outp	l
049E  ED69    		DB	0EDH,l*8+41H
04A0  CD5905  		call	getaddr ;get value, ignore extra MSDs
04A3  DA0001  		jc	error	;error if non-hex character
					;NOTE: some output has been sent
04A6          		bit	7,b	;test for no entry
04A6  CB78    		DB	0CBH,7*8+b+40H
04A8          		jrz	oc0	;still more to send
04A8  28F2    		DB	28H,oc0-$-1
04AA  E1      		pop	h	; discard port
04AB  C9      		ret
		
04AC          	Vcomnd:
04AC  21BF00  		lxi	h,signon
04AF  C3DB04  		jmp	msgprt
		
		*********************************************************
		**  Utility subroutines
		*********************************************************
		
04B2  7A      	taddr:	mov	a,d	;display (DE) at console in HEX
04B3  CDB704  		call	hexout	;print HI byte in HEX
04B6  7B      		mov	a,e	;now do LO byte
04B7  F5      	hexout:	push	psw	;output (A) to console in HEX
04B8  07      		rlc		;get HI digit in usable (LO) position
04B9  07      		rlc
04BA  07      		rlc
04BB  07      		rlc
04BC  CDC004  		call	nible	;and display it
04BF  F1      		pop	psw	;get LO digit back and display it
04C0  E60F    	nible:	ani	00001111b	;display LO 4 bits of (A) in HEX
04C2  C690    		adi	90h	;algorithm to convert 4-bits to ASCII
04C4  27      		daa
04C5  CE40    		aci	40h
04C7  27      		daa
04C8  4F      		mov	c,a	;display ASCII digit
04C9  C38900  		jmp	conout
		
04CC  0E20    	space:	mvi	c,' '	;send an ASCII blank to console
04CE  C38900  		jmp	conout
		
04D1  0E0D    	crlf:	mvi	c,CR	;send Carriage-Return/Line-Feed to console
04D3  CD8900  		call	conout
04D6  0E0A    		mvi	c,LF
04D8  C38900  		jmp	conout
		
04DB  7E      	msgprt:	mov	a,m	;send string to console, terminated by 00
04DC  B7      		ora	a
04DD  C8      		rz
04DE  4F      		mov	c,a
04DF  CD8900  		call	conout
04E2  23      		inx	h
04E3          		jr	msgprt
04E3  18F6    		DB	18H,msgprt-$-1
		
04E5  7E      	print:	mov	a,m	; BDOS func 9 style msgprt
04E6  FE24    		cpi	'$'
04E8  C8      		rz
04E9  4F      		mov	c,a
04EA  CD8900  		call	conout
04ED  23      		inx	h
04EE          		jr	print
04EE  18F5    		DB	18H,print-$-1
		
04F0  E5      	check:	push	h	;non-destuctive compare HL:DE
04F1  B7      		ora	a
04F2          		dsbc	d
04F2  ED52    		DB	0EDH,d*8+42H
04F4  E1      		pop	h
04F5  C9      		ret
		
		; Convert letters to upper-case
04F6          	toupper:
04F6  FE61    		cpi	'a'
04F8  D8      		rc
04F9  FE7B    		cpi	'z'+1
04FB  D0      		rnc
04FC  E65F    		ani	01011111b
04FE  C9      		ret
		
		; Read a line of text into 'line'
		; End with CR, honor BS
		; Reject all non-printing characters, force toupper
04FF  2104FF  	linein:	lxi	h,line	;get string of characters from console, ending in CR
0502  CD9800  	li0:	call	conin	;get a character
0505  FE08    		cpi	BS	;allow BackSpacing
0507          		jrz	backup
0507  281D    		DB	28H,backup-$-1
0509  FE0D    		cpi	CR
050B          		jrz	li1
050B  282E    		DB	28H,li1-$-1
050D  FE03    		cpi	CTLC
050F          		jrz	liZ
050F  2830    		DB	28H,liZ-$-1
0511  FE20    		cpi	' '	;ignore other non-print
0513          		jrc	li0
0513  38ED    		DB	38H,li0-$-1
0515  CDF604  		call	toupper
0518  77      		mov	m,a	;put character in line nuffer
0519  23      		inx	h
051A  4F      		mov	c,a
051B  CD8900  		call	conout	; echo character
051E  7D      		mov	a,l	;else check for pending buffer overflow
051F  D604    		sui	line mod 256
0521  FE40    		cpi	64
0523  C8      		rz		;stop if buffer full
0524          		jr	li0	;if not full, keep getting characters
0524  18DC    		DB	18H,li0-$-1
		
0526  7D      	backup:	mov	a,l	;(destructive) BackSpacing
0527  FE04    		cpi	line mod 256	;test if at beginning of line
0529          		jrz	li0	;can't backspace past start of line
0529  28D7    		DB	28H,li0-$-1
052B  0E08    		mvi	c,bs	;output BS," ",BS to erase character on screen
052D  CD8900  		call	conout	;and put cursor back one position
0530  CDCC04  		call	space
0533  0E08    		mvi	c,bs
0535  CD8900  		call	conout
0538  2B      		dcx	h	;step buffer pointer back one
0539          		jr	li0	;and continue to get characters
0539  18C7    		DB	18H,li0-$-1
		
		; End line input, A=CR
053B  77      	li1:	mov	m,a	; store CR in buffer
053C  0E0D    		mvi	c,CR	;display CR so user knows we got it
053E  C38900  		jmp	conout	;then return to calling routine
		
		; Abort input
0541  0E5E    	liZ:	mvi	c,'^'
0543  CD8900  		call	conout
0546  0E43    		mvi	c,'C'
0548  CD8900  		call	conout
054B  E1      		pop	h	; always OK?
054C  C9      		ret		; return to caller's caller (main debug loop)
		
		; Get next character from line buffer.
		; DE=current pointer within 'line'
		; Returns: ZR=EOL else A=char
054D  7B      	char:	mov	a,e	;remove a character from line buffer,
054E  D604    		sui	line mod 256	;testing for no more characters
0550  D640    		sui	64
0552  C8      		rz		;return [ZR] condition if at end of buffer
0553  1A      		ldax	d
0554  FE0D    		cpi	CR
0556  C8      		rz		;also return [ZR] if at end of line
0557  13      		inx	d	;else step to next character
0558  C9      		ret		;and return [NZ]
		
		; Get HEX value from line buffer
		; Return: CY=error, HL=value, bit7(B)=1 if no input
0559          	getaddr:		;extract address from line buffer (dilimitted by " ")
0559          		setb	7,b	;flag to detect no address entered
0559  CBF8    		DB	0CBH,7*8+b+0C0H
055B  210000  		lxi	h,0
055E  CD4D05  	ga2:	call	char
0561  C8      		rz		;end of buffer/line before a character was found
0562  FE20    		cpi	' '	;skip all leading spaces
0564          		jrnz	ga1	;if not space, then start getting HEX digits
0564  2006    		DB	20H,ga1-$-1
0566          		jr	ga2	;else if space, loop untill not space
0566  18F6    		DB	18H,ga2-$-1
		
0568  CD4D05  	ga0:	call	char
056B  C8      		rz
056C  CD8405  	ga1:	call	hexcon	;start assembling digits into 16 bit accumilator
056F          		jrc	chkdlm	;check if valid delimiter before returning error.
056F  380E    		DB	38H,chkdlm-$-1
0571          		res	7,b	;reset flag
0571  CBB8    		DB	0CBH,7*8+b+80H
0573  D5      		push	d	;save buffer pointer
0574  5F      		mov	e,a
0575  1600    		mvi	d,0
0577  29      		dad	h	;shift "accumilator" left 1 digit
0578  29      		dad	h
0579  29      		dad	h
057A  29      		dad	h
057B  19      		dad	d	;add in new digit
057C  D1      		pop	d	;restore buffer pointer
057D          		jr	ga0	;loop for next digit
057D  18E9    		DB	18H,ga0-$-1
		
057F  FE20    	chkdlm: cpi	' '	;blank is currently the only valid delimiter
0581  C8      		rz
0582  37      		stc
0583  C9      		ret
		
0584          	hexcon: 		;convert ASCII character to HEX digit
0584  FE30    		cpi	'0'	;must be .GE. "0"
0586  D8      		rc
0587  FE3A    		cpi	'9'+1	;and be .LE. "9"
0589          		jrc	ok0	;valid numeral.
0589  3809    		DB	38H,ok0-$-1
058B  FE41    		cpi	'A'	;or .GE. "A"
058D  D8      		rc
058E  FE47    		cpi	'F'+1	;and .LE. "F"
0590  3F      		cmc
0591  D8      		rc		;return [CY] if not valid HEX digit
0592  D607    		sui	'A'-'9'-1	;convert letter
0594  D630    	ok0:	sui	'0'	;convert (numeral) to 0-15 in (A)
0596  C9      		ret
		
		; These only work on */84 (and 10) models.
		; Have no effect (and does nothing) on */83 models.
0597          	proginit:
0597  DB14    		in	sysp84
0599  E6FC    		ani	not DSNONE
059B  F602    		ori	DS0
059D  D314    		out	sysp84
059F  3E41    		mvi	a,'A'
05A1  320030  		sta	3000h
05A4  C9      		ret
		
05A5          	progress:
05A5  DB14    		in	sysp84
05A7  EE03    		xri	DSNONE
05A9  D314    		out	sysp84
05AB  3A0030  		lda	3000h
05AE  EE03    		xri	00000011b
05B0  320030  		sta	3000h
05B3  C9      		ret
		
			rept	0800h-$
05B4  FF      		db	0ffh
05B5  FF      		db	0ffh
05B6  FF      		db	0ffh
05B7  FF      		db	0ffh
05B8  FF      		db	0ffh
05B9  FF      		db	0ffh
05BA  FF      		db	0ffh
05BB  FF      		db	0ffh
05BC  FF      		db	0ffh
05BD  FF      		db	0ffh
05BE  FF      		db	0ffh
05BF  FF      		db	0ffh
05C0  FF      		db	0ffh
05C1  FF      		db	0ffh
05C2  FF      		db	0ffh
05C3  FF      		db	0ffh
05C4  FF      		db	0ffh
05C5  FF      		db	0ffh
05C6  FF      		db	0ffh
05C7  FF      		db	0ffh
05C8  FF      		db	0ffh
05C9  FF      		db	0ffh
05CA  FF      		db	0ffh
05CB  FF      		db	0ffh
05CC  FF      		db	0ffh
05CD  FF      		db	0ffh
05CE  FF      		db	0ffh
05CF  FF      		db	0ffh
05D0  FF      		db	0ffh
05D1  FF      		db	0ffh
05D2  FF      		db	0ffh
05D3  FF      		db	0ffh
05D4  FF      		db	0ffh
05D5  FF      		db	0ffh
05D6  FF      		db	0ffh
05D7  FF      		db	0ffh
05D8  FF      		db	0ffh
05D9  FF      		db	0ffh
05DA  FF      		db	0ffh
05DB  FF      		db	0ffh
05DC  FF      		db	0ffh
05DD  FF      		db	0ffh
05DE  FF      		db	0ffh
05DF  FF      		db	0ffh
05E0  FF      		db	0ffh
05E1  FF      		db	0ffh
05E2  FF      		db	0ffh
05E3  FF      		db	0ffh
05E4  FF      		db	0ffh
05E5  FF      		db	0ffh
05E6  FF      		db	0ffh
05E7  FF      		db	0ffh
05E8  FF      		db	0ffh
05E9  FF      		db	0ffh
05EA  FF      		db	0ffh
05EB  FF      		db	0ffh
05EC  FF      		db	0ffh
05ED  FF      		db	0ffh
05EE  FF      		db	0ffh
05EF  FF      		db	0ffh
05F0  FF      		db	0ffh
05F1  FF      		db	0ffh
05F2  FF      		db	0ffh
05F3  FF      		db	0ffh
05F4  FF      		db	0ffh
05F5  FF      		db	0ffh
05F6  FF      		db	0ffh
05F7  FF      		db	0ffh
05F8  FF      		db	0ffh
05F9  FF      		db	0ffh
05FA  FF      		db	0ffh
05FB  FF      		db	0ffh
05FC  FF      		db	0ffh
05FD  FF      		db	0ffh
05FE  FF      		db	0ffh
05FF  FF      		db	0ffh
0600  FF      		db	0ffh
0601  FF      		db	0ffh
0602  FF      		db	0ffh
0603  FF      		db	0ffh
0604  FF      		db	0ffh
0605  FF      		db	0ffh
0606  FF      		db	0ffh
0607  FF      		db	0ffh
0608  FF      		db	0ffh
0609  FF      		db	0ffh
060A  FF      		db	0ffh
060B  FF      		db	0ffh
060C  FF      		db	0ffh
060D  FF      		db	0ffh
060E  FF      		db	0ffh
060F  FF      		db	0ffh
0610  FF      		db	0ffh
0611  FF      		db	0ffh
0612  FF      		db	0ffh
0613  FF      		db	0ffh
0614  FF      		db	0ffh
0615  FF      		db	0ffh
0616  FF      		db	0ffh
0617  FF      		db	0ffh
0618  FF      		db	0ffh
0619  FF      		db	0ffh
061A  FF      		db	0ffh
061B  FF      		db	0ffh
061C  FF      		db	0ffh
061D  FF      		db	0ffh
061E  FF      		db	0ffh
061F  FF      		db	0ffh
0620  FF      		db	0ffh
0621  FF      		db	0ffh
0622  FF      		db	0ffh
0623  FF      		db	0ffh
0624  FF      		db	0ffh
0625  FF      		db	0ffh
0626  FF      		db	0ffh
0627  FF      		db	0ffh
0628  FF      		db	0ffh
0629  FF      		db	0ffh
062A  FF      		db	0ffh
062B  FF      		db	0ffh
062C  FF      		db	0ffh
062D  FF      		db	0ffh
062E  FF      		db	0ffh
062F  FF      		db	0ffh
0630  FF      		db	0ffh
0631  FF      		db	0ffh
0632  FF      		db	0ffh
0633  FF      		db	0ffh
0634  FF      		db	0ffh
0635  FF      		db	0ffh
0636  FF      		db	0ffh
0637  FF      		db	0ffh
0638  FF      		db	0ffh
0639  FF      		db	0ffh
063A  FF      		db	0ffh
063B  FF      		db	0ffh
063C  FF      		db	0ffh
063D  FF      		db	0ffh
063E  FF      		db	0ffh
063F  FF      		db	0ffh
0640  FF      		db	0ffh
0641  FF      		db	0ffh
0642  FF      		db	0ffh
0643  FF      		db	0ffh
0644  FF      		db	0ffh
0645  FF      		db	0ffh
0646  FF      		db	0ffh
0647  FF      		db	0ffh
0648  FF      		db	0ffh
0649  FF      		db	0ffh
064A  FF      		db	0ffh
064B  FF      		db	0ffh
064C  FF      		db	0ffh
064D  FF      		db	0ffh
064E  FF      		db	0ffh
064F  FF      		db	0ffh
0650  FF      		db	0ffh
0651  FF      		db	0ffh
0652  FF      		db	0ffh
0653  FF      		db	0ffh
0654  FF      		db	0ffh
0655  FF      		db	0ffh
0656  FF      		db	0ffh
0657  FF      		db	0ffh
0658  FF      		db	0ffh
0659  FF      		db	0ffh
065A  FF      		db	0ffh
065B  FF      		db	0ffh
065C  FF      		db	0ffh
065D  FF      		db	0ffh
065E  FF      		db	0ffh
065F  FF      		db	0ffh
0660  FF      		db	0ffh
0661  FF      		db	0ffh
0662  FF      		db	0ffh
0663  FF      		db	0ffh
0664  FF      		db	0ffh
0665  FF      		db	0ffh
0666  FF      		db	0ffh
0667  FF      		db	0ffh
0668  FF      		db	0ffh
0669  FF      		db	0ffh
066A  FF      		db	0ffh
066B  FF      		db	0ffh
066C  FF      		db	0ffh
066D  FF      		db	0ffh
066E  FF      		db	0ffh
066F  FF      		db	0ffh
0670  FF      		db	0ffh
0671  FF      		db	0ffh
0672  FF      		db	0ffh
0673  FF      		db	0ffh
0674  FF      		db	0ffh
0675  FF      		db	0ffh
0676  FF      		db	0ffh
0677  FF      		db	0ffh
0678  FF      		db	0ffh
0679  FF      		db	0ffh
067A  FF      		db	0ffh
067B  FF      		db	0ffh
067C  FF      		db	0ffh
067D  FF      		db	0ffh
067E  FF      		db	0ffh
067F  FF      		db	0ffh
0680  FF      		db	0ffh
0681  FF      		db	0ffh
0682  FF      		db	0ffh
0683  FF      		db	0ffh
0684  FF      		db	0ffh
0685  FF      		db	0ffh
0686  FF      		db	0ffh
0687  FF      		db	0ffh
0688  FF      		db	0ffh
0689  FF      		db	0ffh
068A  FF      		db	0ffh
068B  FF      		db	0ffh
068C  FF      		db	0ffh
068D  FF      		db	0ffh
068E  FF      		db	0ffh
068F  FF      		db	0ffh
0690  FF      		db	0ffh
0691  FF      		db	0ffh
0692  FF      		db	0ffh
0693  FF      		db	0ffh
0694  FF      		db	0ffh
0695  FF      		db	0ffh
0696  FF      		db	0ffh
0697  FF      		db	0ffh
0698  FF      		db	0ffh
0699  FF      		db	0ffh
069A  FF      		db	0ffh
069B  FF      		db	0ffh
069C  FF      		db	0ffh
069D  FF      		db	0ffh
069E  FF      		db	0ffh
069F  FF      		db	0ffh
06A0  FF      		db	0ffh
06A1  FF      		db	0ffh
06A2  FF      		db	0ffh
06A3  FF      		db	0ffh
06A4  FF      		db	0ffh
06A5  FF      		db	0ffh
06A6  FF      		db	0ffh
06A7  FF      		db	0ffh
06A8  FF      		db	0ffh
06A9  FF      		db	0ffh
06AA  FF      		db	0ffh
06AB  FF      		db	0ffh
06AC  FF      		db	0ffh
06AD  FF      		db	0ffh
06AE  FF      		db	0ffh
06AF  FF      		db	0ffh
06B0  FF      		db	0ffh
06B1  FF      		db	0ffh
06B2  FF      		db	0ffh
06B3  FF      		db	0ffh
06B4  FF      		db	0ffh
06B5  FF      		db	0ffh
06B6  FF      		db	0ffh
06B7  FF      		db	0ffh
06B8  FF      		db	0ffh
06B9  FF      		db	0ffh
06BA  FF      		db	0ffh
06BB  FF      		db	0ffh
06BC  FF      		db	0ffh
06BD  FF      		db	0ffh
06BE  FF      		db	0ffh
06BF  FF      		db	0ffh
06C0  FF      		db	0ffh
06C1  FF      		db	0ffh
06C2  FF      		db	0ffh
06C3  FF      		db	0ffh
06C4  FF      		db	0ffh
06C5  FF      		db	0ffh
06C6  FF      		db	0ffh
06C7  FF      		db	0ffh
06C8  FF      		db	0ffh
06C9  FF      		db	0ffh
06CA  FF      		db	0ffh
06CB  FF      		db	0ffh
06CC  FF      		db	0ffh
06CD  FF      		db	0ffh
06CE  FF      		db	0ffh
06CF  FF      		db	0ffh
06D0  FF      		db	0ffh
06D1  FF      		db	0ffh
06D2  FF      		db	0ffh
06D3  FF      		db	0ffh
06D4  FF      		db	0ffh
06D5  FF      		db	0ffh
06D6  FF      		db	0ffh
06D7  FF      		db	0ffh
06D8  FF      		db	0ffh
06D9  FF      		db	0ffh
06DA  FF      		db	0ffh
06DB  FF      		db	0ffh
06DC  FF      		db	0ffh
06DD  FF      		db	0ffh
06DE  FF      		db	0ffh
06DF  FF      		db	0ffh
06E0  FF      		db	0ffh
06E1  FF      		db	0ffh
06E2  FF      		db	0ffh
06E3  FF      		db	0ffh
06E4  FF      		db	0ffh
06E5  FF      		db	0ffh
06E6  FF      		db	0ffh
06E7  FF      		db	0ffh
06E8  FF      		db	0ffh
06E9  FF      		db	0ffh
06EA  FF      		db	0ffh
06EB  FF      		db	0ffh
06EC  FF      		db	0ffh
06ED  FF      		db	0ffh
06EE  FF      		db	0ffh
06EF  FF      		db	0ffh
06F0  FF      		db	0ffh
06F1  FF      		db	0ffh
06F2  FF      		db	0ffh
06F3  FF      		db	0ffh
06F4  FF      		db	0ffh
06F5  FF      		db	0ffh
06F6  FF      		db	0ffh
06F7  FF      		db	0ffh
06F8  FF      		db	0ffh
06F9  FF      		db	0ffh
06FA  FF      		db	0ffh
06FB  FF      		db	0ffh
06FC  FF      		db	0ffh
06FD  FF      		db	0ffh
06FE  FF      		db	0ffh
06FF  FF      		db	0ffh
0700  FF      		db	0ffh
0701  FF      		db	0ffh
0702  FF      		db	0ffh
0703  FF      		db	0ffh
0704  FF      		db	0ffh
0705  FF      		db	0ffh
0706  FF      		db	0ffh
0707  FF      		db	0ffh
0708  FF      		db	0ffh
0709  FF      		db	0ffh
070A  FF      		db	0ffh
070B  FF      		db	0ffh
070C  FF      		db	0ffh
070D  FF      		db	0ffh
070E  FF      		db	0ffh
070F  FF      		db	0ffh
0710  FF      		db	0ffh
0711  FF      		db	0ffh
0712  FF      		db	0ffh
0713  FF      		db	0ffh
0714  FF      		db	0ffh
0715  FF      		db	0ffh
0716  FF      		db	0ffh
0717  FF      		db	0ffh
0718  FF      		db	0ffh
0719  FF      		db	0ffh
071A  FF      		db	0ffh
071B  FF      		db	0ffh
071C  FF      		db	0ffh
071D  FF      		db	0ffh
071E  FF      		db	0ffh
071F  FF      		db	0ffh
0720  FF      		db	0ffh
0721  FF      		db	0ffh
0722  FF      		db	0ffh
0723  FF      		db	0ffh
0724  FF      		db	0ffh
0725  FF      		db	0ffh
0726  FF      		db	0ffh
0727  FF      		db	0ffh
0728  FF      		db	0ffh
0729  FF      		db	0ffh
072A  FF      		db	0ffh
072B  FF      		db	0ffh
072C  FF      		db	0ffh
072D  FF      		db	0ffh
072E  FF      		db	0ffh
072F  FF      		db	0ffh
0730  FF      		db	0ffh
0731  FF      		db	0ffh
0732  FF      		db	0ffh
0733  FF      		db	0ffh
0734  FF      		db	0ffh
0735  FF      		db	0ffh
0736  FF      		db	0ffh
0737  FF      		db	0ffh
0738  FF      		db	0ffh
0739  FF      		db	0ffh
073A  FF      		db	0ffh
073B  FF      		db	0ffh
073C  FF      		db	0ffh
073D  FF      		db	0ffh
073E  FF      		db	0ffh
073F  FF      		db	0ffh
0740  FF      		db	0ffh
0741  FF      		db	0ffh
0742  FF      		db	0ffh
0743  FF      		db	0ffh
0744  FF      		db	0ffh
0745  FF      		db	0ffh
0746  FF      		db	0ffh
0747  FF      		db	0ffh
0748  FF      		db	0ffh
0749  FF      		db	0ffh
074A  FF      		db	0ffh
074B  FF      		db	0ffh
074C  FF      		db	0ffh
074D  FF      		db	0ffh
074E  FF      		db	0ffh
074F  FF      		db	0ffh
0750  FF      		db	0ffh
0751  FF      		db	0ffh
0752  FF      		db	0ffh
0753  FF      		db	0ffh
0754  FF      		db	0ffh
0755  FF      		db	0ffh
0756  FF      		db	0ffh
0757  FF      		db	0ffh
0758  FF      		db	0ffh
0759  FF      		db	0ffh
075A  FF      		db	0ffh
075B  FF      		db	0ffh
075C  FF      		db	0ffh
075D  FF      		db	0ffh
075E  FF      		db	0ffh
075F  FF      		db	0ffh
0760  FF      		db	0ffh
0761  FF      		db	0ffh
0762  FF      		db	0ffh
0763  FF      		db	0ffh
0764  FF      		db	0ffh
0765  FF      		db	0ffh
0766  FF      		db	0ffh
0767  FF      		db	0ffh
0768  FF      		db	0ffh
0769  FF      		db	0ffh
076A  FF      		db	0ffh
076B  FF      		db	0ffh
076C  FF      		db	0ffh
076D  FF      		db	0ffh
076E  FF      		db	0ffh
076F  FF      		db	0ffh
0770  FF      		db	0ffh
0771  FF      		db	0ffh
0772  FF      		db	0ffh
0773  FF      		db	0ffh
0774  FF      		db	0ffh
0775  FF      		db	0ffh
0776  FF      		db	0ffh
0777  FF      		db	0ffh
0778  FF      		db	0ffh
0779  FF      		db	0ffh
077A  FF      		db	0ffh
077B  FF      		db	0ffh
077C  FF      		db	0ffh
077D  FF      		db	0ffh
077E  FF      		db	0ffh
077F  FF      		db	0ffh
0780  FF      		db	0ffh
0781  FF      		db	0ffh
0782  FF      		db	0ffh
0783  FF      		db	0ffh
0784  FF      		db	0ffh
0785  FF      		db	0ffh
0786  FF      		db	0ffh
0787  FF      		db	0ffh
0788  FF      		db	0ffh
0789  FF      		db	0ffh
078A  FF      		db	0ffh
078B  FF      		db	0ffh
078C  FF      		db	0ffh
078D  FF      		db	0ffh
078E  FF      		db	0ffh
078F  FF      		db	0ffh
0790  FF      		db	0ffh
0791  FF      		db	0ffh
0792  FF      		db	0ffh
0793  FF      		db	0ffh
0794  FF      		db	0ffh
0795  FF      		db	0ffh
0796  FF      		db	0ffh
0797  FF      		db	0ffh
0798  FF      		db	0ffh
0799  FF      		db	0ffh
079A  FF      		db	0ffh
079B  FF      		db	0ffh
079C  FF      		db	0ffh
079D  FF      		db	0ffh
079E  FF      		db	0ffh
079F  FF      		db	0ffh
07A0  FF      		db	0ffh
07A1  FF      		db	0ffh
07A2  FF      		db	0ffh
07A3  FF      		db	0ffh
07A4  FF      		db	0ffh
07A5  FF      		db	0ffh
07A6  FF      		db	0ffh
07A7  FF      		db	0ffh
07A8  FF      		db	0ffh
07A9  FF      		db	0ffh
07AA  FF      		db	0ffh
07AB  FF      		db	0ffh
07AC  FF      		db	0ffh
07AD  FF      		db	0ffh
07AE  FF      		db	0ffh
07AF  FF      		db	0ffh
07B0  FF      		db	0ffh
07B1  FF      		db	0ffh
07B2  FF      		db	0ffh
07B3  FF      		db	0ffh
07B4  FF      		db	0ffh
07B5  FF      		db	0ffh
07B6  FF      		db	0ffh
07B7  FF      		db	0ffh
07B8  FF      		db	0ffh
07B9  FF      		db	0ffh
07BA  FF      		db	0ffh
07BB  FF      		db	0ffh
07BC  FF      		db	0ffh
07BD  FF      		db	0ffh
07BE  FF      		db	0ffh
07BF  FF      		db	0ffh
07C0  FF      		db	0ffh
07C1  FF      		db	0ffh
07C2  FF      		db	0ffh
07C3  FF      		db	0ffh
07C4  FF      		db	0ffh
07C5  FF      		db	0ffh
07C6  FF      		db	0ffh
07C7  FF      		db	0ffh
07C8  FF      		db	0ffh
07C9  FF      		db	0ffh
07CA  FF      		db	0ffh
07CB  FF      		db	0ffh
07CC  FF      		db	0ffh
07CD  FF      		db	0ffh
07CE  FF      		db	0ffh
07CF  FF      		db	0ffh
07D0  FF      		db	0ffh
07D1  FF      		db	0ffh
07D2  FF      		db	0ffh
07D3  FF      		db	0ffh
07D4  FF      		db	0ffh
07D5  FF      		db	0ffh
07D6  FF      		db	0ffh
07D7  FF      		db	0ffh
07D8  FF      		db	0ffh
07D9  FF      		db	0ffh
07DA  FF      		db	0ffh
07DB  FF      		db	0ffh
07DC  FF      		db	0ffh
07DD  FF      		db	0ffh
07DE  FF      		db	0ffh
07DF  FF      		db	0ffh
07E0  FF      		db	0ffh
07E1  FF      		db	0ffh
07E2  FF      		db	0ffh
07E3  FF      		db	0ffh
07E4  FF      		db	0ffh
07E5  FF      		db	0ffh
07E6  FF      		db	0ffh
07E7  FF      		db	0ffh
07E8  FF      		db	0ffh
07E9  FF      		db	0ffh
07EA  FF      		db	0ffh
07EB  FF      		db	0ffh
07EC  FF      		db	0ffh
07ED  FF      		db	0ffh
07EE  FF      		db	0ffh
07EF  FF      		db	0ffh
07F0  FF      		db	0ffh
07F1  FF      		db	0ffh
07F2  FF      		db	0ffh
07F3  FF      		db	0ffh
07F4  FF      		db	0ffh
07F5  FF      		db	0ffh
07F6  FF      		db	0ffh
07F7  FF      		db	0ffh
07F8  FF      		db	0ffh
07F9  FF      		db	0ffh
07FA  FF      		db	0ffh
07FB  FF      		db	0ffh
07FC  FF      		db	0ffh
07FD  FF      		db	0ffh
07FE  FF      		db	0ffh
07FF  FF      		db	0ffh
		
		; RAM used...
FF00          		org	0ff00h
FF00          	addr0:	ds	2
FF02          	addr1:	ds	2
FF04          	line:	ds	64
		
FF44          		end



Statistics:

     4	passes
     0	jr promotions
   132	symbols
  2048	bytes

   759	macro calls
  3759	macro bytes
     0	invented symbols
