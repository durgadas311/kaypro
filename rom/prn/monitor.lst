		; serial-port ROM monitor/boot for debugging Kaypro.
		; Uses "aux serial" a.k.a "Serial Printer" port.
		
0025          	VERN	equ	025h	; ROM version
		
0000          	rom2k	equ	0
		
0000          	 if rom2k
		 else
1000          	romsiz	equ	1000h	; minimum space for ROM
		 endif
		
			maclib	z80
**** z80.lib ****
**** monitor.asm ****
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
			$*macro
		
000D          	CR	equ	13
000A          	LF	equ	10
0003          	CTLC	equ	3
0007          	BEL	equ	7
0009          	TAB	equ	9
0008          	BS	equ	8
001B          	ESC	equ	27
0000          	TRM	equ	0
007F          	DEL	equ	127
		
		; WD1943 at 5.0688MHz...
000E          	B9600	equ	0eh
0005          	B300	equ	05h
		; */84 (and 10) sysport drive select
0002          	DS0	equ	0010b
0001          	DS1	equ	0001b
0003          	DSNONE	equ	0011b	; also mask
0010          	K84MTR	equ	00010000b	; */84 (10) MOTOR control, 1=ON
0010          	K83PPS	equ	00010000b	; */83 ParPrt strobe (normally 0)
0040          	K84CCG	equ	01000000b	; */84 (10) CharGen A12
0040          	K83MTR	equ	01000000b	; */83 MOTOR control, 1=OFF
		
0004          	sio1	equ	04h	; "serial data", "keyboard"
000C          	sio2	equ	0ch	; "serial printer", "modem"
0000          	brd1	equ	00h
0008          	brd2	equ	08h
		
0000          	sioA	equ	00h	; offsets
0001          	sioB	equ	01h
		
0000          	sioD	equ	00h	; offsets
0002          	sioC	equ	02h
		
		; Choose Z80SIO port to use...
0004          	condat	equ	sio1+sioA+sioD
0006          	conctl	equ	sio1+sioA+sioC
0000          	conbrr	equ	brd1
		
0005          	kbddat	equ	sio1+sioB+sioD
0007          	kbdctl	equ	sio1+sioB+sioC
000C          	kbdbrr	equ	0ch	; */83 uses WD1943, else hardwired to 300 baud
		
001C          	crtctl	equ	1ch	; */84 and 10 only
001D          	crtdat	equ	1dh	; */84 and 10 only
001F          	crtram	equ	1fh	; also accesses CRTC
		
0014          	sysp84	equ	14h	; sysport on */84 (and 10). */83 have nothing here.
		
0010          	fpysts	equ	10h
0010          	fpycmd	equ	10h
0011          	fpytrk	equ	11h
0012          	fpysec	equ	12h
0013          	fpydat	equ	13h
		
0080          	hdddat	equ	80h
0081          	hdderr	equ	81h
0082          	hddcnt	equ	82h
0083          	hddsec	equ	83h
0084          	hddclo	equ	84h
0085          	hddchi	equ	85h
0086          	hddsdh	equ	86h
0087          	hddcmd	equ	87h
		
0000          	stack	equ	00000h	; stack at top of memory (wrapped)
		
		; Start of ROM code
0000          		org	00000h
0008          	rst0e	equ	$+8
0000  C37000  		jmp	init
0003  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0010          	rst1e	equ	$+8
0008  C34B00  	rst1:	jmp	swtrap
000B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0018          	rst2e	equ	$+8
0010  C34B00  	rst2:	jmp	swtrap
0013  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0020          	rst3e	equ	$+8
0018  C34B00  	rst3:	jmp	swtrap
001B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0028          	rst4e	equ	$+8
0020  C34B00  	rst4:	jmp	swtrap
0023  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0030          	rst5e	equ	$+8
0028  C34B00  	rst5:	jmp	swtrap
002B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0038          	rst6e	equ	$+8
0030  C34B00  	rst6:	jmp	swtrap
0033  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0040          	rst7e	equ	$+8
0038  C34B00  	rst7:	jmp	swtrap
003B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
			; NMI not a problem?
		
0040  0D0A2A2A	swt:	db	CR,LF,'*** RST ',TRM
      2A205253
      542000
		
004B  F3      	swtrap:	di		; try to recover return address...
004C  D1      		pop	d	; should be caller of RST...
004D  310000  		lxi	sp,stack
0050  D5      		push	d	; not needed?
0051  214000  		lxi	h,swt
0054  CD6509  		call	msgprt
0057  D1      		pop	d
0058  CD3C09  		call	taddr
005B  CD5B09  		call	crlf
			; TODO: print address, etc...
005E  C3E200  		jmp	debug
		
			rept	0066h-$
0061  FF      		db	0ffh
0062  FF      		db	0ffh
0063  FF      		db	0ffh
0064  FF      		db	0ffh
0065  FF      		db	0ffh
0066  C9      	nmi:	ret
		
0067  18      	sioini:	db	18h	; reset
0068  0444    		db	4,044h	; 16x, 1s, Np
006A  03C1    		db	3,0c1h	; 8b, RxEn
006C  05EA    		db	5,0eah	; DTR, 8b, TxEn, RTS
006E  0100    		db	1,000h	;
0009          	siolen	equ	$-sioini
		
		; ROM start point - initialize everything
		; We know we have 64K RAM...
0070  F3      	init:	di
0071  310000  		lxi	sp,stack
		
			; init serial port
0074  3E0E    		mvi	a,B9600
0076  D300    		out	conbrr
0078  216700  		lxi	h,sioini
007B  0E06    		mvi	c,conctl
007D  0609    		mvi	b,siolen
007F          		outir
007F  EDB3    		DB	0EDH,0B3H
		
0081  21C500  		lxi	h,signon
0084  CD6509  		call	msgprt
		
0087  CD1D0A  		call	proginit
			; save registers on stack, for debugger access...
008A  C3E200  		jmp	debug
		
008D          	belout:
008D  0E07    		mvi	c,BEL
		; Output char to console
		; C=char
008F          	conout:
008F  DB06    		in	conctl
0091  E604    		ani	00000100b
0093          		jrz	conout
0093  28FA    		DB	28H,conout-$-1
0095  79      		mov	a,c
0096  D304    		out	condat
0098  C9      		ret
		
0099  0D0A3A20	prompt:	db	CR,LF,': ',TRM
      00
		
		; Get char from console
		; Returns: A=char, stripped
009E  E5      	conin:	push	h
009F  210000  	ci2:	lxi	h,0
00A2  DB06    	ci0:	in	conctl		; 11
00A4  E601    		ani	00000001b	;  7
00A6          		jrnz	ci1		;  7
00A6  200A    		DB	20H,ci1-$-1
00A8  2B      		dcx	h		;  6
00A9  7D      		mov	a,l		;  4
00AA  B4      		ora	h		;  4
00AB          		jrnz	ci0		; 12 = 51 (12.75uS) (~0.8 sec)
00AB  20F5    		DB	20H,ci0-$-1
00AD  CD410A  		call	progress	; on */83 (20.4uS or ~1.3 sec)
00B0          		jr	ci2
00B0  18ED    		DB	18H,ci2-$-1
00B2  DB04    	ci1:	in	condat
00B4  E67F    		ani	07fh
00B6  E1      		pop	h
00B7  C9      		ret
		
		; Get char from console, toupper and echo
00B8          	conine:
00B8  CD9E00  		call	conin
00BB  CD8009  		call	toupper
00BE  F5      		push	psw
00BF  4F      		mov	c,a
00C0  CD8F00  		call	conout
00C3  F1      		pop	psw
00C4  C9      		ret
		
00C5  0D0A4B61	signon:	db	CR,LF,'Kaypro'
      7970726F
0000          	 if rom2k
		 endif
00CD  204D6F6E		db	' Monitor v'
      69746F72
      2076
00D7  322E35  	vernum:	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
00DA  0D0A00  		db	CR,LF,TRM
		
00DD  0D0A073F	errm:	db	CR,LF,BEL,'?',TRM
      00
		
		*********************************************************
		**  Debug mode
		*********************************************************
		
00E2          	debug:
00E2  310000  	cilp:	lxi	sp,stack
00E5  21E200  		lxi	h,cilp		;setup return address
00E8  E5      		push	h
00E9  219900  		lxi	h,prompt	;prompt for a command
00EC  CD6509  		call	msgprt
00EF  CD8909  		call	linein		;wait for command line to be entered
00F2  CD300A  		call	progoff		; turn off progress indicators
00F5  1104FF  		lxi	d,line
00F8  CDD709  		call	char		;get first character
00FB  C8      		rz			;ignore line if it is empty
00FC  211601  		lxi	h,comnds	;search table for command character
00FF  060B    		mvi	b,ncmnds	;(number of commands)
0101  BE      	cci0:	cmp	m		;search command table
0102  23      		inx	h
0103          		jrz	gotocmd		;command was found, execute it
0103  280A    		DB	28H,gotocmd-$-1
0105  23      		inx	h		;step past routine address
0106  23      		inx	h
0107          		djnz	cci0		;loop untill all valid commands are checked
0107  10F8    		DB	10H,cci0-$-1
0109  21DD00  	error:	lxi	h,errm		;if command unknown, beep and re-prompt
010C  C36509  		jmp	msgprt
		
010F          	gotocmd:
010F  D5      		push	d		;save command line buffer pointer
0110  5E      		mov	e,m		;get command routine address
0111  23      		inx	h
0112  56      		mov	d,m		;DE = routine address
0113  EB      		xchg			;HL = routine address
0114  D1      		pop	d		;restore buffer pointer
0115  E9      		pchl			;jump to command routine
		
		; All commands are started with DE=next char in line buffer
0116          	comnds:
0116  3F      		db	'?'
0117  1403    		dw	Qcomnd
0119  44      		db	'D'
011A  BC03    		dw	Dcomnd
011C  53      		db	'S'
011D  2204    		dw	Scomnd
011F  47      		db	'G'
0120  8A04    		dw	Gcomnd
0122  4D      		db	'M'
0123  1B03    		dw	Mcomnd
0125  46      		db	'F'
0126  7C03    		dw	Fcomnd
0128  49      		db	'I'
0129  C504    		dw	Icomnd
012B  4F      		db	'O'
012C  1705    		dw	Ocomnd
012E  4E      		db	'N'
012F  4C05    		dw	Ncomnd
0131  54      		db	'T'
0132  0906    		dw	Tcomnd
0134  56      		db	'V'
0135  3609    		dw	Vcomnd
000B          	ncmnds	equ	($-comnds)/3
		
		*********************************************************
		**  Command subroutines
		*********************************************************
		
0137          	menu:
0137  0D0A4420		db	CR,LF,'D <start> <end> - display memory in HEX'
      3C737461
      72743E20
      3C656E64
      3E202D20
      64697370
      6C617920
      6D656D6F
      72792069
      6E204845
      58
0160  0D0A5320		db	CR,LF,'S <start> - set/view memory'
      3C737461
      72743E20
      2D207365
      742F7669
      6577206D
      656D6F72
      79
017D  0D0A2020		db	CR,LF,'    (CR) = skip fwd, ''-'' = skip bkwd, ''.'' = done'
      20202843
      5229203D
      20736B69
      70206677
      642C2027
      2D27203D
      20736B69
      7020626B
      77642C20
      272E2720
      3D20646F
      6E65
01AF  0D0A4720		db	CR,LF,'G <start> - go to address'
      3C737461
      72743E20
      2D20676F
      20746F20
      61646472
      657373
01CA  0D0A4620		db	CR,LF,'F <start> <end> <data> - fill memory'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6174613E
      202D2066
      696C6C20
      6D656D6F
      7279
01F0  0D0A4D20		db	CR,LF,'M <start> <end> <dest> - Move data'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6573743E
      202D204D
      6F766520
      64617461
0214  0D0A4920		db	CR,LF,'I <port> [num] - Input from port'
      3C706F72
      743E205B
      6E756D5D
      202D2049
      6E707574
      2066726F
      6D20706F
      7274
0236  0D0A4F20		db	CR,LF,'O <port> <value> [...] - Output to port'
      3C706F72
      743E203C
      76616C75
      653E205B
      2E2E2E5D
      202D204F
      75747075
      7420746F
      20706F72
      74
025F  0D0A4E20		db	CR,LF,'N <hw> - iNitialize hardware (KB83'
      3C68773E
      202D2069
      4E697469
      616C697A
      65206861
      72647761
      72652028
      4B423833
FFFF          	 if not rom2k
0283  2C204B42		db		', KB84, CRTC, HDD'
      38342C20
      43525443
      2C204844
      44
		 endif
0294  29      		db		')'
0295  0D0A5420		db	CR,LF,'T <hw> - Test hardware'
      3C68773E
      202D2054
      65737420
      68617264
      77617265
02AD  0D0A2020		db	CR,LF,'  (KBD'
      284B4244
FFFF          	 if not rom2k
02B5  2C204352		db		', CRTC, VRT, CRTR, CRTF, HDD, HDRD'
      54432C20
      5652542C
      20435254
      522C2043
      5254462C
      20484444
      2C204844
      5244
		 endif
02D7  2C204644		db		', FDRD, FLPY)'
      52442C20
      464C5059
      29
02E4  0D0A5620		db	CR,LF,'V - Show ROM version'
      2D205368
      6F772052
      4F4D2076
      65727369
      6F6E
02FA  0D0A5E43		db	CR,LF,'^C aborts command entry'
      2061626F
      72747320
      636F6D6D
      616E6420
      656E7472
      79
0313  00      		db	TRM
		
0314          	Qcomnd:
0314  213701  		lxi	h,menu
0317  CD6509  		call	msgprt
031A  C9      		ret
		
031B  CDE309  	Mcomnd:	call	getaddr
031E  DA0901  		jc	error
0321          		bit	7,b
0321  CB78    		DB	0CBH,7*8+b+40H
0323  C20901  		jnz	error
0326  2200FF  		shld	addr0
0329  CDE309  		call	getaddr
032C  DA0901  		jc	error
032F          		bit	7,b
032F  CB78    		DB	0CBH,7*8+b+40H
0331  C20901  		jnz	error
0334  2202FF  		shld	addr1
0337  CDE309  		call	getaddr
033A  DA0901  		jc	error
033D          		bit	7,b
033D  CB78    		DB	0CBH,7*8+b+40H
033F  C20901  		jnz	error
0342  EB      		xchg
0343          		lbcd	addr0
0343  ED4B    		DB	0EDH,4BH
0345  00FF    		DW	addr0
0347  2A02FF  		lhld	addr1
034A  B7      		ora	a
034B          		dsbc	b
034B  ED42    		DB	0EDH,b*8+42H
034D  DA0901  		jc	error
0350  23      		inx	h
0351  4D      		mov	c,l
0352  44      		mov	b,h
0353  D5      		push	d
0354  EB      		xchg
0355  09      		dad	b
0356  D1      		pop	d
0357  DA0901  		jc	error
035A  2A02FF  		lhld	addr1
035D  CD7A09  		call	check
0360  DA7603  		jc	mc0
0363  2A00FF  		lhld	addr0
0366  CD7A09  		call	check
0369  D27603  		jnc	mc0
036C  2A02FF  		lhld	addr1
036F  EB      		xchg
0370  09      		dad	b
0371  2B      		dcx	h
0372  EB      		xchg
0373          		lddr
0373  EDB8    		DB	0EDH,0B8H
0375  C9      		ret
0376  2A00FF  	mc0:	lhld	addr0
0379          		ldir
0379  EDB0    		DB	0EDH,0B0H
037B  C9      		ret
037C          	Fcomnd:
037C  CDE309  		call	getaddr ;get address to start at
037F  DA0901  		jc	error	;error if non-hex character
0382          		bit	7,b	;test for no address (different from 0000)
0382  CB78    		DB	0CBH,7*8+b+40H
0384  C20901  		jnz	error	;error if no address was entered
0387  2200FF  		shld	addr0	;save starting address
038A  CDE309  		call	getaddr ;get stop address
038D  DA0901  		jc	error	;error if non-hex character
0390          		bit	7,b	;test for no entry
0390  CB78    		DB	0CBH,7*8+b+40H
0392  C20901  		jnz	error	;error if no stop address
0395  2202FF  		shld	addr1	;save stop address
0398  CDE309  		call	getaddr ;get fill data
039B  DA0901  		jc	error	;error if non-hex character
039E          		bit	7,b	;test for no entry
039E  CB78    		DB	0CBH,7*8+b+40H
03A0  C20901  		jnz	error	;error if no fill data
03A3  7C      		mov	a,h
03A4  B7      		ora	a
03A5  C20901  		jnz	error
03A8  4D      		mov	c,l	;(C)=fill data
03A9  2A02FF  		lhld	addr1	;get stop address
03AC          		lded	addr0	;get start address
03AC  ED5B    		DB	0EDH,5BH
03AE  00FF    		DW	addr0
03B0  79      	fc0:	mov	a,c	;
03B1  12      		stax	d	;put byte in memory
03B2  13      		inx	d	;step to next byte
03B3  7A      		mov	a,d	;
03B4  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
03B5  C8      		rz		;
03B6  CD7A09  		call	check	;test for past stop address
03B9  D8      		rc	;quit if past stop address
03BA          		jr	fc0
03BA  18F4    		DB	18H,fc0-$-1
		
03BC          	Dcomnd:		;display memory
03BC  CDE309  		call	getaddr ;get address to start at
03BF  DA0901  		jc	error	;error if non-hex character
03C2          		bit	7,b	;test for no address (different from 0000)
03C2  CB78    		DB	0CBH,7*8+b+40H
03C4  C20901  		jnz	error	;error if no address was entered
03C7  2200FF  		shld	addr0	;save starting address
03CA  CDE309  		call	getaddr ;get stop address
03CD  DA0901  		jc	error	;error if non-hex character
03D0          		bit	7,b	;test for no entry
03D0  CB78    		DB	0CBH,7*8+b+40H
03D2  C20901  		jnz	error	;error if no stop address
03D5          		lded	addr0	;get start address into (DE)
03D5  ED5B    		DB	0EDH,5BH
03D7  00FF    		DW	addr0
03D9  CD5B09  	dis0:	call	crlf	;start on new line
03DC  CD3C09  		call	taddr	;print current address
03DF  CD5609  		call	space	;delimit it from data
03E2  0610    		mvi	b,16	;display 16 bytes on each line
03E4  1A      	dis1:	ldax	d	;get byte to display
03E5  13      		inx	d	;step to next byte
03E6  CD4109  		call	hexout	;display this byte in HEX
03E9  CD5609  		call	space	;delimit it from others
03EC  7A      		mov	a,d
03ED  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
03EE          		jrz	dis2
03EE  2807    		DB	28H,dis2-$-1
03F0  CD7A09  		call	check	;test for past stop address
03F3          		jrc	dis2	;quit if past stop address
03F3  3802    		DB	38H,dis2-$-1
03F5          		djnz	dis1	;else do next byte on this line
03F5  10ED    		DB	10H,dis1-$-1
03F7  CD5609  	dis2:	call	space	;delimit it from data
03FA  CD5609  		call	space
03FD          		lded	addr0
03FD  ED5B    		DB	0EDH,5BH
03FF  00FF    		DW	addr0
0401  0610    		mvi	b,16	;display 16 bytes on each line
0403  1A      	dis3:	ldax	d	;get byte to display
0404  13      		inx	d	;step to next byte
0405  0E2E    		mvi	c,'.'
0407  FE20    		cpi	' '
0409          		jrc	dis4
0409  3805    		DB	38H,dis4-$-1
040B  FE7F    		cpi	'~'+1
040D          		jrnc	dis4
040D  3001    		DB	30H,dis4-$-1
040F  4F      		mov	c,a
0410  CD8F00  	dis4:	call	conout
0413  7A      		mov	a,d
0414  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
0415  C8      		rz
0416  CD7A09  		call	check	;test for past stop address
0419  D8      		rc	;quit if past stop address
041A          		djnz	dis3	;else do next byte on this line
041A  10E7    		DB	10H,dis3-$-1
041C          		sded	addr0
041C  ED53    		DB	0EDH,53H
041E  00FF    		DW	addr0
0420          		jr	dis0	;when line is finished, start another
0420  18B7    		DB	18H,dis0-$-1
		
0422          	Scomnd: 		;substitute (set) memory
0422  CDE309  		call	getaddr ;get address to start substitution at
0425  DA0901  		jc	error	;error if non-hex character
0428          		bit	7,b	;test for no entry
0428  CB78    		DB	0CBH,7*8+b+40H
042A  C20901  		jnz	error	;error if no address
042D  EB      		xchg		;put address in (DE)
042E  CD5B09  	sb1:	call	crlf	;start on new line
0431  CD3C09  		call	taddr	;print address
0434  CD5609  		call	space	;and delimit it
0437  1A      		ldax	d	;get current value of byte
0438  CD4109  		call	hexout	;and display it
043B  CD5609  		call	space	;delimit it from user's (posible) entry
043E  0600    		mvi	b,0	;zero accumilator for user's entry
0440  CDB800  	sb2:	call	conine	;get user's first character
0443  FE0D    		cpi	CR	;if CR then skip to next byte
0445          		jrz	foward
0445  2833    		DB	28H,foward-$-1
0447  FE20    		cpi	' '	;or if Space then skip to next
0449          		jrz	foward
0449  282F    		DB	28H,foward-$-1
044B  FE2D    		cpi	'-'	;if Minus then step back to previous address
044D          		jrz	bakwrd
044D  282E    		DB	28H,bakwrd-$-1
044F  FE2E    		cpi	'.'	;if Period then stop substitution
0451  C8      		rz
0452  CD0A0A  		call	hexcon	;if none of the above, should be HEX digit
0455          		jrc	error0	;error if not
0455  3829    		DB	38H,error0-$-1
0457          		jr	sb3	;start accumilating HEX digits
0457  1805    		DB	18H,sb3-$-1
0459  CD0A0A  	sb0:	call	hexcon	;test for HEX digit
045C          		jrc	error1	;error if not HEX
045C  3827    		DB	38H,error1-$-1
045E          	sb3:	slar	b	;roll accumilator to receive new digit
045E  CB20    		DB	0CBH, 20H + b
0460          		slar	b
0460  CB20    		DB	0CBH, 20H + b
0462          		slar	b
0462  CB20    		DB	0CBH, 20H + b
0464          		slar	b
0464  CB20    		DB	0CBH, 20H + b
0466  B0      		ora	b	;merge in new digit
0467  47      		mov	b,a
0468  CDB800  	sb4:	call	conine	;get next character
046B  FE0D    		cpi	CR	;if CR then put existing byte into memory
046D          		jrz	putbyte ;  and step to next.
046D  2809    		DB	28H,putbyte-$-1
046F  FE2E    		cpi	'.'
0471  C8      		rz
0472  FE7F    		cpi	del	;if DEL then restart at same address
0474          		jrz	sb1
0474  28B8    		DB	28H,sb1-$-1
0476          		jr	sb0	;else continue entering hex digits
0476  18E1    		DB	18H,sb0-$-1
0478          	putbyte:
0478  78      		mov	a,b	;store accumilated byte in memory
0479  12      		stax	d
047A          	foward:
047A  13      		inx	d	;step to next location
047B          		jr	sb1	;and allow substitution there
047B  18B1    		DB	18H,sb1-$-1
		
047D          	bakwrd:
047D  1B      		dcx	d	;move address backward one location
047E          		jr	sb1
047E  18AE    		DB	18H,sb1-$-1
		
0480  CD8D00  	error0:	call	belout	;user's entry was not valid, beep and continue
0483          		jr	sb2
0483  18BB    		DB	18H,sb2-$-1
0485  CD8D00  	error1:	call	belout	;same as above but for different section of routine
0488          		jr	sb4
0488  18DE    		DB	18H,sb4-$-1
		
048A          	Gcomnd: 		;jump to address given by user
048A  CDE309  		call	getaddr ;get address to jump to
048D  DA0901  		jc	error	;error if non-hex character
0490          		bit	7,b	;test for no entry
0490  CB78    		DB	0CBH,7*8+b+40H
0492  C20901  		jnz	error	;error if no address entered
0495  CD5B09  		call	crlf	;on new line,
0498  0E47    		mvi	c,'G'	;display "GO aaaa?" to ask
049A  CD8F00  		call	conout	;user to verify that we should
049D  0E4F    		mvi	c,'O'	;jump to this address (in case user
049F  CD8F00  		call	conout	;made a mistake we should not blindly
04A2  CD5609  		call	space	;commit suicide)
04A5  EB      		xchg
04A6  CD3C09  		call	taddr
04A9  CD5609  		call	space
04AC  0E3F    		mvi	c,'?'
04AE  CD8F00  		call	conout
04B1  CDB800  		call	conine	;wait for user to type "Y" to
04B4  FE59    		cpi	'Y'	;indicate that we should jump.
04B6  C0      		rnz		;abort if response was not "Y"
04B7  CD5B09  		call	crlf	; visual feedback
04BA  EB      		xchg
04BB  E9      		pchl		;else jump to address
		
04BC  0D0A496E	inpms:	db	CR,LF,'Input ',TRM
      70757420
      00
04C5          	Icomnd:
04C5  CDE309  		call	getaddr ;get port address, ignore extra MSDs
04C8  DA0901  		jc	error	;error if non-hex character
04CB          		bit	7,b	;test for no entry
04CB  CB78    		DB	0CBH,7*8+b+40H
04CD  C20901  		jnz	error	;error if no address entered
04D0  E5      		push	h	; save port
04D1  CDE309  		call	getaddr	; hex number of inputs to do
04D4  DA0901  		jc	error
04D7          		bit	7,b
04D7  CB78    		DB	0CBH,7*8+b+40H
04D9          		jrz	ic0
04D9  2803    		DB	28H,ic0-$-1
04DB  210100  		lxi	h,1
04DE          	ic0:
04DE  E3      		xthl		; save count
04DF  E5      		push	h	; re-save port
04E0  21BC04  		lxi	h,inpms
04E3  CD6509  		call	msgprt
04E6  E1      		pop	h
04E7  E5      		push	h
04E8  7D      		mov	a,l
04E9  CD4109  		call	hexout
04EC  CD5609  		call	space
04EF  0E3D    		mvi	c,'='
04F1  CD8F00  		call	conout
			; "Input XX ="
04F4  C1      		pop	b	; port to BC
04F5  E1      		pop	h	; count to HL (L)
04F6  260D    		mvi	h,16-3
04F8  0600    		mvi	b,0	; safety
04FA  C5      		push	b	; C gets trashed by conout
04FB          	ic1:
04FB  CD5609  		call	space
04FE  C1      		pop	b
04FF  C5      		push	b
0500          		inp	a
0500  ED78    		DB	0EDH,a*8+40H
0502  CD4109  		call	hexout
0505  2D      		dcr	l	; assume <= 256
0506          		jrz	ic2
0506  280A    		DB	28H,ic2-$-1
0508  25      		dcr	h	; col count
0509          		jrnz	ic1
0509  20F0    		DB	20H,ic1-$-1
050B  CD5B09  		call	crlf
050E  2610    		mvi	h,16
0510          		jr	ic1
0510  18E9    		DB	18H,ic1-$-1
0512          	ic2:
0512  C1      		pop	b	; fix stack
0513  CD5B09  		call	crlf
0516  C9      		ret
		
		; TODO: no feedback?
0517          	Ocomnd:
0517  CDE309  		call	getaddr ;get port address, ignore extra MSDs
051A  DA0901  		jc	error	;error if non-hex character
051D          		bit	7,b	;test for no entry
051D  CB78    		DB	0CBH,7*8+b+40H
051F  C20901  		jnz	error	;error if no address entered
0522  2600    		mvi	h,0	; safety
0524  E5      		push	h	; save port
0525  CDE309  		call	getaddr ;get value, ignore extra MSDs
0528  DA0901  		jc	error	;error if non-hex character
052B          		bit	7,b	;test for no entry
052B  CB78    		DB	0CBH,7*8+b+40H
052D  C20901  		jnz	error	;error if no value entered
0530  CD5B09  		call	crlf
0533          	oc0:		; L has byte to output...
0533  C1      		pop	b	; port
0534  C5      		push	b
0535          		outp	l
0535  ED69    		DB	0EDH,l*8+41H
0537  CDE309  		call	getaddr ;get value, ignore extra MSDs
053A  DA0901  		jc	error	;error if non-hex character
					;NOTE: some output has been sent
053D          		bit	7,b	;test for no entry
053D  CB78    		DB	0CBH,7*8+b+40H
053F          		jrz	oc0	;still more to send
053F  28F2    		DB	28H,oc0-$-1
0541  E1      		pop	h	; discard port
0542  C9      		ret
		
0543  CDD709  	skb:	call	char
0546  C8      		rz		;end of buffer/line before a character was found (ZR)
0547  FE20    		cpi	' '	;skip all leading spaces
0549  C0      		rnz		;if not space, then done (NZ)
054A          		jr	skb	;else if space, loop untill not space
054A  18F7    		DB	18H,skb-$-1
		
054C          	Ncomnd:
054C  CD4305  		call	skb	; skip blanks
054F  CA0901  		jz	error	; required param
			; this may need refinement
0552  1B      		dcx	d
0553  217605  		lxi	h,kb83
0556  CDF505  		call	strcmp
0559          		jrz	nkb83
0559  284F    		DB	28H,nkb83-$-1
FFFF          	 if not rom2k
055B  217B05  		lxi	h,kb84
055E  CDF505  		call	strcmp
0561          		jrz	nkb84
0561  284B    		DB	28H,nkb84-$-1
0563  218005  		lxi	h,crtc
0566  CDF505  		call	strcmp
0569          		jrz	ncrtc
0569  284D    		DB	28H,ncrtc-$-1
056B  219305  		lxi	h,hdd
056E  CDF505  		call	strcmp
0571          		jrz	nhdd
0571  286B    		DB	28H,nhdd-$-1
		 endif
0573  C30901  		jmp	error
		
0576  4B423833	kb83:	db	'KB83',TRM
      00
FFFF          	 if not rom2k
057B  4B423834	kb84:	db	'KB84',TRM
      00
0580  43525443	crtc:	db	'CRTC',TRM
      00
0585  43525452	crtr:	db	'CRTR',TRM
      00
058A  43525446	crtf:	db	'CRTF',TRM
      00
058F  56525400	vrt:	db	'VRT',TRM
0593  48444400	hdd:	db	'HDD',TRM
0597  48445244	hdrd:	db	'HDRD',TRM
      00
		 endif
059C  46445244	fdrd:	db	'FDRD',TRM
      00
05A1  464C5059	flpy:	db	'FLPY',TRM
      00
05A6  4B424400	kbd:	db	'KBD',TRM
		
05AA  3E05    	nkb83:	mvi	a,B300
05AC  D30C    		out	kbdbrr	; */83 baud gen for SIO1 ch B
05AE  216700  	nkb84:	lxi	h,sioini
05B1  0E07    		mvi	c,kbdctl
05B3  0609    		mvi	b,siolen
05B5          		outir
05B5  EDB3    		DB	0EDH,0B3H
05B7  C9      		ret
		
FFFF          	 if not rom2k
05B8  21CE05  	ncrtc:	lxi	h,crtini
05BB  0E1D    		mvi	c,crtdat	; */84 CRTC 6545 data port
05BD  0610    		mvi	b,16
05BF  AF      		xra	a	; start with reg 00
05C0  0D      	nc0:	dcr	c
05C1          		outp	a	; select reg
05C1  ED79    		DB	0EDH,a*8+41H
05C3  3C      		inr	a	; ++reg
05C4  0C      		inr	c	;
05C5          		outi
05C5  EDA3    		DB	0EDH,0A3H
05C7          		jrnz	nc0
05C7  20F7    		DB	20H,nc0-$-1
05C9  3E1F    		mvi	a,31	; R31 enables CRTC
05CB  D31C    		out	crtctl
05CD  C9      		ret
		
05CE  6A505699	crtini:	db	6ah,50h,56h,99h,19h,0ah,19h,19h,78h,0fh,60h,0fh,00h,00h,00h,00h
      190A1919
      780F600F
      00000000
		
05DE  DB14    	nhdd:	in	sysp84
05E0          		setb	1,a
05E0  CBCF    		DB	0CBH,1*8+a+0C0H
05E2  D314    		out	sysp84	; MR on (if not already)
			; need 50mS... 200000 cycles or 7693 loops
05E4  211027  		lxi	h,10000
05E7  2B      	nh0:	dcx	h	;  6
05E8  7C      		mov	a,h	;  4
05E9  B7      		ora	a	;  4
05EA          		jrnz	nh0	; 12 = 26 cycles
05EA  20FB    		DB	20H,nh0-$-1
05EC  DB14    		in	sysp84
05EE          		res	1,a
05EE  CB8F    		DB	0CBH,1*8+a+80H
05F0  D314    		out	sysp84	; MR off
05F2  C32208  		jmp	thdd1
		 endif
		
		; if match, return DE after last match.
		; if no match, return original DE.
05F5  D5      	strcmp:	push	d
05F6  AF      		xra	a
05F7  BE      	sc0:	cmp	m	; TRM?
05F8          		jrz	sc9	; A = 0
05F8  2808    		DB	28H,sc9-$-1
05FA  1A      		ldax	d
05FB  96      		sub	m
05FC          		jrnz	sc8	; A is NZ
05FC  2008    		DB	20H,sc8-$-1
05FE  23      		inx	h
05FF  13      		inx	d
0600          		jr	sc0
0600  18F5    		DB	18H,sc0-$-1
0602  33      	sc9:	inx	sp	; non-destructive POP
0603  33      		inx	sp
0604  AF      		xra	a	; A=0 and ZR
0605  C9      		ret
0606  D1      	sc8:	pop	d	; restore orig location
0607  B7      		ora	a
0608  C9      		ret
		
0609          	Tcomnd:
0609  CD4305  		call	skb	; skip blanks
060C  CA0901  		jz	error	; required param
			; this may need refinement
060F  1B      		dcx	d
0610  21A605  		lxi	h,kbd
0613  CDF505  		call	strcmp
0616  CAA606  		jz	tkbd
FFFF          	 if not rom2k
0619  218005  		lxi	h,crtc
061C  CDF505  		call	strcmp
061F          		jrz	tcrtc
061F  2842    		DB	28H,tcrtc-$-1
0621  218F05  		lxi	h,vrt
0624  CDF505  		call	strcmp
0627  CAE306  		jz	tvrt
062A  218505  		lxi	h,crtr
062D  CDF505  		call	strcmp
0630  CA2507  		jz	tcrtr
0633  218A05  		lxi	h,crtf
0636  CDF505  		call	strcmp
0639  CA6D07  		jz	tcrtf
063C  219305  		lxi	h,hdd
063F  CDF505  		call	strcmp
0642  CAE707  		jz	thdd
0645  219705  		lxi	h,hdrd
0648  CDF505  		call	strcmp
064B  CA5E08  		jz	thdrd
		 endif
064E  219C05  		lxi	h,fdrd
0651  CDF505  		call	strcmp
0654  CA7508  		jz	tfdrd
0657  21A105  		lxi	h,flpy
065A  CDF505  		call	strcmp
065D  CAAE08  		jz	tflpy
0660  C30901  		jmp	error
		
FFFF          	 if not rom2k
0663  21CB06  	tcrtc:	lxi	h,waitm
0666  CD6509  		call	msgprt
0669  0605    		mvi	b,5	; count
066B  1E80    		mvi	e,80h	; compare
066D  3E1F    	tc5:	mvi	a,31
066F  D31C    		out	crtctl	; select reg
0671  DB1C    	tc0:	in	crtctl
0673  E680    		ani	80h
0675  BB      		cmp	e
0676          		jrz	tc9
0676  2817    		DB	28H,tc9-$-1
0678  DB06    		in	conctl
067A  E601    		ani	00000001b
067C          		jrnz	tc6
067C  2008    		DB	20H,tc6-$-1
067E  7B      		mov	a,e
067F  B7      		ora	a
0680          		jrnz	tc0
0680  20EF    		DB	20H,tc0-$-1
0682  DB1F    		in	crtram	; clear Update
0684          		jr	tc5
0684  18E7    		DB	18H,tc5-$-1
0686  DB04    	tc6:	in	condat
0688  21D606  		lxi	h,abrtm
068B  CD6509  		call	msgprt
068E  C9      		ret
068F  7B      	tc9:	mov	a,e
0690  EE80    		xri	80h
0692  5F      		mov	e,a
0693          		jrnz	tc8
0693  200B    		DB	20H,tc8-$-1
0695  21DC06  		lxi	h,updtm
0698  CD6509  		call	msgprt
069B  DB1F    		in	crtram	; clear Update
069D          		djnz	tc5
069D  10CE    		DB	10H,tc5-$-1
069F  C9      		ret
06A0  CD5609  	tc8:	call	space
06A3          		djnz	tc0
06A3  10CC    		DB	10H,tc0-$-1
06A5  C9      		ret
		 endif
		
06A6  21CB06  	tkbd:	lxi	h,waitm
06A9  CD6509  		call	msgprt
06AC  DB07    	tk0:	in	kbdctl
06AE  E601    		ani	00000001b
06B0          		jrnz	tk1
06B0  200F    		DB	20H,tk1-$-1
06B2  DB06    		in	conctl
06B4  E601    		ani	00000001b
06B6          		jrz	tk0
06B6  28F4    		DB	28H,tk0-$-1
06B8  DB04    		in	condat
06BA  21D606  		lxi	h,abrtm
06BD  CD6509  		call	msgprt
06C0  C9      		ret
06C1  DB05    	tk1:	in	kbddat
06C3  CD4109  		call	hexout
06C6  CD5609  		call	space
06C9          		jr	tk0
06C9  18E1    		DB	18H,tk0-$-1
		
06CB  0D0A5761	waitm:	db	CR,LF,'Wait... ',TRM
      69742E2E
      2E2000
06D6  41626F72	abrtm:	db	'Abort',TRM
      7400
FFFF          	 if not rom2k
06DC  55706461	updtm:	db	'Update',TRM
      746500
		
06E3  3E0A    	tvrt:	mvi	a,10	; we don't need many samples
06E5  3202FF  		sta	addr1
06E8  CD5B09  		call	crlf
06EB  DB1C    		in	crtctl
06ED  4F      		mov	c,a
			; TODO: reset Update bit? optionally?
06EE  210000  		lxi	h,0
06F1  110080  		lxi	d,8000h
06F4  DB1C    	tv0:	in	crtctl	; 11
06F6  B9      		cmp	c	;  4
06F7          		jrnz	tv4	;  7
06F7  2008    		DB	20H,tv4-$-1
06F9  23      	tv5:	inx	h	;  6
06FA  7C      		mov	a,h	;  4
06FB  B5      		ora	l	;  4
06FC          		jrnz	tv0	; 12 = 48 = 12uS
06FC  20F6    		DB	20H,tv0-$-1
06FE  C31B09  		jmp	tf6	; final sample and display results
0701  EB      	tv4:	xchg
0702  77      		mov	m,a
0703  23      		inx	h
0704  73      		mov	m,e
0705  23      		inx	h
0706  72      		mov	m,d
0707  23      		inx	h
0708  EB      		xchg
0709  4F      		mov	c,a
070A  3A02FF  		lda	addr1
070D  3D      		dcr	a
070E  3202FF  		sta	addr1
0711  CAF908  		jz	tf1
0714          		jr	tv5
0714  18E3    		DB	18H,tv5-$-1
		
0716  50617373	pass:	db	'Passed',TRM
      656400
071D  4661696C	fail:	db	'Failed ',TRM
      65642000
		
0725          	tcrtr:	; test read/write of CRTC cursor register pair
0725  CD5B09  		call	crlf
0728  210000  		lxi	h,0
072B  0E1D    		mvi	c,crtdat
072D  3E0E    	tr0:	mvi	a,14	; R14 = cursor hi
072F  D31C    		out	crtctl
0731          		outp	h
0731  ED61    		DB	0EDH,h*8+41H
0733  3C      		inr	a
0734  D31C    		out	crtctl
0736          		outp	l
0736  ED69    		DB	0EDH,l*8+41H
0738  3D      		dcr	a
0739  D31C    		out	crtctl
073B          		inp	d
073B  ED50    		DB	0EDH,d*8+40H
073D  3C      		inr	a
073E  D31C    		out	crtctl
0740          		inp	e
0740  ED58    		DB	0EDH,e*8+40H
			; now compare HL:DE
0742  7D      		mov	a,l
0743  BB      		cmp	e
0744          		jrnz	tr9
0744  2013    		DB	20H,tr9-$-1
0746  7C      		mov	a,h
0747  BA      		cmp	d
0748          		jrnz	tr9
0748  200F    		DB	20H,tr9-$-1
074A  23      		inx	h
074B  7C      		mov	a,h
074C  E63F    		ani	3fh
074E  67      		mov	h,a
074F  B5      		ora	l
0750          		jrnz	tr0
0750  20DB    		DB	20H,tr0-$-1
0752  211607  		lxi	h,pass
0755  CD6509  		call	msgprt
0758  C9      		ret
0759  D5      	tr9:	push	d
075A  E5      		push	h
075B  211D07  		lxi	h,fail
075E  CD6509  		call	msgprt
0761  D1      		pop	d
0762  CD3C09  		call	taddr
0765  CD5609  		call	space
0768  D1      		pop	d
0769  CD3C09  		call	taddr
076C  C9      		ret
		
		; Fill video RAM will value
076D          	tcrtf:
076D  3E20    		mvi	a,' '
076F  3200FF  		sta	addr0	; default to blanks
0772  AF      		xra	a
0773  3202FF  		sta	addr1	; default to no attributes
0776  CDE309  		call	getaddr ;get optional fill byte
0779  DA0901  		jc	error	;error if non-hex character
077C          		bit	7,b	;test for no entry
077C  CB78    		DB	0CBH,7*8+b+40H
077E          		jrnz	tcfX
077E  2012    		DB	20H,tcfX-$-1
0780  7D      		mov	a,l
0781  3200FF  		sta	addr0
0784  CDE309  		call	getaddr ;get optional attr byte
0787  DA0901  		jc	error	;error if non-hex character
078A          		bit	7,b	;test for no entry
078A  CB78    		DB	0CBH,7*8+b+40H
078C          		jrnz	tcfX
078C  2004    		DB	20H,tcfX-$-1
078E  7D      		mov	a,l
078F  3202FF  		sta	addr1
0792          	tcfX:
0792  0612    		mvi	b,18	; hi byte of addr reg
0794  0E13    		mvi	c,19	; lo byte of addr reg
0796  21D007  		lxi	h,80*25
0799  110000  		lxi	d,0
079C  3E1F    		mvi	a,1fh
079E  D31C    		out	crtctl	; clear update bit
07A0  DB1C    	tcf0:	in	crtctl
07A2  07      		rlc
07A3          		jrnc	tcf0
07A3  30FB    		DB	30H,tcf0-$-1
07A5  78      		mov	a,b
07A6  D31C    		out	crtctl
07A8  7A      		mov	a,d
07A9  D31D    		out	crtdat
07AB  79      		mov	a,c
07AC  D31C    		out	crtctl
07AE  7B      		mov	a,e
07AF  D31D    		out	crtdat
07B1  3E1F    		mvi	a,1fh
07B3  D31C    		out	crtctl	; clear update bit
07B5  DB1C    	tcf1:	in	crtctl
07B7  07      		rlc
07B8          		jrnc	tcf1
07B8  30FB    		DB	30H,tcf1-$-1
07BA  3A00FF  		lda	addr0
07BD  D31F    		out	crtram
07BF  13      		inx	d
07C0  DB1C    	tcf2:	in	crtctl
07C2  07      		rlc
07C3          		jrnc	tcf2
07C3  30FB    		DB	30H,tcf2-$-1
07C5  78      		mov	a,b
07C6  D31C    		out	crtctl
07C8  7A      		mov	a,d
07C9  F608    		ori	08h	; attr RAM
07CB  D31D    		out	crtdat
07CD  79      		mov	a,c
07CE  D31C    		out	crtctl
07D0  7B      		mov	a,e
07D1  D31D    		out	crtdat
07D3  3E1F    		mvi	a,1fh
07D5  D31C    		out	crtctl	; clear update bit
07D7  DB1C    	tcf3:	in	crtctl
07D9  07      		rlc
07DA          		jrnc	tcf3
07DA  30FB    		DB	30H,tcf3-$-1
07DC  3A02FF  		lda	addr1
07DF  D31F    		out	crtram
07E1  2B      		dcx	h
07E2  7C      		mov	a,h
07E3  B5      		ora	l
07E4          		jrnz	tcf0
07E4  20BA    		DB	20H,tcf0-$-1
07E6  C9      		ret
		
		; user must have set other registers as needed
07E7          	thdd:	; issue command, wait...
07E7  3E90    		mvi	a,90h
07E9  3200FF  		sta	addr0	; default: self test
07EC  AF      		xra	a
07ED  3202FF  		sta	addr1	; default: 256 samples
07F0  CDE309  		call	getaddr ;get optional command
07F3  DA0901  		jc	error	;error if non-hex character
07F6          		bit	7,b	;test for no entry
07F6  CB78    		DB	0CBH,7*8+b+40H
07F8          		jrnz	thY
07F8  201B    		DB	20H,thY-$-1
07FA  7C      		mov	a,h
07FB  B7      		ora	a
07FC  C20901  		jnz	error
07FF  2200FF  		shld	addr0	;save command
0802  CDE309  		call	getaddr ;get sample count
0805  DA0901  		jc	error	;error if non-hex character
0808          		bit	7,b	;test for no entry
0808  CB78    		DB	0CBH,7*8+b+40H
080A  C21508  		jnz	thY
080D  7C      		mov	a,h
080E  B7      		ora	a
080F  C20901  		jnz	error
0812  2202FF  		shld	addr1	;save count
0815  CD5B09  	thY:	call	crlf
0818  DB87    		in	hddcmd
081A  4F      		mov	c,a
081B  3A00FF  		lda	addr0
081E  D387    		out	hddcmd
0820          		jr	thX
0820  1807    		DB	18H,thX-$-1
0822          	thdd1:	; RESET already issued
0822  CD5B09  		call	crlf
0825  DB87    		in	hddcmd
0827  0E00    		mvi	c,0
0829  210000  	thX:	lxi	h,0
082C  110080  		lxi	d,8000h
082F  DB87    	th0:	in	hddcmd
0831  B9      		cmp	c
0832          		jrnz	th4
0832  2016    		DB	20H,th4-$-1
0834  23      	th5:	inx	h
0835  7C      		mov	a,h
0836  B5      		ora	l
0837          		jrnz	th0
0837  20F6    		DB	20H,th0-$-1
0839          		jr	th6	; final sample and display results
0839  1808    		DB	18H,th6-$-1
083B  CDF908  	th1:	call	tf1	; dump results from 8000h..DE
083E  DB81    		in	hdderr	; also print final error status
0840  C34109  		jmp	hexout
		; force final sample
0843  2B      	th6:	dcx	h	; show as FFFF
0844  3E01    		mvi	a,1
0846  3202FF  		sta	addr1	; last sample
0849  79      		mov	a,c	; last register value
084A  EB      	th4:	xchg
084B  77      		mov	m,a
084C  23      		inx	h
084D  73      		mov	m,e
084E  23      		inx	h
084F  72      		mov	m,d
0850  23      		inx	h
0851  EB      		xchg
0852  4F      		mov	c,a
0853  3A02FF  		lda	addr1
0856  3D      		dcr	a
0857  3202FF  		sta	addr1
085A          		jrz	th1
085A  28DF    		DB	28H,th1-$-1
085C          		jr	th5
085C  18D6    		DB	18H,th5-$-1
		
		; user setup registers and issue READ command
085E  CD5B09  	thdrd:	call	crlf
0861  210080  		lxi	h,8000h
0864  018000  		lxi	b,hdddat	; B=0 (256)
0867  DB87    		in	hddcmd
0869  E608    		ani	00001000b	; DRQ
086B          		jrz	thr9
086B  2804    		DB	28H,thr9-$-1
086D          		inir
086D  EDB2    		DB	0EDH,0B2H
086F          		inir
086F  EDB2    		DB	0EDH,0B2H
0871  EB      	thr9:	xchg
0872  C33C09  		jmp	taddr
		 endif
		
		; read a sector from the floppy.
		; user must turn on motors, select drive,
		; set side, set DDEN, and step to track.
		; data stored in 8000h
0875  AF      	tfdrd:	xra	a
0876  3200FF  		sta	addr0
0879  CDE309  		call	getaddr ;get optional sector
087C  DA0901  		jc	error	;error if non-hex character
087F          		bit	7,b	;test for no entry
087F  CB78    		DB	0CBH,7*8+b+40H
0881          		jrnz	tfrX
0881  2008    		DB	20H,tfrX-$-1
0883  7C      		mov	a,h
0884  B7      		ora	a
0885  C20901  		jnz	error
0888  2200FF  		shld	addr0	; allow some rediculous values
088B          	tfrX:			; (also, side 1 uses: 0A..13)
088B  CD5B09  		call	crlf
088E  3A00FF  		lda	addr0
0891  D312    		out	fpysec
0893  210080  		lxi	h,8000h
0896  011300  		lxi	b,fpydat	; B=0
0899  3E88    		mvi	a,88h	; read sector, side compare(?)
089B  D310    		out	fpycmd
089D  76      	tfr0:	hlt
089E          		ini
089E  EDA2    		DB	0EDH,0A2H
08A0          		jrnz	tfr0
08A0  20FB    		DB	20H,tfr0-$-1
08A2  76      	tfr1:	hlt
08A3          		ini
08A3  EDA2    		DB	0EDH,0A2H
08A5          		jrnz	tfr1
08A5  20FB    		DB	20H,tfr1-$-1
08A7  76      		hlt	; wait for done
08A8  DB10    		in	fpysts
08AA  CD4109  		call	hexout
08AD  C9      		ret
		
08AE          	tflpy:	; user must motor on and select drive (and side)
08AE  3ED0    		mvi	a,0d0h
08B0  3200FF  		sta	addr0	; default: force intr
08B3  AF      		xra	a
08B4  3202FF  		sta	addr1	; default: 256 samples
08B7  CDE309  		call	getaddr ;get optional command
08BA  DA0901  		jc	error	;error if non-hex character
08BD          		bit	7,b	;test for no entry
08BD  CB78    		DB	0CBH,7*8+b+40H
08BF          		jrnz	tfX
08BF  201B    		DB	20H,tfX-$-1
08C1  7C      		mov	a,h
08C2  B7      		ora	a
08C3  C20901  		jnz	error
08C6  2200FF  		shld	addr0	;save command
08C9  CDE309  		call	getaddr ;get sample count
08CC  DA0901  		jc	error	;error if non-hex character
08CF          		bit	7,b	;test for no entry
08CF  CB78    		DB	0CBH,7*8+b+40H
08D1  C2DC08  		jnz	tfX
08D4  7C      		mov	a,h
08D5  B7      		ora	a
08D6  C20901  		jnz	error
08D9  2202FF  		shld	addr1	;save count
08DC          	tfX:
08DC  CD5B09  		call	crlf
08DF  DB10    		in	fpysts
08E1  4F      		mov	c,a
08E2  3A00FF  		lda	addr0	; FDC command
08E5  D310    		out	fpycmd
08E7  210000  		lxi	h,0
08EA  110080  		lxi	d,8000h
		
08ED  DB10    	tf0:	in	fpysts	; 11
08EF  B9      		cmp	c	;  4
08F0          		jrnz	tf4	;  7
08F0  2030    		DB	20H,tf4-$-1
08F2  23      	tf5:	inx	h	;  6
08F3  7C      		mov	a,h	;  4
08F4  B5      		ora	l	;  4
08F5          		jrnz	tf0	; 12 = 48 = 12uS
08F5  20F6    		DB	20H,tf0-$-1
			; force final entry...
08F7          		jr	tf6
08F7  1822    		DB	18H,tf6-$-1
		
			; dump 8000h..DE and return
08F9  210080  	tf1:	lxi	h,8000h
08FC          	tf2:
08FC  7C      		mov	a,h
08FD  BA      		cmp	d
08FE          		jrnz	tf3
08FE  2003    		DB	20H,tf3-$-1
0900  7D      		mov	a,l
0901  BB      		cmp	e
0902  C8      		rz	; user must motor off...
0903          	tf3:
0903  7E      		mov	a,m
0904  23      		inx	h
0905  CD4109  		call	hexout
0908  CD5609  		call	space
090B  46      		mov	b,m
090C  23      		inx	h
090D  7E      		mov	a,m
090E  23      		inx	h
090F  CD4109  		call	hexout
0912  78      		mov	a,b
0913  CD4109  		call	hexout
0916  CD5B09  		call	crlf
0919          		jr	tf2
0919  18E1    		DB	18H,tf2-$-1
		
		; force last sample. works for all tests - can't escape to tf5
091B  2B      	tf6:	dcx	h	; show as FFFF
091C  3E01    		mvi	a,1
091E  3202FF  		sta	addr1	; last sample
0921  79      		mov	a,c	; last register value
		; save sample, check for done.
0922  EB      	tf4:	xchg
0923  77      		mov	m,a
0924  23      		inx	h
0925  73      		mov	m,e
0926  23      		inx	h
0927  72      		mov	m,d
0928  23      		inx	h
0929  EB      		xchg
092A  4F      		mov	c,a
092B  3A02FF  		lda	addr1
092E  3D      		dcr	a
092F  3202FF  		sta	addr1
0932          		jrz	tf1
0932  28C5    		DB	28H,tf1-$-1
0934          		jr	tf5
0934  18BC    		DB	18H,tf5-$-1
		
0936          	Vcomnd:
0936  21C500  		lxi	h,signon
0939  C36509  		jmp	msgprt
		
		*********************************************************
		**  Utility subroutines
		*********************************************************
		
093C  7A      	taddr:	mov	a,d	;display (DE) at console in HEX
093D  CD4109  		call	hexout	;print HI byte in HEX
0940  7B      		mov	a,e	;now do LO byte
0941  F5      	hexout:	push	psw	;output (A) to console in HEX
0942  07      		rlc		;get HI digit in usable (LO) position
0943  07      		rlc
0944  07      		rlc
0945  07      		rlc
0946  CD4A09  		call	nible	;and display it
0949  F1      		pop	psw	;get LO digit back and display it
094A  E60F    	nible:	ani	00001111b	;display LO 4 bits of (A) in HEX
094C  C690    		adi	90h	;algorithm to convert 4-bits to ASCII
094E  27      		daa
094F  CE40    		aci	40h
0951  27      		daa
0952  4F      		mov	c,a	;display ASCII digit
0953  C38F00  		jmp	conout
		
0956  0E20    	space:	mvi	c,' '	;send an ASCII blank to console
0958  C38F00  		jmp	conout
		
095B  0E0D    	crlf:	mvi	c,CR	;send Carriage-Return/Line-Feed to console
095D  CD8F00  		call	conout
0960  0E0A    		mvi	c,LF
0962  C38F00  		jmp	conout
		
0965  7E      	msgprt:	mov	a,m	;send string to console, terminated by 00
0966  B7      		ora	a
0967  C8      		rz
0968  4F      		mov	c,a
0969  CD8F00  		call	conout
096C  23      		inx	h
096D          		jr	msgprt
096D  18F6    		DB	18H,msgprt-$-1
		
096F  7E      	print:	mov	a,m	; BDOS func 9 style msgprt
0970  FE24    		cpi	'$'
0972  C8      		rz
0973  4F      		mov	c,a
0974  CD8F00  		call	conout
0977  23      		inx	h
0978          		jr	print
0978  18F5    		DB	18H,print-$-1
		
097A  E5      	check:	push	h	;non-destuctive compare HL:DE
097B  B7      		ora	a
097C          		dsbc	d
097C  ED52    		DB	0EDH,d*8+42H
097E  E1      		pop	h
097F  C9      		ret
		
		; Convert letters to upper-case
0980          	toupper:
0980  FE61    		cpi	'a'
0982  D8      		rc
0983  FE7B    		cpi	'z'+1
0985  D0      		rnc
0986  E65F    		ani	01011111b
0988  C9      		ret
		
		; Read a line of text into 'line'
		; End with CR, honor BS
		; Reject all non-printing characters, force toupper
0989  2104FF  	linein:	lxi	h,line	;get string of characters from console, ending in CR
098C  CD9E00  	li0:	call	conin	;get a character
098F  FE08    		cpi	BS	;allow BackSpacing
0991          		jrz	backup
0991  281D    		DB	28H,backup-$-1
0993  FE0D    		cpi	CR
0995          		jrz	li1
0995  282E    		DB	28H,li1-$-1
0997  FE03    		cpi	CTLC
0999          		jrz	liZ
0999  2830    		DB	28H,liZ-$-1
099B  FE20    		cpi	' '	;ignore other non-print
099D          		jrc	li0
099D  38ED    		DB	38H,li0-$-1
099F  CD8009  		call	toupper
09A2  77      		mov	m,a	;put character in line nuffer
09A3  23      		inx	h
09A4  4F      		mov	c,a
09A5  CD8F00  		call	conout	; echo character
09A8  7D      		mov	a,l	;else check for pending buffer overflow
09A9  D604    		sui	line mod 256
09AB  FE40    		cpi	64
09AD  C8      		rz		;stop if buffer full
09AE          		jr	li0	;if not full, keep getting characters
09AE  18DC    		DB	18H,li0-$-1
		
09B0  7D      	backup:	mov	a,l	;(destructive) BackSpacing
09B1  FE04    		cpi	line mod 256	;test if at beginning of line
09B3          		jrz	li0	;can't backspace past start of line
09B3  28D7    		DB	28H,li0-$-1
09B5  0E08    		mvi	c,bs	;output BS," ",BS to erase character on screen
09B7  CD8F00  		call	conout	;and put cursor back one position
09BA  CD5609  		call	space
09BD  0E08    		mvi	c,bs
09BF  CD8F00  		call	conout
09C2  2B      		dcx	h	;step buffer pointer back one
09C3          		jr	li0	;and continue to get characters
09C3  18C7    		DB	18H,li0-$-1
		
		; End line input, A=CR
09C5  77      	li1:	mov	m,a	; store CR in buffer
09C6  0E0D    		mvi	c,CR	;display CR so user knows we got it
09C8  C38F00  		jmp	conout	;then return to calling routine
		
		; Abort input
09CB  0E5E    	liZ:	mvi	c,'^'
09CD  CD8F00  		call	conout
09D0  0E43    		mvi	c,'C'
09D2  CD8F00  		call	conout
09D5  E1      		pop	h	; always OK?
09D6  C9      		ret		; return to caller's caller (main debug loop)
		
		; Get next character from line buffer.
		; DE=current pointer within 'line'
		; Returns: ZR=EOL else A=char
09D7  7B      	char:	mov	a,e	;remove a character from line buffer,
09D8  D604    		sui	line mod 256	;testing for no more characters
09DA  D640    		sui	64
09DC  C8      		rz		;return [ZR] condition if at end of buffer
09DD  1A      		ldax	d
09DE  FE0D    		cpi	CR
09E0  C8      		rz		;also return [ZR] if at end of line
09E1  13      		inx	d	;else step to next character
09E2  C9      		ret		;and return [NZ]
		
		; Get HEX value from line buffer
		; Return: CY=error, HL=value, bit7(B)=1 if no input
09E3          	getaddr:		;extract address from line buffer (delimitted by " ")
09E3          		setb	7,b	;flag to detect no address entered
09E3  CBF8    		DB	0CBH,7*8+b+0C0H
09E5  210000  		lxi	h,0
09E8  CD4305  		call	skb
09EB  C8      		rz		;end of buffer/line before a character was found
09EC          		jr	ga1	;if not space, then start getting HEX digits
09EC  1804    		DB	18H,ga1-$-1
		
09EE  CDD709  	ga0:	call	char
09F1  C8      		rz
09F2  CD0A0A  	ga1:	call	hexcon	;start assembling digits into 16 bit accumilator
09F5          		jrc	chkdlm	;check if valid delimiter before returning error.
09F5  380E    		DB	38H,chkdlm-$-1
09F7          		res	7,b	;reset flag
09F7  CBB8    		DB	0CBH,7*8+b+80H
09F9  D5      		push	d	;save buffer pointer
09FA  5F      		mov	e,a
09FB  1600    		mvi	d,0
09FD  29      		dad	h	;shift "accumulator" left 1 digit
09FE  29      		dad	h
09FF  29      		dad	h
0A00  29      		dad	h
0A01  19      		dad	d	;add in new digit
0A02  D1      		pop	d	;restore buffer pointer
0A03          		jr	ga0	;loop for next digit
0A03  18E9    		DB	18H,ga0-$-1
		
0A05  FE20    	chkdlm: cpi	' '	;blank is currently the only valid delimiter
0A07  C8      		rz
0A08  37      		stc
0A09  C9      		ret
		
0A0A          	hexcon: 		;convert ASCII character to HEX digit
0A0A  FE30    		cpi	'0'	;must be .GE. "0"
0A0C  D8      		rc
0A0D  FE3A    		cpi	'9'+1	;and be .LE. "9"
0A0F          		jrc	ok0	;valid numeral.
0A0F  3809    		DB	38H,ok0-$-1
0A11  FE41    		cpi	'A'	;or .GE. "A"
0A13  D8      		rc
0A14  FE47    		cpi	'F'+1	;and .LE. "F"
0A16  3F      		cmc
0A17  D8      		rc		;return [CY] if not valid HEX digit
0A18  D607    		sui	'A'-'9'-1	;convert letter
0A1A  D630    	ok0:	sui	'0'	;convert (numeral) to 0-15 in (A)
0A1C  C9      		ret
		
		; These only work on */84 (and 10) models.
		; Have no effect (and does nothing) on */83 models.
0A1D          	proginit:
0A1D  AF      		xra	a
0A1E          		stai
0A1E  ED47    		DB	0EDH,47H
FFFF          	 if not rom2k
0A20  DB14    		in	sysp84
0A22  E6FC    		ani	not DSNONE
0A24  E6EF    		ani	not K84MTR
0A26  F602    		ori	DS0
0A28  D314    		out	sysp84
		 endif
0A2A  3E41    		mvi	a,'A'
0A2C  320030  		sta	3000h
0A2F  C9      		ret
		
0A30          	progoff:
0A30          		ldai
0A30  ED57    		DB	0EDH,57H
0A32  C0      		rnz
0A33  2F      		cma
0A34          		stai
0A34  ED47    		DB	0EDH,47H
FFFF          	 if not rom2k
0A36  DB14    		in	sysp84
0A38  F603    		ori	DSNONE
0A3A  D314    		out	sysp84
		 endif
0A3C  AF      		xra	a
0A3D  320030  		sta	3000h
0A40  C9      		ret
		
0A41          	progress:
0A41          		ldai
0A41  ED57    		DB	0EDH,57H
0A43  C0      		rnz
FFFF          	 if not rom2k
0A44  DB14    		in	sysp84
0A46  EE03    		xri	DSNONE
0A48  D314    		out	sysp84
		 endif
0A4A  3A0030  		lda	3000h
0A4D  EE03    		xri	00000011b
0A4F  320030  		sta	3000h
0A52  C9      		ret
		
			rept	romsiz-$
0A53  FF      		db	0ffh
0A54  FF      		db	0ffh
0A55  FF      		db	0ffh
0A56  FF      		db	0ffh
0A57  FF      		db	0ffh
0A58  FF      		db	0ffh
0A59  FF      		db	0ffh
0A5A  FF      		db	0ffh
0A5B  FF      		db	0ffh
0A5C  FF      		db	0ffh
0A5D  FF      		db	0ffh
0A5E  FF      		db	0ffh
0A5F  FF      		db	0ffh
0A60  FF      		db	0ffh
0A61  FF      		db	0ffh
0A62  FF      		db	0ffh
0A63  FF      		db	0ffh
0A64  FF      		db	0ffh
0A65  FF      		db	0ffh
0A66  FF      		db	0ffh
0A67  FF      		db	0ffh
0A68  FF      		db	0ffh
0A69  FF      		db	0ffh
0A6A  FF      		db	0ffh
0A6B  FF      		db	0ffh
0A6C  FF      		db	0ffh
0A6D  FF      		db	0ffh
0A6E  FF      		db	0ffh
0A6F  FF      		db	0ffh
0A70  FF      		db	0ffh
0A71  FF      		db	0ffh
0A72  FF      		db	0ffh
0A73  FF      		db	0ffh
0A74  FF      		db	0ffh
0A75  FF      		db	0ffh
0A76  FF      		db	0ffh
0A77  FF      		db	0ffh
0A78  FF      		db	0ffh
0A79  FF      		db	0ffh
0A7A  FF      		db	0ffh
0A7B  FF      		db	0ffh
0A7C  FF      		db	0ffh
0A7D  FF      		db	0ffh
0A7E  FF      		db	0ffh
0A7F  FF      		db	0ffh
0A80  FF      		db	0ffh
0A81  FF      		db	0ffh
0A82  FF      		db	0ffh
0A83  FF      		db	0ffh
0A84  FF      		db	0ffh
0A85  FF      		db	0ffh
0A86  FF      		db	0ffh
0A87  FF      		db	0ffh
0A88  FF      		db	0ffh
0A89  FF      		db	0ffh
0A8A  FF      		db	0ffh
0A8B  FF      		db	0ffh
0A8C  FF      		db	0ffh
0A8D  FF      		db	0ffh
0A8E  FF      		db	0ffh
0A8F  FF      		db	0ffh
0A90  FF      		db	0ffh
0A91  FF      		db	0ffh
0A92  FF      		db	0ffh
0A93  FF      		db	0ffh
0A94  FF      		db	0ffh
0A95  FF      		db	0ffh
0A96  FF      		db	0ffh
0A97  FF      		db	0ffh
0A98  FF      		db	0ffh
0A99  FF      		db	0ffh
0A9A  FF      		db	0ffh
0A9B  FF      		db	0ffh
0A9C  FF      		db	0ffh
0A9D  FF      		db	0ffh
0A9E  FF      		db	0ffh
0A9F  FF      		db	0ffh
0AA0  FF      		db	0ffh
0AA1  FF      		db	0ffh
0AA2  FF      		db	0ffh
0AA3  FF      		db	0ffh
0AA4  FF      		db	0ffh
0AA5  FF      		db	0ffh
0AA6  FF      		db	0ffh
0AA7  FF      		db	0ffh
0AA8  FF      		db	0ffh
0AA9  FF      		db	0ffh
0AAA  FF      		db	0ffh
0AAB  FF      		db	0ffh
0AAC  FF      		db	0ffh
0AAD  FF      		db	0ffh
0AAE  FF      		db	0ffh
0AAF  FF      		db	0ffh
0AB0  FF      		db	0ffh
0AB1  FF      		db	0ffh
0AB2  FF      		db	0ffh
0AB3  FF      		db	0ffh
0AB4  FF      		db	0ffh
0AB5  FF      		db	0ffh
0AB6  FF      		db	0ffh
0AB7  FF      		db	0ffh
0AB8  FF      		db	0ffh
0AB9  FF      		db	0ffh
0ABA  FF      		db	0ffh
0ABB  FF      		db	0ffh
0ABC  FF      		db	0ffh
0ABD  FF      		db	0ffh
0ABE  FF      		db	0ffh
0ABF  FF      		db	0ffh
0AC0  FF      		db	0ffh
0AC1  FF      		db	0ffh
0AC2  FF      		db	0ffh
0AC3  FF      		db	0ffh
0AC4  FF      		db	0ffh
0AC5  FF      		db	0ffh
0AC6  FF      		db	0ffh
0AC7  FF      		db	0ffh
0AC8  FF      		db	0ffh
0AC9  FF      		db	0ffh
0ACA  FF      		db	0ffh
0ACB  FF      		db	0ffh
0ACC  FF      		db	0ffh
0ACD  FF      		db	0ffh
0ACE  FF      		db	0ffh
0ACF  FF      		db	0ffh
0AD0  FF      		db	0ffh
0AD1  FF      		db	0ffh
0AD2  FF      		db	0ffh
0AD3  FF      		db	0ffh
0AD4  FF      		db	0ffh
0AD5  FF      		db	0ffh
0AD6  FF      		db	0ffh
0AD7  FF      		db	0ffh
0AD8  FF      		db	0ffh
0AD9  FF      		db	0ffh
0ADA  FF      		db	0ffh
0ADB  FF      		db	0ffh
0ADC  FF      		db	0ffh
0ADD  FF      		db	0ffh
0ADE  FF      		db	0ffh
0ADF  FF      		db	0ffh
0AE0  FF      		db	0ffh
0AE1  FF      		db	0ffh
0AE2  FF      		db	0ffh
0AE3  FF      		db	0ffh
0AE4  FF      		db	0ffh
0AE5  FF      		db	0ffh
0AE6  FF      		db	0ffh
0AE7  FF      		db	0ffh
0AE8  FF      		db	0ffh
0AE9  FF      		db	0ffh
0AEA  FF      		db	0ffh
0AEB  FF      		db	0ffh
0AEC  FF      		db	0ffh
0AED  FF      		db	0ffh
0AEE  FF      		db	0ffh
0AEF  FF      		db	0ffh
0AF0  FF      		db	0ffh
0AF1  FF      		db	0ffh
0AF2  FF      		db	0ffh
0AF3  FF      		db	0ffh
0AF4  FF      		db	0ffh
0AF5  FF      		db	0ffh
0AF6  FF      		db	0ffh
0AF7  FF      		db	0ffh
0AF8  FF      		db	0ffh
0AF9  FF      		db	0ffh
0AFA  FF      		db	0ffh
0AFB  FF      		db	0ffh
0AFC  FF      		db	0ffh
0AFD  FF      		db	0ffh
0AFE  FF      		db	0ffh
0AFF  FF      		db	0ffh
0B00  FF      		db	0ffh
0B01  FF      		db	0ffh
0B02  FF      		db	0ffh
0B03  FF      		db	0ffh
0B04  FF      		db	0ffh
0B05  FF      		db	0ffh
0B06  FF      		db	0ffh
0B07  FF      		db	0ffh
0B08  FF      		db	0ffh
0B09  FF      		db	0ffh
0B0A  FF      		db	0ffh
0B0B  FF      		db	0ffh
0B0C  FF      		db	0ffh
0B0D  FF      		db	0ffh
0B0E  FF      		db	0ffh
0B0F  FF      		db	0ffh
0B10  FF      		db	0ffh
0B11  FF      		db	0ffh
0B12  FF      		db	0ffh
0B13  FF      		db	0ffh
0B14  FF      		db	0ffh
0B15  FF      		db	0ffh
0B16  FF      		db	0ffh
0B17  FF      		db	0ffh
0B18  FF      		db	0ffh
0B19  FF      		db	0ffh
0B1A  FF      		db	0ffh
0B1B  FF      		db	0ffh
0B1C  FF      		db	0ffh
0B1D  FF      		db	0ffh
0B1E  FF      		db	0ffh
0B1F  FF      		db	0ffh
0B20  FF      		db	0ffh
0B21  FF      		db	0ffh
0B22  FF      		db	0ffh
0B23  FF      		db	0ffh
0B24  FF      		db	0ffh
0B25  FF      		db	0ffh
0B26  FF      		db	0ffh
0B27  FF      		db	0ffh
0B28  FF      		db	0ffh
0B29  FF      		db	0ffh
0B2A  FF      		db	0ffh
0B2B  FF      		db	0ffh
0B2C  FF      		db	0ffh
0B2D  FF      		db	0ffh
0B2E  FF      		db	0ffh
0B2F  FF      		db	0ffh
0B30  FF      		db	0ffh
0B31  FF      		db	0ffh
0B32  FF      		db	0ffh
0B33  FF      		db	0ffh
0B34  FF      		db	0ffh
0B35  FF      		db	0ffh
0B36  FF      		db	0ffh
0B37  FF      		db	0ffh
0B38  FF      		db	0ffh
0B39  FF      		db	0ffh
0B3A  FF      		db	0ffh
0B3B  FF      		db	0ffh
0B3C  FF      		db	0ffh
0B3D  FF      		db	0ffh
0B3E  FF      		db	0ffh
0B3F  FF      		db	0ffh
0B40  FF      		db	0ffh
0B41  FF      		db	0ffh
0B42  FF      		db	0ffh
0B43  FF      		db	0ffh
0B44  FF      		db	0ffh
0B45  FF      		db	0ffh
0B46  FF      		db	0ffh
0B47  FF      		db	0ffh
0B48  FF      		db	0ffh
0B49  FF      		db	0ffh
0B4A  FF      		db	0ffh
0B4B  FF      		db	0ffh
0B4C  FF      		db	0ffh
0B4D  FF      		db	0ffh
0B4E  FF      		db	0ffh
0B4F  FF      		db	0ffh
0B50  FF      		db	0ffh
0B51  FF      		db	0ffh
0B52  FF      		db	0ffh
0B53  FF      		db	0ffh
0B54  FF      		db	0ffh
0B55  FF      		db	0ffh
0B56  FF      		db	0ffh
0B57  FF      		db	0ffh
0B58  FF      		db	0ffh
0B59  FF      		db	0ffh
0B5A  FF      		db	0ffh
0B5B  FF      		db	0ffh
0B5C  FF      		db	0ffh
0B5D  FF      		db	0ffh
0B5E  FF      		db	0ffh
0B5F  FF      		db	0ffh
0B60  FF      		db	0ffh
0B61  FF      		db	0ffh
0B62  FF      		db	0ffh
0B63  FF      		db	0ffh
0B64  FF      		db	0ffh
0B65  FF      		db	0ffh
0B66  FF      		db	0ffh
0B67  FF      		db	0ffh
0B68  FF      		db	0ffh
0B69  FF      		db	0ffh
0B6A  FF      		db	0ffh
0B6B  FF      		db	0ffh
0B6C  FF      		db	0ffh
0B6D  FF      		db	0ffh
0B6E  FF      		db	0ffh
0B6F  FF      		db	0ffh
0B70  FF      		db	0ffh
0B71  FF      		db	0ffh
0B72  FF      		db	0ffh
0B73  FF      		db	0ffh
0B74  FF      		db	0ffh
0B75  FF      		db	0ffh
0B76  FF      		db	0ffh
0B77  FF      		db	0ffh
0B78  FF      		db	0ffh
0B79  FF      		db	0ffh
0B7A  FF      		db	0ffh
0B7B  FF      		db	0ffh
0B7C  FF      		db	0ffh
0B7D  FF      		db	0ffh
0B7E  FF      		db	0ffh
0B7F  FF      		db	0ffh
0B80  FF      		db	0ffh
0B81  FF      		db	0ffh
0B82  FF      		db	0ffh
0B83  FF      		db	0ffh
0B84  FF      		db	0ffh
0B85  FF      		db	0ffh
0B86  FF      		db	0ffh
0B87  FF      		db	0ffh
0B88  FF      		db	0ffh
0B89  FF      		db	0ffh
0B8A  FF      		db	0ffh
0B8B  FF      		db	0ffh
0B8C  FF      		db	0ffh
0B8D  FF      		db	0ffh
0B8E  FF      		db	0ffh
0B8F  FF      		db	0ffh
0B90  FF      		db	0ffh
0B91  FF      		db	0ffh
0B92  FF      		db	0ffh
0B93  FF      		db	0ffh
0B94  FF      		db	0ffh
0B95  FF      		db	0ffh
0B96  FF      		db	0ffh
0B97  FF      		db	0ffh
0B98  FF      		db	0ffh
0B99  FF      		db	0ffh
0B9A  FF      		db	0ffh
0B9B  FF      		db	0ffh
0B9C  FF      		db	0ffh
0B9D  FF      		db	0ffh
0B9E  FF      		db	0ffh
0B9F  FF      		db	0ffh
0BA0  FF      		db	0ffh
0BA1  FF      		db	0ffh
0BA2  FF      		db	0ffh
0BA3  FF      		db	0ffh
0BA4  FF      		db	0ffh
0BA5  FF      		db	0ffh
0BA6  FF      		db	0ffh
0BA7  FF      		db	0ffh
0BA8  FF      		db	0ffh
0BA9  FF      		db	0ffh
0BAA  FF      		db	0ffh
0BAB  FF      		db	0ffh
0BAC  FF      		db	0ffh
0BAD  FF      		db	0ffh
0BAE  FF      		db	0ffh
0BAF  FF      		db	0ffh
0BB0  FF      		db	0ffh
0BB1  FF      		db	0ffh
0BB2  FF      		db	0ffh
0BB3  FF      		db	0ffh
0BB4  FF      		db	0ffh
0BB5  FF      		db	0ffh
0BB6  FF      		db	0ffh
0BB7  FF      		db	0ffh
0BB8  FF      		db	0ffh
0BB9  FF      		db	0ffh
0BBA  FF      		db	0ffh
0BBB  FF      		db	0ffh
0BBC  FF      		db	0ffh
0BBD  FF      		db	0ffh
0BBE  FF      		db	0ffh
0BBF  FF      		db	0ffh
0BC0  FF      		db	0ffh
0BC1  FF      		db	0ffh
0BC2  FF      		db	0ffh
0BC3  FF      		db	0ffh
0BC4  FF      		db	0ffh
0BC5  FF      		db	0ffh
0BC6  FF      		db	0ffh
0BC7  FF      		db	0ffh
0BC8  FF      		db	0ffh
0BC9  FF      		db	0ffh
0BCA  FF      		db	0ffh
0BCB  FF      		db	0ffh
0BCC  FF      		db	0ffh
0BCD  FF      		db	0ffh
0BCE  FF      		db	0ffh
0BCF  FF      		db	0ffh
0BD0  FF      		db	0ffh
0BD1  FF      		db	0ffh
0BD2  FF      		db	0ffh
0BD3  FF      		db	0ffh
0BD4  FF      		db	0ffh
0BD5  FF      		db	0ffh
0BD6  FF      		db	0ffh
0BD7  FF      		db	0ffh
0BD8  FF      		db	0ffh
0BD9  FF      		db	0ffh
0BDA  FF      		db	0ffh
0BDB  FF      		db	0ffh
0BDC  FF      		db	0ffh
0BDD  FF      		db	0ffh
0BDE  FF      		db	0ffh
0BDF  FF      		db	0ffh
0BE0  FF      		db	0ffh
0BE1  FF      		db	0ffh
0BE2  FF      		db	0ffh
0BE3  FF      		db	0ffh
0BE4  FF      		db	0ffh
0BE5  FF      		db	0ffh
0BE6  FF      		db	0ffh
0BE7  FF      		db	0ffh
0BE8  FF      		db	0ffh
0BE9  FF      		db	0ffh
0BEA  FF      		db	0ffh
0BEB  FF      		db	0ffh
0BEC  FF      		db	0ffh
0BED  FF      		db	0ffh
0BEE  FF      		db	0ffh
0BEF  FF      		db	0ffh
0BF0  FF      		db	0ffh
0BF1  FF      		db	0ffh
0BF2  FF      		db	0ffh
0BF3  FF      		db	0ffh
0BF4  FF      		db	0ffh
0BF5  FF      		db	0ffh
0BF6  FF      		db	0ffh
0BF7  FF      		db	0ffh
0BF8  FF      		db	0ffh
0BF9  FF      		db	0ffh
0BFA  FF      		db	0ffh
0BFB  FF      		db	0ffh
0BFC  FF      		db	0ffh
0BFD  FF      		db	0ffh
0BFE  FF      		db	0ffh
0BFF  FF      		db	0ffh
0C00  FF      		db	0ffh
0C01  FF      		db	0ffh
0C02  FF      		db	0ffh
0C03  FF      		db	0ffh
0C04  FF      		db	0ffh
0C05  FF      		db	0ffh
0C06  FF      		db	0ffh
0C07  FF      		db	0ffh
0C08  FF      		db	0ffh
0C09  FF      		db	0ffh
0C0A  FF      		db	0ffh
0C0B  FF      		db	0ffh
0C0C  FF      		db	0ffh
0C0D  FF      		db	0ffh
0C0E  FF      		db	0ffh
0C0F  FF      		db	0ffh
0C10  FF      		db	0ffh
0C11  FF      		db	0ffh
0C12  FF      		db	0ffh
0C13  FF      		db	0ffh
0C14  FF      		db	0ffh
0C15  FF      		db	0ffh
0C16  FF      		db	0ffh
0C17  FF      		db	0ffh
0C18  FF      		db	0ffh
0C19  FF      		db	0ffh
0C1A  FF      		db	0ffh
0C1B  FF      		db	0ffh
0C1C  FF      		db	0ffh
0C1D  FF      		db	0ffh
0C1E  FF      		db	0ffh
0C1F  FF      		db	0ffh
0C20  FF      		db	0ffh
0C21  FF      		db	0ffh
0C22  FF      		db	0ffh
0C23  FF      		db	0ffh
0C24  FF      		db	0ffh
0C25  FF      		db	0ffh
0C26  FF      		db	0ffh
0C27  FF      		db	0ffh
0C28  FF      		db	0ffh
0C29  FF      		db	0ffh
0C2A  FF      		db	0ffh
0C2B  FF      		db	0ffh
0C2C  FF      		db	0ffh
0C2D  FF      		db	0ffh
0C2E  FF      		db	0ffh
0C2F  FF      		db	0ffh
0C30  FF      		db	0ffh
0C31  FF      		db	0ffh
0C32  FF      		db	0ffh
0C33  FF      		db	0ffh
0C34  FF      		db	0ffh
0C35  FF      		db	0ffh
0C36  FF      		db	0ffh
0C37  FF      		db	0ffh
0C38  FF      		db	0ffh
0C39  FF      		db	0ffh
0C3A  FF      		db	0ffh
0C3B  FF      		db	0ffh
0C3C  FF      		db	0ffh
0C3D  FF      		db	0ffh
0C3E  FF      		db	0ffh
0C3F  FF      		db	0ffh
0C40  FF      		db	0ffh
0C41  FF      		db	0ffh
0C42  FF      		db	0ffh
0C43  FF      		db	0ffh
0C44  FF      		db	0ffh
0C45  FF      		db	0ffh
0C46  FF      		db	0ffh
0C47  FF      		db	0ffh
0C48  FF      		db	0ffh
0C49  FF      		db	0ffh
0C4A  FF      		db	0ffh
0C4B  FF      		db	0ffh
0C4C  FF      		db	0ffh
0C4D  FF      		db	0ffh
0C4E  FF      		db	0ffh
0C4F  FF      		db	0ffh
0C50  FF      		db	0ffh
0C51  FF      		db	0ffh
0C52  FF      		db	0ffh
0C53  FF      		db	0ffh
0C54  FF      		db	0ffh
0C55  FF      		db	0ffh
0C56  FF      		db	0ffh
0C57  FF      		db	0ffh
0C58  FF      		db	0ffh
0C59  FF      		db	0ffh
0C5A  FF      		db	0ffh
0C5B  FF      		db	0ffh
0C5C  FF      		db	0ffh
0C5D  FF      		db	0ffh
0C5E  FF      		db	0ffh
0C5F  FF      		db	0ffh
0C60  FF      		db	0ffh
0C61  FF      		db	0ffh
0C62  FF      		db	0ffh
0C63  FF      		db	0ffh
0C64  FF      		db	0ffh
0C65  FF      		db	0ffh
0C66  FF      		db	0ffh
0C67  FF      		db	0ffh
0C68  FF      		db	0ffh
0C69  FF      		db	0ffh
0C6A  FF      		db	0ffh
0C6B  FF      		db	0ffh
0C6C  FF      		db	0ffh
0C6D  FF      		db	0ffh
0C6E  FF      		db	0ffh
0C6F  FF      		db	0ffh
0C70  FF      		db	0ffh
0C71  FF      		db	0ffh
0C72  FF      		db	0ffh
0C73  FF      		db	0ffh
0C74  FF      		db	0ffh
0C75  FF      		db	0ffh
0C76  FF      		db	0ffh
0C77  FF      		db	0ffh
0C78  FF      		db	0ffh
0C79  FF      		db	0ffh
0C7A  FF      		db	0ffh
0C7B  FF      		db	0ffh
0C7C  FF      		db	0ffh
0C7D  FF      		db	0ffh
0C7E  FF      		db	0ffh
0C7F  FF      		db	0ffh
0C80  FF      		db	0ffh
0C81  FF      		db	0ffh
0C82  FF      		db	0ffh
0C83  FF      		db	0ffh
0C84  FF      		db	0ffh
0C85  FF      		db	0ffh
0C86  FF      		db	0ffh
0C87  FF      		db	0ffh
0C88  FF      		db	0ffh
0C89  FF      		db	0ffh
0C8A  FF      		db	0ffh
0C8B  FF      		db	0ffh
0C8C  FF      		db	0ffh
0C8D  FF      		db	0ffh
0C8E  FF      		db	0ffh
0C8F  FF      		db	0ffh
0C90  FF      		db	0ffh
0C91  FF      		db	0ffh
0C92  FF      		db	0ffh
0C93  FF      		db	0ffh
0C94  FF      		db	0ffh
0C95  FF      		db	0ffh
0C96  FF      		db	0ffh
0C97  FF      		db	0ffh
0C98  FF      		db	0ffh
0C99  FF      		db	0ffh
0C9A  FF      		db	0ffh
0C9B  FF      		db	0ffh
0C9C  FF      		db	0ffh
0C9D  FF      		db	0ffh
0C9E  FF      		db	0ffh
0C9F  FF      		db	0ffh
0CA0  FF      		db	0ffh
0CA1  FF      		db	0ffh
0CA2  FF      		db	0ffh
0CA3  FF      		db	0ffh
0CA4  FF      		db	0ffh
0CA5  FF      		db	0ffh
0CA6  FF      		db	0ffh
0CA7  FF      		db	0ffh
0CA8  FF      		db	0ffh
0CA9  FF      		db	0ffh
0CAA  FF      		db	0ffh
0CAB  FF      		db	0ffh
0CAC  FF      		db	0ffh
0CAD  FF      		db	0ffh
0CAE  FF      		db	0ffh
0CAF  FF      		db	0ffh
0CB0  FF      		db	0ffh
0CB1  FF      		db	0ffh
0CB2  FF      		db	0ffh
0CB3  FF      		db	0ffh
0CB4  FF      		db	0ffh
0CB5  FF      		db	0ffh
0CB6  FF      		db	0ffh
0CB7  FF      		db	0ffh
0CB8  FF      		db	0ffh
0CB9  FF      		db	0ffh
0CBA  FF      		db	0ffh
0CBB  FF      		db	0ffh
0CBC  FF      		db	0ffh
0CBD  FF      		db	0ffh
0CBE  FF      		db	0ffh
0CBF  FF      		db	0ffh
0CC0  FF      		db	0ffh
0CC1  FF      		db	0ffh
0CC2  FF      		db	0ffh
0CC3  FF      		db	0ffh
0CC4  FF      		db	0ffh
0CC5  FF      		db	0ffh
0CC6  FF      		db	0ffh
0CC7  FF      		db	0ffh
0CC8  FF      		db	0ffh
0CC9  FF      		db	0ffh
0CCA  FF      		db	0ffh
0CCB  FF      		db	0ffh
0CCC  FF      		db	0ffh
0CCD  FF      		db	0ffh
0CCE  FF      		db	0ffh
0CCF  FF      		db	0ffh
0CD0  FF      		db	0ffh
0CD1  FF      		db	0ffh
0CD2  FF      		db	0ffh
0CD3  FF      		db	0ffh
0CD4  FF      		db	0ffh
0CD5  FF      		db	0ffh
0CD6  FF      		db	0ffh
0CD7  FF      		db	0ffh
0CD8  FF      		db	0ffh
0CD9  FF      		db	0ffh
0CDA  FF      		db	0ffh
0CDB  FF      		db	0ffh
0CDC  FF      		db	0ffh
0CDD  FF      		db	0ffh
0CDE  FF      		db	0ffh
0CDF  FF      		db	0ffh
0CE0  FF      		db	0ffh
0CE1  FF      		db	0ffh
0CE2  FF      		db	0ffh
0CE3  FF      		db	0ffh
0CE4  FF      		db	0ffh
0CE5  FF      		db	0ffh
0CE6  FF      		db	0ffh
0CE7  FF      		db	0ffh
0CE8  FF      		db	0ffh
0CE9  FF      		db	0ffh
0CEA  FF      		db	0ffh
0CEB  FF      		db	0ffh
0CEC  FF      		db	0ffh
0CED  FF      		db	0ffh
0CEE  FF      		db	0ffh
0CEF  FF      		db	0ffh
0CF0  FF      		db	0ffh
0CF1  FF      		db	0ffh
0CF2  FF      		db	0ffh
0CF3  FF      		db	0ffh
0CF4  FF      		db	0ffh
0CF5  FF      		db	0ffh
0CF6  FF      		db	0ffh
0CF7  FF      		db	0ffh
0CF8  FF      		db	0ffh
0CF9  FF      		db	0ffh
0CFA  FF      		db	0ffh
0CFB  FF      		db	0ffh
0CFC  FF      		db	0ffh
0CFD  FF      		db	0ffh
0CFE  FF      		db	0ffh
0CFF  FF      		db	0ffh
0D00  FF      		db	0ffh
0D01  FF      		db	0ffh
0D02  FF      		db	0ffh
0D03  FF      		db	0ffh
0D04  FF      		db	0ffh
0D05  FF      		db	0ffh
0D06  FF      		db	0ffh
0D07  FF      		db	0ffh
0D08  FF      		db	0ffh
0D09  FF      		db	0ffh
0D0A  FF      		db	0ffh
0D0B  FF      		db	0ffh
0D0C  FF      		db	0ffh
0D0D  FF      		db	0ffh
0D0E  FF      		db	0ffh
0D0F  FF      		db	0ffh
0D10  FF      		db	0ffh
0D11  FF      		db	0ffh
0D12  FF      		db	0ffh
0D13  FF      		db	0ffh
0D14  FF      		db	0ffh
0D15  FF      		db	0ffh
0D16  FF      		db	0ffh
0D17  FF      		db	0ffh
0D18  FF      		db	0ffh
0D19  FF      		db	0ffh
0D1A  FF      		db	0ffh
0D1B  FF      		db	0ffh
0D1C  FF      		db	0ffh
0D1D  FF      		db	0ffh
0D1E  FF      		db	0ffh
0D1F  FF      		db	0ffh
0D20  FF      		db	0ffh
0D21  FF      		db	0ffh
0D22  FF      		db	0ffh
0D23  FF      		db	0ffh
0D24  FF      		db	0ffh
0D25  FF      		db	0ffh
0D26  FF      		db	0ffh
0D27  FF      		db	0ffh
0D28  FF      		db	0ffh
0D29  FF      		db	0ffh
0D2A  FF      		db	0ffh
0D2B  FF      		db	0ffh
0D2C  FF      		db	0ffh
0D2D  FF      		db	0ffh
0D2E  FF      		db	0ffh
0D2F  FF      		db	0ffh
0D30  FF      		db	0ffh
0D31  FF      		db	0ffh
0D32  FF      		db	0ffh
0D33  FF      		db	0ffh
0D34  FF      		db	0ffh
0D35  FF      		db	0ffh
0D36  FF      		db	0ffh
0D37  FF      		db	0ffh
0D38  FF      		db	0ffh
0D39  FF      		db	0ffh
0D3A  FF      		db	0ffh
0D3B  FF      		db	0ffh
0D3C  FF      		db	0ffh
0D3D  FF      		db	0ffh
0D3E  FF      		db	0ffh
0D3F  FF      		db	0ffh
0D40  FF      		db	0ffh
0D41  FF      		db	0ffh
0D42  FF      		db	0ffh
0D43  FF      		db	0ffh
0D44  FF      		db	0ffh
0D45  FF      		db	0ffh
0D46  FF      		db	0ffh
0D47  FF      		db	0ffh
0D48  FF      		db	0ffh
0D49  FF      		db	0ffh
0D4A  FF      		db	0ffh
0D4B  FF      		db	0ffh
0D4C  FF      		db	0ffh
0D4D  FF      		db	0ffh
0D4E  FF      		db	0ffh
0D4F  FF      		db	0ffh
0D50  FF      		db	0ffh
0D51  FF      		db	0ffh
0D52  FF      		db	0ffh
0D53  FF      		db	0ffh
0D54  FF      		db	0ffh
0D55  FF      		db	0ffh
0D56  FF      		db	0ffh
0D57  FF      		db	0ffh
0D58  FF      		db	0ffh
0D59  FF      		db	0ffh
0D5A  FF      		db	0ffh
0D5B  FF      		db	0ffh
0D5C  FF      		db	0ffh
0D5D  FF      		db	0ffh
0D5E  FF      		db	0ffh
0D5F  FF      		db	0ffh
0D60  FF      		db	0ffh
0D61  FF      		db	0ffh
0D62  FF      		db	0ffh
0D63  FF      		db	0ffh
0D64  FF      		db	0ffh
0D65  FF      		db	0ffh
0D66  FF      		db	0ffh
0D67  FF      		db	0ffh
0D68  FF      		db	0ffh
0D69  FF      		db	0ffh
0D6A  FF      		db	0ffh
0D6B  FF      		db	0ffh
0D6C  FF      		db	0ffh
0D6D  FF      		db	0ffh
0D6E  FF      		db	0ffh
0D6F  FF      		db	0ffh
0D70  FF      		db	0ffh
0D71  FF      		db	0ffh
0D72  FF      		db	0ffh
0D73  FF      		db	0ffh
0D74  FF      		db	0ffh
0D75  FF      		db	0ffh
0D76  FF      		db	0ffh
0D77  FF      		db	0ffh
0D78  FF      		db	0ffh
0D79  FF      		db	0ffh
0D7A  FF      		db	0ffh
0D7B  FF      		db	0ffh
0D7C  FF      		db	0ffh
0D7D  FF      		db	0ffh
0D7E  FF      		db	0ffh
0D7F  FF      		db	0ffh
0D80  FF      		db	0ffh
0D81  FF      		db	0ffh
0D82  FF      		db	0ffh
0D83  FF      		db	0ffh
0D84  FF      		db	0ffh
0D85  FF      		db	0ffh
0D86  FF      		db	0ffh
0D87  FF      		db	0ffh
0D88  FF      		db	0ffh
0D89  FF      		db	0ffh
0D8A  FF      		db	0ffh
0D8B  FF      		db	0ffh
0D8C  FF      		db	0ffh
0D8D  FF      		db	0ffh
0D8E  FF      		db	0ffh
0D8F  FF      		db	0ffh
0D90  FF      		db	0ffh
0D91  FF      		db	0ffh
0D92  FF      		db	0ffh
0D93  FF      		db	0ffh
0D94  FF      		db	0ffh
0D95  FF      		db	0ffh
0D96  FF      		db	0ffh
0D97  FF      		db	0ffh
0D98  FF      		db	0ffh
0D99  FF      		db	0ffh
0D9A  FF      		db	0ffh
0D9B  FF      		db	0ffh
0D9C  FF      		db	0ffh
0D9D  FF      		db	0ffh
0D9E  FF      		db	0ffh
0D9F  FF      		db	0ffh
0DA0  FF      		db	0ffh
0DA1  FF      		db	0ffh
0DA2  FF      		db	0ffh
0DA3  FF      		db	0ffh
0DA4  FF      		db	0ffh
0DA5  FF      		db	0ffh
0DA6  FF      		db	0ffh
0DA7  FF      		db	0ffh
0DA8  FF      		db	0ffh
0DA9  FF      		db	0ffh
0DAA  FF      		db	0ffh
0DAB  FF      		db	0ffh
0DAC  FF      		db	0ffh
0DAD  FF      		db	0ffh
0DAE  FF      		db	0ffh
0DAF  FF      		db	0ffh
0DB0  FF      		db	0ffh
0DB1  FF      		db	0ffh
0DB2  FF      		db	0ffh
0DB3  FF      		db	0ffh
0DB4  FF      		db	0ffh
0DB5  FF      		db	0ffh
0DB6  FF      		db	0ffh
0DB7  FF      		db	0ffh
0DB8  FF      		db	0ffh
0DB9  FF      		db	0ffh
0DBA  FF      		db	0ffh
0DBB  FF      		db	0ffh
0DBC  FF      		db	0ffh
0DBD  FF      		db	0ffh
0DBE  FF      		db	0ffh
0DBF  FF      		db	0ffh
0DC0  FF      		db	0ffh
0DC1  FF      		db	0ffh
0DC2  FF      		db	0ffh
0DC3  FF      		db	0ffh
0DC4  FF      		db	0ffh
0DC5  FF      		db	0ffh
0DC6  FF      		db	0ffh
0DC7  FF      		db	0ffh
0DC8  FF      		db	0ffh
0DC9  FF      		db	0ffh
0DCA  FF      		db	0ffh
0DCB  FF      		db	0ffh
0DCC  FF      		db	0ffh
0DCD  FF      		db	0ffh
0DCE  FF      		db	0ffh
0DCF  FF      		db	0ffh
0DD0  FF      		db	0ffh
0DD1  FF      		db	0ffh
0DD2  FF      		db	0ffh
0DD3  FF      		db	0ffh
0DD4  FF      		db	0ffh
0DD5  FF      		db	0ffh
0DD6  FF      		db	0ffh
0DD7  FF      		db	0ffh
0DD8  FF      		db	0ffh
0DD9  FF      		db	0ffh
0DDA  FF      		db	0ffh
0DDB  FF      		db	0ffh
0DDC  FF      		db	0ffh
0DDD  FF      		db	0ffh
0DDE  FF      		db	0ffh
0DDF  FF      		db	0ffh
0DE0  FF      		db	0ffh
0DE1  FF      		db	0ffh
0DE2  FF      		db	0ffh
0DE3  FF      		db	0ffh
0DE4  FF      		db	0ffh
0DE5  FF      		db	0ffh
0DE6  FF      		db	0ffh
0DE7  FF      		db	0ffh
0DE8  FF      		db	0ffh
0DE9  FF      		db	0ffh
0DEA  FF      		db	0ffh
0DEB  FF      		db	0ffh
0DEC  FF      		db	0ffh
0DED  FF      		db	0ffh
0DEE  FF      		db	0ffh
0DEF  FF      		db	0ffh
0DF0  FF      		db	0ffh
0DF1  FF      		db	0ffh
0DF2  FF      		db	0ffh
0DF3  FF      		db	0ffh
0DF4  FF      		db	0ffh
0DF5  FF      		db	0ffh
0DF6  FF      		db	0ffh
0DF7  FF      		db	0ffh
0DF8  FF      		db	0ffh
0DF9  FF      		db	0ffh
0DFA  FF      		db	0ffh
0DFB  FF      		db	0ffh
0DFC  FF      		db	0ffh
0DFD  FF      		db	0ffh
0DFE  FF      		db	0ffh
0DFF  FF      		db	0ffh
0E00  FF      		db	0ffh
0E01  FF      		db	0ffh
0E02  FF      		db	0ffh
0E03  FF      		db	0ffh
0E04  FF      		db	0ffh
0E05  FF      		db	0ffh
0E06  FF      		db	0ffh
0E07  FF      		db	0ffh
0E08  FF      		db	0ffh
0E09  FF      		db	0ffh
0E0A  FF      		db	0ffh
0E0B  FF      		db	0ffh
0E0C  FF      		db	0ffh
0E0D  FF      		db	0ffh
0E0E  FF      		db	0ffh
0E0F  FF      		db	0ffh
0E10  FF      		db	0ffh
0E11  FF      		db	0ffh
0E12  FF      		db	0ffh
0E13  FF      		db	0ffh
0E14  FF      		db	0ffh
0E15  FF      		db	0ffh
0E16  FF      		db	0ffh
0E17  FF      		db	0ffh
0E18  FF      		db	0ffh
0E19  FF      		db	0ffh
0E1A  FF      		db	0ffh
0E1B  FF      		db	0ffh
0E1C  FF      		db	0ffh
0E1D  FF      		db	0ffh
0E1E  FF      		db	0ffh
0E1F  FF      		db	0ffh
0E20  FF      		db	0ffh
0E21  FF      		db	0ffh
0E22  FF      		db	0ffh
0E23  FF      		db	0ffh
0E24  FF      		db	0ffh
0E25  FF      		db	0ffh
0E26  FF      		db	0ffh
0E27  FF      		db	0ffh
0E28  FF      		db	0ffh
0E29  FF      		db	0ffh
0E2A  FF      		db	0ffh
0E2B  FF      		db	0ffh
0E2C  FF      		db	0ffh
0E2D  FF      		db	0ffh
0E2E  FF      		db	0ffh
0E2F  FF      		db	0ffh
0E30  FF      		db	0ffh
0E31  FF      		db	0ffh
0E32  FF      		db	0ffh
0E33  FF      		db	0ffh
0E34  FF      		db	0ffh
0E35  FF      		db	0ffh
0E36  FF      		db	0ffh
0E37  FF      		db	0ffh
0E38  FF      		db	0ffh
0E39  FF      		db	0ffh
0E3A  FF      		db	0ffh
0E3B  FF      		db	0ffh
0E3C  FF      		db	0ffh
0E3D  FF      		db	0ffh
0E3E  FF      		db	0ffh
0E3F  FF      		db	0ffh
0E40  FF      		db	0ffh
0E41  FF      		db	0ffh
0E42  FF      		db	0ffh
0E43  FF      		db	0ffh
0E44  FF      		db	0ffh
0E45  FF      		db	0ffh
0E46  FF      		db	0ffh
0E47  FF      		db	0ffh
0E48  FF      		db	0ffh
0E49  FF      		db	0ffh
0E4A  FF      		db	0ffh
0E4B  FF      		db	0ffh
0E4C  FF      		db	0ffh
0E4D  FF      		db	0ffh
0E4E  FF      		db	0ffh
0E4F  FF      		db	0ffh
0E50  FF      		db	0ffh
0E51  FF      		db	0ffh
0E52  FF      		db	0ffh
0E53  FF      		db	0ffh
0E54  FF      		db	0ffh
0E55  FF      		db	0ffh
0E56  FF      		db	0ffh
0E57  FF      		db	0ffh
0E58  FF      		db	0ffh
0E59  FF      		db	0ffh
0E5A  FF      		db	0ffh
0E5B  FF      		db	0ffh
0E5C  FF      		db	0ffh
0E5D  FF      		db	0ffh
0E5E  FF      		db	0ffh
0E5F  FF      		db	0ffh
0E60  FF      		db	0ffh
0E61  FF      		db	0ffh
0E62  FF      		db	0ffh
0E63  FF      		db	0ffh
0E64  FF      		db	0ffh
0E65  FF      		db	0ffh
0E66  FF      		db	0ffh
0E67  FF      		db	0ffh
0E68  FF      		db	0ffh
0E69  FF      		db	0ffh
0E6A  FF      		db	0ffh
0E6B  FF      		db	0ffh
0E6C  FF      		db	0ffh
0E6D  FF      		db	0ffh
0E6E  FF      		db	0ffh
0E6F  FF      		db	0ffh
0E70  FF      		db	0ffh
0E71  FF      		db	0ffh
0E72  FF      		db	0ffh
0E73  FF      		db	0ffh
0E74  FF      		db	0ffh
0E75  FF      		db	0ffh
0E76  FF      		db	0ffh
0E77  FF      		db	0ffh
0E78  FF      		db	0ffh
0E79  FF      		db	0ffh
0E7A  FF      		db	0ffh
0E7B  FF      		db	0ffh
0E7C  FF      		db	0ffh
0E7D  FF      		db	0ffh
0E7E  FF      		db	0ffh
0E7F  FF      		db	0ffh
0E80  FF      		db	0ffh
0E81  FF      		db	0ffh
0E82  FF      		db	0ffh
0E83  FF      		db	0ffh
0E84  FF      		db	0ffh
0E85  FF      		db	0ffh
0E86  FF      		db	0ffh
0E87  FF      		db	0ffh
0E88  FF      		db	0ffh
0E89  FF      		db	0ffh
0E8A  FF      		db	0ffh
0E8B  FF      		db	0ffh
0E8C  FF      		db	0ffh
0E8D  FF      		db	0ffh
0E8E  FF      		db	0ffh
0E8F  FF      		db	0ffh
0E90  FF      		db	0ffh
0E91  FF      		db	0ffh
0E92  FF      		db	0ffh
0E93  FF      		db	0ffh
0E94  FF      		db	0ffh
0E95  FF      		db	0ffh
0E96  FF      		db	0ffh
0E97  FF      		db	0ffh
0E98  FF      		db	0ffh
0E99  FF      		db	0ffh
0E9A  FF      		db	0ffh
0E9B  FF      		db	0ffh
0E9C  FF      		db	0ffh
0E9D  FF      		db	0ffh
0E9E  FF      		db	0ffh
0E9F  FF      		db	0ffh
0EA0  FF      		db	0ffh
0EA1  FF      		db	0ffh
0EA2  FF      		db	0ffh
0EA3  FF      		db	0ffh
0EA4  FF      		db	0ffh
0EA5  FF      		db	0ffh
0EA6  FF      		db	0ffh
0EA7  FF      		db	0ffh
0EA8  FF      		db	0ffh
0EA9  FF      		db	0ffh
0EAA  FF      		db	0ffh
0EAB  FF      		db	0ffh
0EAC  FF      		db	0ffh
0EAD  FF      		db	0ffh
0EAE  FF      		db	0ffh
0EAF  FF      		db	0ffh
0EB0  FF      		db	0ffh
0EB1  FF      		db	0ffh
0EB2  FF      		db	0ffh
0EB3  FF      		db	0ffh
0EB4  FF      		db	0ffh
0EB5  FF      		db	0ffh
0EB6  FF      		db	0ffh
0EB7  FF      		db	0ffh
0EB8  FF      		db	0ffh
0EB9  FF      		db	0ffh
0EBA  FF      		db	0ffh
0EBB  FF      		db	0ffh
0EBC  FF      		db	0ffh
0EBD  FF      		db	0ffh
0EBE  FF      		db	0ffh
0EBF  FF      		db	0ffh
0EC0  FF      		db	0ffh
0EC1  FF      		db	0ffh
0EC2  FF      		db	0ffh
0EC3  FF      		db	0ffh
0EC4  FF      		db	0ffh
0EC5  FF      		db	0ffh
0EC6  FF      		db	0ffh
0EC7  FF      		db	0ffh
0EC8  FF      		db	0ffh
0EC9  FF      		db	0ffh
0ECA  FF      		db	0ffh
0ECB  FF      		db	0ffh
0ECC  FF      		db	0ffh
0ECD  FF      		db	0ffh
0ECE  FF      		db	0ffh
0ECF  FF      		db	0ffh
0ED0  FF      		db	0ffh
0ED1  FF      		db	0ffh
0ED2  FF      		db	0ffh
0ED3  FF      		db	0ffh
0ED4  FF      		db	0ffh
0ED5  FF      		db	0ffh
0ED6  FF      		db	0ffh
0ED7  FF      		db	0ffh
0ED8  FF      		db	0ffh
0ED9  FF      		db	0ffh
0EDA  FF      		db	0ffh
0EDB  FF      		db	0ffh
0EDC  FF      		db	0ffh
0EDD  FF      		db	0ffh
0EDE  FF      		db	0ffh
0EDF  FF      		db	0ffh
0EE0  FF      		db	0ffh
0EE1  FF      		db	0ffh
0EE2  FF      		db	0ffh
0EE3  FF      		db	0ffh
0EE4  FF      		db	0ffh
0EE5  FF      		db	0ffh
0EE6  FF      		db	0ffh
0EE7  FF      		db	0ffh
0EE8  FF      		db	0ffh
0EE9  FF      		db	0ffh
0EEA  FF      		db	0ffh
0EEB  FF      		db	0ffh
0EEC  FF      		db	0ffh
0EED  FF      		db	0ffh
0EEE  FF      		db	0ffh
0EEF  FF      		db	0ffh
0EF0  FF      		db	0ffh
0EF1  FF      		db	0ffh
0EF2  FF      		db	0ffh
0EF3  FF      		db	0ffh
0EF4  FF      		db	0ffh
0EF5  FF      		db	0ffh
0EF6  FF      		db	0ffh
0EF7  FF      		db	0ffh
0EF8  FF      		db	0ffh
0EF9  FF      		db	0ffh
0EFA  FF      		db	0ffh
0EFB  FF      		db	0ffh
0EFC  FF      		db	0ffh
0EFD  FF      		db	0ffh
0EFE  FF      		db	0ffh
0EFF  FF      		db	0ffh
0F00  FF      		db	0ffh
0F01  FF      		db	0ffh
0F02  FF      		db	0ffh
0F03  FF      		db	0ffh
0F04  FF      		db	0ffh
0F05  FF      		db	0ffh
0F06  FF      		db	0ffh
0F07  FF      		db	0ffh
0F08  FF      		db	0ffh
0F09  FF      		db	0ffh
0F0A  FF      		db	0ffh
0F0B  FF      		db	0ffh
0F0C  FF      		db	0ffh
0F0D  FF      		db	0ffh
0F0E  FF      		db	0ffh
0F0F  FF      		db	0ffh
0F10  FF      		db	0ffh
0F11  FF      		db	0ffh
0F12  FF      		db	0ffh
0F13  FF      		db	0ffh
0F14  FF      		db	0ffh
0F15  FF      		db	0ffh
0F16  FF      		db	0ffh
0F17  FF      		db	0ffh
0F18  FF      		db	0ffh
0F19  FF      		db	0ffh
0F1A  FF      		db	0ffh
0F1B  FF      		db	0ffh
0F1C  FF      		db	0ffh
0F1D  FF      		db	0ffh
0F1E  FF      		db	0ffh
0F1F  FF      		db	0ffh
0F20  FF      		db	0ffh
0F21  FF      		db	0ffh
0F22  FF      		db	0ffh
0F23  FF      		db	0ffh
0F24  FF      		db	0ffh
0F25  FF      		db	0ffh
0F26  FF      		db	0ffh
0F27  FF      		db	0ffh
0F28  FF      		db	0ffh
0F29  FF      		db	0ffh
0F2A  FF      		db	0ffh
0F2B  FF      		db	0ffh
0F2C  FF      		db	0ffh
0F2D  FF      		db	0ffh
0F2E  FF      		db	0ffh
0F2F  FF      		db	0ffh
0F30  FF      		db	0ffh
0F31  FF      		db	0ffh
0F32  FF      		db	0ffh
0F33  FF      		db	0ffh
0F34  FF      		db	0ffh
0F35  FF      		db	0ffh
0F36  FF      		db	0ffh
0F37  FF      		db	0ffh
0F38  FF      		db	0ffh
0F39  FF      		db	0ffh
0F3A  FF      		db	0ffh
0F3B  FF      		db	0ffh
0F3C  FF      		db	0ffh
0F3D  FF      		db	0ffh
0F3E  FF      		db	0ffh
0F3F  FF      		db	0ffh
0F40  FF      		db	0ffh
0F41  FF      		db	0ffh
0F42  FF      		db	0ffh
0F43  FF      		db	0ffh
0F44  FF      		db	0ffh
0F45  FF      		db	0ffh
0F46  FF      		db	0ffh
0F47  FF      		db	0ffh
0F48  FF      		db	0ffh
0F49  FF      		db	0ffh
0F4A  FF      		db	0ffh
0F4B  FF      		db	0ffh
0F4C  FF      		db	0ffh
0F4D  FF      		db	0ffh
0F4E  FF      		db	0ffh
0F4F  FF      		db	0ffh
0F50  FF      		db	0ffh
0F51  FF      		db	0ffh
0F52  FF      		db	0ffh
0F53  FF      		db	0ffh
0F54  FF      		db	0ffh
0F55  FF      		db	0ffh
0F56  FF      		db	0ffh
0F57  FF      		db	0ffh
0F58  FF      		db	0ffh
0F59  FF      		db	0ffh
0F5A  FF      		db	0ffh
0F5B  FF      		db	0ffh
0F5C  FF      		db	0ffh
0F5D  FF      		db	0ffh
0F5E  FF      		db	0ffh
0F5F  FF      		db	0ffh
0F60  FF      		db	0ffh
0F61  FF      		db	0ffh
0F62  FF      		db	0ffh
0F63  FF      		db	0ffh
0F64  FF      		db	0ffh
0F65  FF      		db	0ffh
0F66  FF      		db	0ffh
0F67  FF      		db	0ffh
0F68  FF      		db	0ffh
0F69  FF      		db	0ffh
0F6A  FF      		db	0ffh
0F6B  FF      		db	0ffh
0F6C  FF      		db	0ffh
0F6D  FF      		db	0ffh
0F6E  FF      		db	0ffh
0F6F  FF      		db	0ffh
0F70  FF      		db	0ffh
0F71  FF      		db	0ffh
0F72  FF      		db	0ffh
0F73  FF      		db	0ffh
0F74  FF      		db	0ffh
0F75  FF      		db	0ffh
0F76  FF      		db	0ffh
0F77  FF      		db	0ffh
0F78  FF      		db	0ffh
0F79  FF      		db	0ffh
0F7A  FF      		db	0ffh
0F7B  FF      		db	0ffh
0F7C  FF      		db	0ffh
0F7D  FF      		db	0ffh
0F7E  FF      		db	0ffh
0F7F  FF      		db	0ffh
0F80  FF      		db	0ffh
0F81  FF      		db	0ffh
0F82  FF      		db	0ffh
0F83  FF      		db	0ffh
0F84  FF      		db	0ffh
0F85  FF      		db	0ffh
0F86  FF      		db	0ffh
0F87  FF      		db	0ffh
0F88  FF      		db	0ffh
0F89  FF      		db	0ffh
0F8A  FF      		db	0ffh
0F8B  FF      		db	0ffh
0F8C  FF      		db	0ffh
0F8D  FF      		db	0ffh
0F8E  FF      		db	0ffh
0F8F  FF      		db	0ffh
0F90  FF      		db	0ffh
0F91  FF      		db	0ffh
0F92  FF      		db	0ffh
0F93  FF      		db	0ffh
0F94  FF      		db	0ffh
0F95  FF      		db	0ffh
0F96  FF      		db	0ffh
0F97  FF      		db	0ffh
0F98  FF      		db	0ffh
0F99  FF      		db	0ffh
0F9A  FF      		db	0ffh
0F9B  FF      		db	0ffh
0F9C  FF      		db	0ffh
0F9D  FF      		db	0ffh
0F9E  FF      		db	0ffh
0F9F  FF      		db	0ffh
0FA0  FF      		db	0ffh
0FA1  FF      		db	0ffh
0FA2  FF      		db	0ffh
0FA3  FF      		db	0ffh
0FA4  FF      		db	0ffh
0FA5  FF      		db	0ffh
0FA6  FF      		db	0ffh
0FA7  FF      		db	0ffh
0FA8  FF      		db	0ffh
0FA9  FF      		db	0ffh
0FAA  FF      		db	0ffh
0FAB  FF      		db	0ffh
0FAC  FF      		db	0ffh
0FAD  FF      		db	0ffh
0FAE  FF      		db	0ffh
0FAF  FF      		db	0ffh
0FB0  FF      		db	0ffh
0FB1  FF      		db	0ffh
0FB2  FF      		db	0ffh
0FB3  FF      		db	0ffh
0FB4  FF      		db	0ffh
0FB5  FF      		db	0ffh
0FB6  FF      		db	0ffh
0FB7  FF      		db	0ffh
0FB8  FF      		db	0ffh
0FB9  FF      		db	0ffh
0FBA  FF      		db	0ffh
0FBB  FF      		db	0ffh
0FBC  FF      		db	0ffh
0FBD  FF      		db	0ffh
0FBE  FF      		db	0ffh
0FBF  FF      		db	0ffh
0FC0  FF      		db	0ffh
0FC1  FF      		db	0ffh
0FC2  FF      		db	0ffh
0FC3  FF      		db	0ffh
0FC4  FF      		db	0ffh
0FC5  FF      		db	0ffh
0FC6  FF      		db	0ffh
0FC7  FF      		db	0ffh
0FC8  FF      		db	0ffh
0FC9  FF      		db	0ffh
0FCA  FF      		db	0ffh
0FCB  FF      		db	0ffh
0FCC  FF      		db	0ffh
0FCD  FF      		db	0ffh
0FCE  FF      		db	0ffh
0FCF  FF      		db	0ffh
0FD0  FF      		db	0ffh
0FD1  FF      		db	0ffh
0FD2  FF      		db	0ffh
0FD3  FF      		db	0ffh
0FD4  FF      		db	0ffh
0FD5  FF      		db	0ffh
0FD6  FF      		db	0ffh
0FD7  FF      		db	0ffh
0FD8  FF      		db	0ffh
0FD9  FF      		db	0ffh
0FDA  FF      		db	0ffh
0FDB  FF      		db	0ffh
0FDC  FF      		db	0ffh
0FDD  FF      		db	0ffh
0FDE  FF      		db	0ffh
0FDF  FF      		db	0ffh
0FE0  FF      		db	0ffh
0FE1  FF      		db	0ffh
0FE2  FF      		db	0ffh
0FE3  FF      		db	0ffh
0FE4  FF      		db	0ffh
0FE5  FF      		db	0ffh
0FE6  FF      		db	0ffh
0FE7  FF      		db	0ffh
0FE8  FF      		db	0ffh
0FE9  FF      		db	0ffh
0FEA  FF      		db	0ffh
0FEB  FF      		db	0ffh
0FEC  FF      		db	0ffh
0FED  FF      		db	0ffh
0FEE  FF      		db	0ffh
0FEF  FF      		db	0ffh
0FF0  FF      		db	0ffh
0FF1  FF      		db	0ffh
0FF2  FF      		db	0ffh
0FF3  FF      		db	0ffh
0FF4  FF      		db	0ffh
0FF5  FF      		db	0ffh
0FF6  FF      		db	0ffh
0FF7  FF      		db	0ffh
0FF8  FF      		db	0ffh
0FF9  FF      		db	0ffh
0FFA  FF      		db	0ffh
0FFB  FF      		db	0ffh
0FFC  FF      		db	0ffh
0FFD  FF      		db	0ffh
0FFE  FF      		db	0ffh
0FFF  FF      		db	0ffh
		
		; RAM used...
FF00          		org	0ff00h
FF00          	addr0:	ds	2
FF02          	addr1:	ds	2
FF04          	line:	ds	64
		
FF44          		end



Statistics:

     4	passes
     0	jr promotions
   234	symbols
  4096	bytes

  1809	macro calls
  3775	macro bytes
     0	invented symbols
