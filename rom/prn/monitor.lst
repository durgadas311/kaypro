		; serial-port ROM monitor/boot for debugging Kaypro.
		; Uses "aux serial" a.k.a "Serial Printer" port.
		
0010          	VERN	equ	010h	; ROM version
		
1000          	romsiz	equ	1000h	; minimum space for ROM
		
			maclib	z80
**** z80.lib ****
**** monitor.asm ****
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
			$*macro
		
000D          	CR	equ	13
000A          	LF	equ	10
0003          	CTLC	equ	3
0007          	BEL	equ	7
0009          	TAB	equ	9
0008          	BS	equ	8
001B          	ESC	equ	27
0000          	TRM	equ	0
007F          	DEL	equ	127
		
		; WD1943 at 5.0688MHz...
000E          	B9600	equ	0eh
		
0004          	sio1	equ	04h	; "serial data", "keyboard"
000C          	sio2	equ	0ch	; "serial printer", "modem"
0000          	brd1	equ	00h
0008          	brd2	equ	08h
		
0000          	sioA	equ	00h	; offsets
0001          	sioB	equ	01h
		
0000          	sioD	equ	00h	; offsets
0002          	sioC	equ	02h
		
		; Choose Z80SIO port to use...
0004          	condat	equ	sio1+sioA+sioD
0006          	conctl	equ	sio1+sioA+sioC
0000          	conbrr	equ	brd1
		
0000          	stack	equ	00000h	; stack at top of memory (wrapped)
		
		; Start of ROM code
0000          		org	00000h
0008          	rst0e	equ	$+8
0000  C36A00  		jmp	init
0003  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0010          	rst1e	equ	$+8
0008  C34B00  	rst1:	jmp	swtrap
000B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0018          	rst2e	equ	$+8
0010  C34B00  	rst2:	jmp	swtrap
0013  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0020          	rst3e	equ	$+8
0018  C34B00  	rst3:	jmp	swtrap
001B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0028          	rst4e	equ	$+8
0020  C34B00  	rst4:	jmp	swtrap
0023  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0030          	rst5e	equ	$+8
0028  C34B00  	rst5:	jmp	swtrap
002B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0038          	rst6e	equ	$+8
0030  C34B00  	rst6:	jmp	swtrap
0033  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0040          	rst7e	equ	$+8
0038  C34B00  	rst7:	jmp	swtrap
003B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
			; NMI not a problem?
		
0040  0D0A2A2A	swt:	db	CR,LF,'*** RST ',TRM
      2A205253
      542000
		
004B  F3      	swtrap:	di		; try to recover return address...
004C  D1      		pop	d	; should be caller of RST...
004D  310000  		lxi	sp,stack
0050  D5      		push	d	; not needed?
0051  214000  		lxi	h,swt
0054  CDC904  		call	msgprt
0057  D1      		pop	d
0058  CDA004  		call	taddr
005B  CDBF04  		call	crlf
			; TODO: print address, etc...
005E  C3CA00  		jmp	debug
		
0061  18      	sioini:	db	18h	; reset
0062  0444    		db	4,044h	;
0064  03C1    		db	3,0c1h	;
0066  05E8    		db	5,0e8h	;
0068  0100    		db	1,000h	;
0009          	siolen	equ	$-sioini
		
		; ROM start point - initialize everything
		; We know we have 64K RAM...
006A  F3      	init:	di
006B  310000  		lxi	sp,stack
		
			; init serial port
006E  3E0E    		mvi	a,B9600
0070  D300    		out	conbrr
0072  216100  		lxi	h,sioini
0075  0E06    		mvi	c,conctl
0077  0609    		mvi	b,siolen
0079          		outir
0079  EDB3    		DB	0EDH,0B3H
		
007B  21AD00  		lxi	h,signon
007E  CDC904  		call	msgprt
			; save registers on stack, for debugger access...
0081  C3CA00  		jmp	debug
		
0084          	belout:
0084  0E07    		mvi	c,BEL
		; Output char to console
		; C=char
0086          	conout:
0086  DB06    		in	conctl
0088  E604    		ani	00000100b
008A          		jrz	conout
008A  28FA    		DB	28H,conout-$-1
008C  79      		mov	a,c
008D  D304    		out	condat
008F  C9      		ret
		
0090  0D0A3A20	prompt:	db	CR,LF,': ',TRM
      00
		
		; Get char from console
		; Returns: A=char, stripped
0095  DB06    	conin:	in	conctl
0097  E601    		ani	00000001b
0099          		jrz	conin
0099  28FA    		DB	28H,conin-$-1
009B  DB04    		in	condat
009D  E67F    		ani	07fh
009F  C9      		ret
		
		; Get char from console, toupper and echo
00A0          	conine:
00A0  CD9500  		call	conin
00A3  CDE404  		call	toupper
00A6  F5      		push	psw
00A7  4F      		mov	c,a
00A8  CD8600  		call	conout
00AB  F1      		pop	psw
00AC  C9      		ret
		
00AD  0D0A4B61	signon:	db	CR,LF,'Kaypro Monitor v'
      7970726F
      204D6F6E
      69746F72
      2076
00BF  312E30  	vernum:	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
00C2  0D0A00  		db	CR,LF,TRM
		
00C5  0D0A073F	errm:	db	CR,LF,BEL,'?',TRM
      00
		
		*********************************************************
		**  Debug mode
		*********************************************************
		
00CA          	debug:
00CA  310000  	cilp:	lxi	sp,stack
00CD  21CA00  		lxi	h,cilp		;setup return address
00D0  E5      		push	h
00D1  219000  		lxi	h,prompt	;prompt for a command
00D4  CDC904  		call	msgprt
00D7  CDED04  		call	linein		;wait for command line to be entered
00DA  1104FF  		lxi	d,line
00DD  CD3B05  		call	char		;get first character
00E0  C8      		rz			;ignore line if it is empty
00E1  21FB00  		lxi	h,comnds	;search table for command character
00E4  0609    		mvi	b,ncmnds	;(number of commands)
00E6  BE      	cci0:	cmp	m		;search command table
00E7  23      		inx	h
00E8          		jrz	gotocmd		;command was found, execute it
00E8  280A    		DB	28H,gotocmd-$-1
00EA  23      		inx	h		;step past routine address
00EB  23      		inx	h
00EC          		djnz	cci0		;loop untill all valid commands are checked
00EC  10F8    		DB	10H,cci0-$-1
00EE  21C500  	error:	lxi	h,errm		;if command unknown, beep and re-prompt
00F1  C3C904  		jmp	msgprt
		
00F4          	gotocmd:
00F4  D5      		push	d		;save command line buffer pointer
00F5  5E      		mov	e,m		;get command routine address
00F6  23      		inx	h
00F7  56      		mov	d,m		;DE = routine address
00F8  EB      		xchg			;HL = routine address
00F9  D1      		pop	d		;restore buffer pointer
00FA  E9      		pchl			;jump to command routine
		
		; All commands are started with DE=next char in line buffer
00FB          	comnds:
00FB  3F      		db	'?'
00FC  6E02    		dw	Qcomnd
00FE  44      		db	'D'
00FF  1603    		dw	Dcomnd
0101  53      		db	'S'
0102  7C03    		dw	Scomnd
0104  47      		db	'G'
0105  E403    		dw	Gcomnd
0107  4D      		db	'M'
0108  7502    		dw	Mcomnd
010A  46      		db	'F'
010B  D602    		dw	Fcomnd
010D  49      		db	'I'
010E  1C04    		dw	Icomnd
0110  4F      		db	'O'
0111  6E04    		dw	Ocomnd
0113  56      		db	'V'
0114  9A04    		dw	Vcomnd
0009          	ncmnds	equ	($-comnds)/3
		
		*********************************************************
		**  Command subroutines
		*********************************************************
		
0116          	menu:
0116  0D0A4420		db	CR,LF,'D <start> <end> - display memory in HEX'
      3C737461
      72743E20
      3C656E64
      3E202D20
      64697370
      6C617920
      6D656D6F
      72792069
      6E204845
      58
013F  0D0A5320		db	CR,LF,'S <start> - set/view memory'
      3C737461
      72743E20
      2D207365
      742F7669
      6577206D
      656D6F72
      79
015C  0D0A2020		db	CR,LF,'    (CR) = skip fwd, ''-'' = skip bkwd, ''.'' = done'
      20202843
      5229203D
      20736B69
      70206677
      642C2027
      2D27203D
      20736B69
      7020626B
      77642C20
      272E2720
      3D20646F
      6E65
018E  0D0A4720		db	CR,LF,'G <start> - go to address'
      3C737461
      72743E20
      2D20676F
      20746F20
      61646472
      657373
01A9  0D0A4620		db	CR,LF,'F <start> <end> <data> - fill memory'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6174613E
      202D2066
      696C6C20
      6D656D6F
      7279
01CF  0D0A4D20		db	CR,LF,'M <start> <end> <dest> - Move data'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6573743E
      202D204D
      6F766520
      64617461
01F3  0D0A4920		db	CR,LF,'I <port> [num] - Input from port'
      3C706F72
      743E205B
      6E756D5D
      202D2049
      6E707574
      2066726F
      6D20706F
      7274
0215  0D0A4F20		db	CR,LF,'O <port> <value> [...] - Output to port'
      3C706F72
      743E203C
      76616C75
      653E205B
      2E2E2E5D
      202D204F
      75747075
      7420746F
      20706F72
      74
023E  0D0A5620		db	CR,LF,'V - Show ROM version'
      2D205368
      6F772052
      4F4D2076
      65727369
      6F6E
0254  0D0A5E43		db	CR,LF,'^C aborts command entry'
      2061626F
      72747320
      636F6D6D
      616E6420
      656E7472
      79
026D  00      		db	TRM
		
026E          	Qcomnd:
026E  211601  		lxi	h,menu
0271  CDC904  		call	msgprt
0274  C9      		ret
		
0275  CD4705  	Mcomnd:	call	getaddr
0278  DAEE00  		jc	error
027B          		bit	7,b
027B  CB78    		DB	0CBH,7*8+b+40H
027D  C2EE00  		jnz	error
0280  2200FF  		shld	addr0
0283  CD4705  		call	getaddr
0286  DAEE00  		jc	error
0289          		bit	7,b
0289  CB78    		DB	0CBH,7*8+b+40H
028B  C2EE00  		jnz	error
028E  2202FF  		shld	addr1
0291  CD4705  		call	getaddr
0294  DAEE00  		jc	error
0297          		bit	7,b
0297  CB78    		DB	0CBH,7*8+b+40H
0299  C2EE00  		jnz	error
029C  EB      		xchg
029D          		lbcd	addr0
029D  ED4B    		DB	0EDH,4BH
029F  00FF    		DW	addr0
02A1  2A02FF  		lhld	addr1
02A4  B7      		ora	a
02A5          		dsbc	b
02A5  ED42    		DB	0EDH,b*8+42H
02A7  DAEE00  		jc	error
02AA  23      		inx	h
02AB  4D      		mov	c,l
02AC  44      		mov	b,h
02AD  D5      		push	d
02AE  EB      		xchg
02AF  09      		dad	b
02B0  D1      		pop	d
02B1  DAEE00  		jc	error
02B4  2A02FF  		lhld	addr1
02B7  CDDE04  		call	check
02BA  DAD002  		jc	mc0
02BD  2A00FF  		lhld	addr0
02C0  CDDE04  		call	check
02C3  D2D002  		jnc	mc0
02C6  2A02FF  		lhld	addr1
02C9  EB      		xchg
02CA  09      		dad	b
02CB  2B      		dcx	h
02CC  EB      		xchg
02CD          		lddr
02CD  EDB8    		DB	0EDH,0B8H
02CF  C9      		ret
02D0  2A00FF  	mc0:	lhld	addr0
02D3          		ldir
02D3  EDB0    		DB	0EDH,0B0H
02D5  C9      		ret
02D6          	Fcomnd:
02D6  CD4705  		call	getaddr ;get address to start at
02D9  DAEE00  		jc	error	;error if non-hex character
02DC          		bit	7,b	;test for no address (different from 0000)
02DC  CB78    		DB	0CBH,7*8+b+40H
02DE  C2EE00  		jnz	error	;error if no address was entered
02E1  2200FF  		shld	addr0	;save starting address
02E4  CD4705  		call	getaddr ;get stop address
02E7  DAEE00  		jc	error	;error if non-hex character
02EA          		bit	7,b	;test for no entry
02EA  CB78    		DB	0CBH,7*8+b+40H
02EC  C2EE00  		jnz	error	;error if no stop address
02EF  2202FF  		shld	addr1	;save stop address
02F2  CD4705  		call	getaddr ;get fill data
02F5  DAEE00  		jc	error	;error if non-hex character
02F8          		bit	7,b	;test for no entry
02F8  CB78    		DB	0CBH,7*8+b+40H
02FA  C2EE00  		jnz	error	;error if no fill data
02FD  7C      		mov	a,h
02FE  B7      		ora	a
02FF  C2EE00  		jnz	error
0302  4D      		mov	c,l	;(C)=fill data
0303  2A02FF  		lhld	addr1	;get stop address
0306          		lded	addr0	;get start address
0306  ED5B    		DB	0EDH,5BH
0308  00FF    		DW	addr0
030A  79      	fc0:	mov	a,c	;
030B  12      		stax	d	;put byte in memory
030C  13      		inx	d	;step to next byte
030D  7A      		mov	a,d	;
030E  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
030F  C8      		rz		;
0310  CDDE04  		call	check	;test for past stop address
0313  D8      		rc	;quit if past stop address
0314          		jr	fc0
0314  18F4    		DB	18H,fc0-$-1
		
0316          	Dcomnd:		;display memory
0316  CD4705  		call	getaddr ;get address to start at
0319  DAEE00  		jc	error	;error if non-hex character
031C          		bit	7,b	;test for no address (different from 0000)
031C  CB78    		DB	0CBH,7*8+b+40H
031E  C2EE00  		jnz	error	;error if no address was entered
0321  2200FF  		shld	addr0	;save starting address
0324  CD4705  		call	getaddr ;get stop address
0327  DAEE00  		jc	error	;error if non-hex character
032A          		bit	7,b	;test for no entry
032A  CB78    		DB	0CBH,7*8+b+40H
032C  C2EE00  		jnz	error	;error if no stop address
032F          		lded	addr0	;get start address into (DE)
032F  ED5B    		DB	0EDH,5BH
0331  00FF    		DW	addr0
0333  CDBF04  	dis0:	call	crlf	;start on new line
0336  CDA004  		call	taddr	;print current address
0339  CDBA04  		call	space	;delimit it from data
033C  0610    		mvi	b,16	;display 16 bytes on each line
033E  1A      	dis1:	ldax	d	;get byte to display
033F  13      		inx	d	;step to next byte
0340  CDA504  		call	hexout	;display this byte in HEX
0343  CDBA04  		call	space	;delimit it from others
0346  7A      		mov	a,d
0347  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
0348          		jrz	dis2
0348  2807    		DB	28H,dis2-$-1
034A  CDDE04  		call	check	;test for past stop address
034D          		jrc	dis2	;quit if past stop address
034D  3802    		DB	38H,dis2-$-1
034F          		djnz	dis1	;else do next byte on this line
034F  10ED    		DB	10H,dis1-$-1
0351  CDBA04  	dis2:	call	space	;delimit it from data
0354  CDBA04  		call	space
0357          		lded	addr0
0357  ED5B    		DB	0EDH,5BH
0359  00FF    		DW	addr0
035B  0610    		mvi	b,16	;display 16 bytes on each line
035D  1A      	dis3:	ldax	d	;get byte to display
035E  13      		inx	d	;step to next byte
035F  0E2E    		mvi	c,'.'
0361  FE20    		cpi	' '
0363          		jrc	dis4
0363  3805    		DB	38H,dis4-$-1
0365  FE7F    		cpi	'~'+1
0367          		jrnc	dis4
0367  3001    		DB	30H,dis4-$-1
0369  4F      		mov	c,a
036A  CD8600  	dis4:	call	conout
036D  7A      		mov	a,d
036E  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
036F  C8      		rz
0370  CDDE04  		call	check	;test for past stop address
0373  D8      		rc	;quit if past stop address
0374          		djnz	dis3	;else do next byte on this line
0374  10E7    		DB	10H,dis3-$-1
0376          		sded	addr0
0376  ED53    		DB	0EDH,53H
0378  00FF    		DW	addr0
037A          		jr	dis0	;when line is finished, start another
037A  18B7    		DB	18H,dis0-$-1
		
037C          	Scomnd: 		;substitute (set) memory
037C  CD4705  		call	getaddr ;get address to start substitution at
037F  DAEE00  		jc	error	;error if non-hex character
0382          		bit	7,b	;test for no entry
0382  CB78    		DB	0CBH,7*8+b+40H
0384  C2EE00  		jnz	error	;error if no address
0387  EB      		xchg		;put address in (DE)
0388  CDBF04  	sb1:	call	crlf	;start on new line
038B  CDA004  		call	taddr	;print address
038E  CDBA04  		call	space	;and delimit it
0391  1A      		ldax	d	;get current value of byte
0392  CDA504  		call	hexout	;and display it
0395  CDBA04  		call	space	;delimit it from user's (posible) entry
0398  0600    		mvi	b,0	;zero accumilator for user's entry
039A  CDA000  	sb2:	call	conine	;get user's first character
039D  FE0D    		cpi	CR	;if CR then skip to next byte
039F          		jrz	foward
039F  2833    		DB	28H,foward-$-1
03A1  FE20    		cpi	' '	;or if Space then skip to next
03A3          		jrz	foward
03A3  282F    		DB	28H,foward-$-1
03A5  FE2D    		cpi	'-'	;if Minus then step back to previous address
03A7          		jrz	bakwrd
03A7  282E    		DB	28H,bakwrd-$-1
03A9  FE2E    		cpi	'.'	;if Period then stop substitution
03AB  C8      		rz
03AC  CD7205  		call	hexcon	;if none of the above, should be HEX digit
03AF          		jrc	error0	;error if not
03AF  3829    		DB	38H,error0-$-1
03B1          		jr	sb3	;start accumilating HEX digits
03B1  1805    		DB	18H,sb3-$-1
03B3  CD7205  	sb0:	call	hexcon	;test for HEX digit
03B6          		jrc	error1	;error if not HEX
03B6  3827    		DB	38H,error1-$-1
03B8          	sb3:	slar	b	;roll accumilator to receive new digit
03B8  CB20    		DB	0CBH, 20H + b
03BA          		slar	b
03BA  CB20    		DB	0CBH, 20H + b
03BC          		slar	b
03BC  CB20    		DB	0CBH, 20H + b
03BE          		slar	b
03BE  CB20    		DB	0CBH, 20H + b
03C0  B0      		ora	b	;merge in new digit
03C1  47      		mov	b,a
03C2  CDA000  	sb4:	call	conine	;get next character
03C5  FE0D    		cpi	CR	;if CR then put existing byte into memory
03C7          		jrz	putbyte ;  and step to next.
03C7  2809    		DB	28H,putbyte-$-1
03C9  FE2E    		cpi	'.'
03CB  C8      		rz
03CC  FE7F    		cpi	del	;if DEL then restart at same address
03CE          		jrz	sb1
03CE  28B8    		DB	28H,sb1-$-1
03D0          		jr	sb0	;else continue entering hex digits
03D0  18E1    		DB	18H,sb0-$-1
03D2          	putbyte:
03D2  78      		mov	a,b	;store accumilated byte in memory
03D3  12      		stax	d
03D4          	foward:
03D4  13      		inx	d	;step to next location
03D5          		jr	sb1	;and allow substitution there
03D5  18B1    		DB	18H,sb1-$-1
		
03D7          	bakwrd:
03D7  1B      		dcx	d	;move address backward one location
03D8          		jr	sb1
03D8  18AE    		DB	18H,sb1-$-1
		
03DA  CD8400  	error0:	call	belout	;user's entry was not valid, beep and continue
03DD          		jr	sb2
03DD  18BB    		DB	18H,sb2-$-1
03DF  CD8400  	error1:	call	belout	;same as above but for different section of routine
03E2          		jr	sb4
03E2  18DE    		DB	18H,sb4-$-1
		
03E4          	Gcomnd: 		;jump to address given by user
03E4  CD4705  		call	getaddr ;get address to jump to
03E7  DAEE00  		jc	error	;error if non-hex character
03EA          		bit	7,b	;test for no entry
03EA  CB78    		DB	0CBH,7*8+b+40H
03EC  C2EE00  		jnz	error	;error if no address entered
03EF  CDBF04  		call	crlf	;on new line,
03F2  0E47    		mvi	c,'G'	;display "GO aaaa?" to ask
03F4  CD8600  		call	conout	;user to verify that we should
03F7  0E4F    		mvi	c,'O'	;jump to this address (in case user
03F9  CD8600  		call	conout	;made a mistake we should not blindly
03FC  CDBA04  		call	space	;commit suicide)
03FF  EB      		xchg
0400  CDA004  		call	taddr
0403  CDBA04  		call	space
0406  0E3F    		mvi	c,'?'
0408  CD8600  		call	conout
040B  CDA000  		call	conine	;wait for user to type "Y" to
040E  FE59    		cpi	'Y'	;indicate that we should jump.
0410  C0      		rnz		;abort if response was not "Y"
0411  EB      		xchg
0412  E9      		pchl		;else jump to address
		
0413  0D0A496E	inpms:	db	CR,LF,'Input ',TRM
      70757420
      00
041C          	Icomnd:
041C  CD4705  		call	getaddr ;get port address, ignore extra MSDs
041F  DAEE00  		jc	error	;error if non-hex character
0422          		bit	7,b	;test for no entry
0422  CB78    		DB	0CBH,7*8+b+40H
0424  C2EE00  		jnz	error	;error if no address entered
0427  E5      		push	h	; save port
0428  CD4705  		call	getaddr	; hex number of inputs to do
042B  DAEE00  		jc	error
042E          		bit	7,b
042E  CB78    		DB	0CBH,7*8+b+40H
0430          		jrz	ic0
0430  2803    		DB	28H,ic0-$-1
0432  210100  		lxi	h,1
0435          	ic0:
0435  E3      		xthl		; save count
0436  E5      		push	h	; re-save port
0437  211304  		lxi	h,inpms
043A  CDC904  		call	msgprt
043D  E1      		pop	h
043E  E5      		push	h
043F  7D      		mov	a,l
0440  CDA504  		call	hexout
0443  CDBA04  		call	space
0446  0E3D    		mvi	c,'='
0448  CD8600  		call	conout
			; "Input XX ="
044B  C1      		pop	b	; port to BC
044C  E1      		pop	h	; count to HL (L)
044D  260D    		mvi	h,16-3
044F  0600    		mvi	b,0	; safety
0451  C5      		push	b	; C gets trashed by conout
0452          	ic1:
0452  CDBA04  		call	space
0455  C1      		pop	b
0456  C5      		push	b
0457          		inp	a
0457  ED78    		DB	0EDH,a*8+40H
0459  CDA504  		call	hexout
045C  2D      		dcr	l	; assume <= 256
045D          		jrz	ic2
045D  280A    		DB	28H,ic2-$-1
045F  25      		dcr	h	; col count
0460          		jrnz	ic1
0460  20F0    		DB	20H,ic1-$-1
0462  CDBF04  		call	crlf
0465  2610    		mvi	h,16
0467          		jr	ic1
0467  18E9    		DB	18H,ic1-$-1
0469          	ic2:
0469  C1      		pop	b	; fix stack
046A  CDBF04  		call	crlf
046D  C9      		ret
		
		; TODO: no feedback?
046E          	Ocomnd:
046E  CD4705  		call	getaddr ;get port address, ignore extra MSDs
0471  DAEE00  		jc	error	;error if non-hex character
0474          		bit	7,b	;test for no entry
0474  CB78    		DB	0CBH,7*8+b+40H
0476  C2EE00  		jnz	error	;error if no address entered
0479  2600    		mvi	h,0	; safety
047B  E5      		push	h	; save port
047C  CD4705  		call	getaddr ;get value, ignore extra MSDs
047F  DAEE00  		jc	error	;error if non-hex character
0482          		bit	7,b	;test for no entry
0482  CB78    		DB	0CBH,7*8+b+40H
0484  C2EE00  		jnz	error	;error if no value entered
0487  CDBF04  		call	crlf
048A          	oc0:		; L has byte to output...
048A  C1      		pop	b	; port
048B  C5      		push	b
048C          		outp	l
048C  ED69    		DB	0EDH,l*8+41H
048E  CD4705  		call	getaddr ;get value, ignore extra MSDs
0491  DAEE00  		jc	error	;error if non-hex character
					;NOTE: some output has been sent
0494          		bit	7,b	;test for no entry
0494  CB78    		DB	0CBH,7*8+b+40H
0496          		jrz	oc0	;still more to send
0496  28F2    		DB	28H,oc0-$-1
0498  E1      		pop	h	; discard port
0499  C9      		ret
		
049A          	Vcomnd:
049A  21AD00  		lxi	h,signon
049D  C3C904  		jmp	msgprt
		
		*********************************************************
		**  Utility subroutines
		*********************************************************
		
04A0  7A      	taddr:	mov	a,d	;display (DE) at console in HEX
04A1  CDA504  		call	hexout	;print HI byte in HEX
04A4  7B      		mov	a,e	;now do LO byte
04A5  F5      	hexout:	push	psw	;output (A) to console in HEX
04A6  07      		rlc		;get HI digit in usable (LO) position
04A7  07      		rlc
04A8  07      		rlc
04A9  07      		rlc
04AA  CDAE04  		call	nible	;and display it
04AD  F1      		pop	psw	;get LO digit back and display it
04AE  E60F    	nible:	ani	00001111b	;display LO 4 bits of (A) in HEX
04B0  C690    		adi	90h	;algorithm to convert 4-bits to ASCII
04B2  27      		daa
04B3  CE40    		aci	40h
04B5  27      		daa
04B6  4F      		mov	c,a	;display ASCII digit
04B7  C38600  		jmp	conout
		
04BA  0E20    	space:	mvi	c,' '	;send an ASCII blank to console
04BC  C38600  		jmp	conout
		
04BF  0E0D    	crlf:	mvi	c,CR	;send Carriage-Return/Line-Feed to console
04C1  CD8600  		call	conout
04C4  0E0A    		mvi	c,LF
04C6  C38600  		jmp	conout
		
04C9  7E      	msgprt:	mov	a,m	;send string to console, terminated by 00
04CA  B7      		ora	a
04CB  C8      		rz
04CC  4F      		mov	c,a
04CD  CD8600  		call	conout
04D0  23      		inx	h
04D1          		jr	msgprt
04D1  18F6    		DB	18H,msgprt-$-1
		
04D3  7E      	print:	mov	a,m	; BDOS func 9 style msgprt
04D4  FE24    		cpi	'$'
04D6  C8      		rz
04D7  4F      		mov	c,a
04D8  CD8600  		call	conout
04DB  23      		inx	h
04DC          		jr	print
04DC  18F5    		DB	18H,print-$-1
		
04DE  E5      	check:	push	h	;non-destuctive compare HL:DE
04DF  B7      		ora	a
04E0          		dsbc	d
04E0  ED52    		DB	0EDH,d*8+42H
04E2  E1      		pop	h
04E3  C9      		ret
		
		; Convert letters to upper-case
04E4          	toupper:
04E4  FE61    		cpi	'a'
04E6  D8      		rc
04E7  FE7B    		cpi	'z'+1
04E9  D0      		rnc
04EA  E65F    		ani	01011111b
04EC  C9      		ret
		
		; Read a line of text into 'line'
		; End with CR, honor BS
		; Reject all non-printing characters, force toupper
04ED  2104FF  	linein:	lxi	h,line	;get string of characters from console, ending in CR
04F0  CD9500  	li0:	call	conin	;get a character
04F3  FE08    		cpi	BS	;allow BackSpacing
04F5          		jrz	backup
04F5  281D    		DB	28H,backup-$-1
04F7  FE0D    		cpi	CR
04F9          		jrz	li1
04F9  282E    		DB	28H,li1-$-1
04FB  FE03    		cpi	CTLC
04FD          		jrz	liZ
04FD  2830    		DB	28H,liZ-$-1
04FF  FE20    		cpi	' '	;ignore other non-print
0501          		jrc	li0
0501  38ED    		DB	38H,li0-$-1
0503  CDE404  		call	toupper
0506  77      		mov	m,a	;put character in line nuffer
0507  23      		inx	h
0508  4F      		mov	c,a
0509  CD8600  		call	conout	; echo character
050C  7D      		mov	a,l	;else check for pending buffer overflow
050D  D604    		sui	line mod 256
050F  FE40    		cpi	64
0511  C8      		rz		;stop if buffer full
0512          		jr	li0	;if not full, keep getting characters
0512  18DC    		DB	18H,li0-$-1
		
0514  7D      	backup:	mov	a,l	;(destructive) BackSpacing
0515  FE04    		cpi	line mod 256	;test if at beginning of line
0517          		jrz	li0	;can't backspace past start of line
0517  28D7    		DB	28H,li0-$-1
0519  0E08    		mvi	c,bs	;output BS," ",BS to erase character on screen
051B  CD8600  		call	conout	;and put cursor back one position
051E  CDBA04  		call	space
0521  0E08    		mvi	c,bs
0523  CD8600  		call	conout
0526  2B      		dcx	h	;step buffer pointer back one
0527          		jr	li0	;and continue to get characters
0527  18C7    		DB	18H,li0-$-1
		
		; End line input, A=CR
0529  77      	li1:	mov	m,a	; store CR in buffer
052A  0E0D    		mvi	c,CR	;display CR so user knows we got it
052C  C38600  		jmp	conout	;then return to calling routine
		
		; Abort input
052F  0E5E    	liZ:	mvi	c,'^'
0531  CD8600  		call	conout
0534  0E43    		mvi	c,'C'
0536  CD8600  		call	conout
0539  E1      		pop	h	; always OK?
053A  C9      		ret		; return to caller's caller (main debug loop)
		
		; Get next character from line buffer.
		; DE=current pointer within 'line'
		; Returns: ZR=EOL else A=char
053B  7B      	char:	mov	a,e	;remove a character from line buffer,
053C  D604    		sui	line mod 256	;testing for no more characters
053E  D640    		sui	64
0540  C8      		rz		;return [ZR] condition if at end of buffer
0541  1A      		ldax	d
0542  FE0D    		cpi	CR
0544  C8      		rz		;also return [ZR] if at end of line
0545  13      		inx	d	;else step to next character
0546  C9      		ret		;and return [NZ]
		
		; Get HEX value from line buffer
		; Return: CY=error, HL=value, bit7(B)=1 if no input
0547          	getaddr:		;extract address from line buffer (dilimitted by " ")
0547          		setb	7,b	;flag to detect no address entered
0547  CBF8    		DB	0CBH,7*8+b+0C0H
0549  210000  		lxi	h,0
054C  CD3B05  	ga2:	call	char
054F  C8      		rz		;end of buffer/line before a character was found
0550  FE20    		cpi	' '	;skip all leading spaces
0552          		jrnz	ga1	;if not space, then start getting HEX digits
0552  2006    		DB	20H,ga1-$-1
0554          		jr	ga2	;else if space, loop untill not space
0554  18F6    		DB	18H,ga2-$-1
		
0556  CD3B05  	ga0:	call	char
0559  C8      		rz
055A  CD7205  	ga1:	call	hexcon	;start assembling digits into 16 bit accumilator
055D          		jrc	chkdlm	;check if valid delimiter before returning error.
055D  380E    		DB	38H,chkdlm-$-1
055F          		res	7,b	;reset flag
055F  CBB8    		DB	0CBH,7*8+b+80H
0561  D5      		push	d	;save buffer pointer
0562  5F      		mov	e,a
0563  1600    		mvi	d,0
0565  29      		dad	h	;shift "accumilator" left 1 digit
0566  29      		dad	h
0567  29      		dad	h
0568  29      		dad	h
0569  19      		dad	d	;add in new digit
056A  D1      		pop	d	;restore buffer pointer
056B          		jr	ga0	;loop for next digit
056B  18E9    		DB	18H,ga0-$-1
		
056D  FE20    	chkdlm: cpi	' '	;blank is currently the only valid delimiter
056F  C8      		rz
0570  37      		stc
0571  C9      		ret
		
0572          	hexcon: 		;convert ASCII character to HEX digit
0572  FE30    		cpi	'0'	;must be .GE. "0"
0574  D8      		rc
0575  FE3A    		cpi	'9'+1	;and be .LE. "9"
0577          		jrc	ok0	;valid numeral.
0577  3809    		DB	38H,ok0-$-1
0579  FE41    		cpi	'A'	;or .GE. "A"
057B  D8      		rc
057C  FE47    		cpi	'F'+1	;and .LE. "F"
057E  3F      		cmc
057F  D8      		rc		;return [CY] if not valid HEX digit
0580  D607    		sui	'A'-'9'-1	;convert letter
0582  D630    	ok0:	sui	'0'	;convert (numeral) to 0-15 in (A)
0584  C9      		ret
		
			rept	0800h-$
0585  FF      		db	0ffh
0586  FF      		db	0ffh
0587  FF      		db	0ffh
0588  FF      		db	0ffh
0589  FF      		db	0ffh
058A  FF      		db	0ffh
058B  FF      		db	0ffh
058C  FF      		db	0ffh
058D  FF      		db	0ffh
058E  FF      		db	0ffh
058F  FF      		db	0ffh
0590  FF      		db	0ffh
0591  FF      		db	0ffh
0592  FF      		db	0ffh
0593  FF      		db	0ffh
0594  FF      		db	0ffh
0595  FF      		db	0ffh
0596  FF      		db	0ffh
0597  FF      		db	0ffh
0598  FF      		db	0ffh
0599  FF      		db	0ffh
059A  FF      		db	0ffh
059B  FF      		db	0ffh
059C  FF      		db	0ffh
059D  FF      		db	0ffh
059E  FF      		db	0ffh
059F  FF      		db	0ffh
05A0  FF      		db	0ffh
05A1  FF      		db	0ffh
05A2  FF      		db	0ffh
05A3  FF      		db	0ffh
05A4  FF      		db	0ffh
05A5  FF      		db	0ffh
05A6  FF      		db	0ffh
05A7  FF      		db	0ffh
05A8  FF      		db	0ffh
05A9  FF      		db	0ffh
05AA  FF      		db	0ffh
05AB  FF      		db	0ffh
05AC  FF      		db	0ffh
05AD  FF      		db	0ffh
05AE  FF      		db	0ffh
05AF  FF      		db	0ffh
05B0  FF      		db	0ffh
05B1  FF      		db	0ffh
05B2  FF      		db	0ffh
05B3  FF      		db	0ffh
05B4  FF      		db	0ffh
05B5  FF      		db	0ffh
05B6  FF      		db	0ffh
05B7  FF      		db	0ffh
05B8  FF      		db	0ffh
05B9  FF      		db	0ffh
05BA  FF      		db	0ffh
05BB  FF      		db	0ffh
05BC  FF      		db	0ffh
05BD  FF      		db	0ffh
05BE  FF      		db	0ffh
05BF  FF      		db	0ffh
05C0  FF      		db	0ffh
05C1  FF      		db	0ffh
05C2  FF      		db	0ffh
05C3  FF      		db	0ffh
05C4  FF      		db	0ffh
05C5  FF      		db	0ffh
05C6  FF      		db	0ffh
05C7  FF      		db	0ffh
05C8  FF      		db	0ffh
05C9  FF      		db	0ffh
05CA  FF      		db	0ffh
05CB  FF      		db	0ffh
05CC  FF      		db	0ffh
05CD  FF      		db	0ffh
05CE  FF      		db	0ffh
05CF  FF      		db	0ffh
05D0  FF      		db	0ffh
05D1  FF      		db	0ffh
05D2  FF      		db	0ffh
05D3  FF      		db	0ffh
05D4  FF      		db	0ffh
05D5  FF      		db	0ffh
05D6  FF      		db	0ffh
05D7  FF      		db	0ffh
05D8  FF      		db	0ffh
05D9  FF      		db	0ffh
05DA  FF      		db	0ffh
05DB  FF      		db	0ffh
05DC  FF      		db	0ffh
05DD  FF      		db	0ffh
05DE  FF      		db	0ffh
05DF  FF      		db	0ffh
05E0  FF      		db	0ffh
05E1  FF      		db	0ffh
05E2  FF      		db	0ffh
05E3  FF      		db	0ffh
05E4  FF      		db	0ffh
05E5  FF      		db	0ffh
05E6  FF      		db	0ffh
05E7  FF      		db	0ffh
05E8  FF      		db	0ffh
05E9  FF      		db	0ffh
05EA  FF      		db	0ffh
05EB  FF      		db	0ffh
05EC  FF      		db	0ffh
05ED  FF      		db	0ffh
05EE  FF      		db	0ffh
05EF  FF      		db	0ffh
05F0  FF      		db	0ffh
05F1  FF      		db	0ffh
05F2  FF      		db	0ffh
05F3  FF      		db	0ffh
05F4  FF      		db	0ffh
05F5  FF      		db	0ffh
05F6  FF      		db	0ffh
05F7  FF      		db	0ffh
05F8  FF      		db	0ffh
05F9  FF      		db	0ffh
05FA  FF      		db	0ffh
05FB  FF      		db	0ffh
05FC  FF      		db	0ffh
05FD  FF      		db	0ffh
05FE  FF      		db	0ffh
05FF  FF      		db	0ffh
0600  FF      		db	0ffh
0601  FF      		db	0ffh
0602  FF      		db	0ffh
0603  FF      		db	0ffh
0604  FF      		db	0ffh
0605  FF      		db	0ffh
0606  FF      		db	0ffh
0607  FF      		db	0ffh
0608  FF      		db	0ffh
0609  FF      		db	0ffh
060A  FF      		db	0ffh
060B  FF      		db	0ffh
060C  FF      		db	0ffh
060D  FF      		db	0ffh
060E  FF      		db	0ffh
060F  FF      		db	0ffh
0610  FF      		db	0ffh
0611  FF      		db	0ffh
0612  FF      		db	0ffh
0613  FF      		db	0ffh
0614  FF      		db	0ffh
0615  FF      		db	0ffh
0616  FF      		db	0ffh
0617  FF      		db	0ffh
0618  FF      		db	0ffh
0619  FF      		db	0ffh
061A  FF      		db	0ffh
061B  FF      		db	0ffh
061C  FF      		db	0ffh
061D  FF      		db	0ffh
061E  FF      		db	0ffh
061F  FF      		db	0ffh
0620  FF      		db	0ffh
0621  FF      		db	0ffh
0622  FF      		db	0ffh
0623  FF      		db	0ffh
0624  FF      		db	0ffh
0625  FF      		db	0ffh
0626  FF      		db	0ffh
0627  FF      		db	0ffh
0628  FF      		db	0ffh
0629  FF      		db	0ffh
062A  FF      		db	0ffh
062B  FF      		db	0ffh
062C  FF      		db	0ffh
062D  FF      		db	0ffh
062E  FF      		db	0ffh
062F  FF      		db	0ffh
0630  FF      		db	0ffh
0631  FF      		db	0ffh
0632  FF      		db	0ffh
0633  FF      		db	0ffh
0634  FF      		db	0ffh
0635  FF      		db	0ffh
0636  FF      		db	0ffh
0637  FF      		db	0ffh
0638  FF      		db	0ffh
0639  FF      		db	0ffh
063A  FF      		db	0ffh
063B  FF      		db	0ffh
063C  FF      		db	0ffh
063D  FF      		db	0ffh
063E  FF      		db	0ffh
063F  FF      		db	0ffh
0640  FF      		db	0ffh
0641  FF      		db	0ffh
0642  FF      		db	0ffh
0643  FF      		db	0ffh
0644  FF      		db	0ffh
0645  FF      		db	0ffh
0646  FF      		db	0ffh
0647  FF      		db	0ffh
0648  FF      		db	0ffh
0649  FF      		db	0ffh
064A  FF      		db	0ffh
064B  FF      		db	0ffh
064C  FF      		db	0ffh
064D  FF      		db	0ffh
064E  FF      		db	0ffh
064F  FF      		db	0ffh
0650  FF      		db	0ffh
0651  FF      		db	0ffh
0652  FF      		db	0ffh
0653  FF      		db	0ffh
0654  FF      		db	0ffh
0655  FF      		db	0ffh
0656  FF      		db	0ffh
0657  FF      		db	0ffh
0658  FF      		db	0ffh
0659  FF      		db	0ffh
065A  FF      		db	0ffh
065B  FF      		db	0ffh
065C  FF      		db	0ffh
065D  FF      		db	0ffh
065E  FF      		db	0ffh
065F  FF      		db	0ffh
0660  FF      		db	0ffh
0661  FF      		db	0ffh
0662  FF      		db	0ffh
0663  FF      		db	0ffh
0664  FF      		db	0ffh
0665  FF      		db	0ffh
0666  FF      		db	0ffh
0667  FF      		db	0ffh
0668  FF      		db	0ffh
0669  FF      		db	0ffh
066A  FF      		db	0ffh
066B  FF      		db	0ffh
066C  FF      		db	0ffh
066D  FF      		db	0ffh
066E  FF      		db	0ffh
066F  FF      		db	0ffh
0670  FF      		db	0ffh
0671  FF      		db	0ffh
0672  FF      		db	0ffh
0673  FF      		db	0ffh
0674  FF      		db	0ffh
0675  FF      		db	0ffh
0676  FF      		db	0ffh
0677  FF      		db	0ffh
0678  FF      		db	0ffh
0679  FF      		db	0ffh
067A  FF      		db	0ffh
067B  FF      		db	0ffh
067C  FF      		db	0ffh
067D  FF      		db	0ffh
067E  FF      		db	0ffh
067F  FF      		db	0ffh
0680  FF      		db	0ffh
0681  FF      		db	0ffh
0682  FF      		db	0ffh
0683  FF      		db	0ffh
0684  FF      		db	0ffh
0685  FF      		db	0ffh
0686  FF      		db	0ffh
0687  FF      		db	0ffh
0688  FF      		db	0ffh
0689  FF      		db	0ffh
068A  FF      		db	0ffh
068B  FF      		db	0ffh
068C  FF      		db	0ffh
068D  FF      		db	0ffh
068E  FF      		db	0ffh
068F  FF      		db	0ffh
0690  FF      		db	0ffh
0691  FF      		db	0ffh
0692  FF      		db	0ffh
0693  FF      		db	0ffh
0694  FF      		db	0ffh
0695  FF      		db	0ffh
0696  FF      		db	0ffh
0697  FF      		db	0ffh
0698  FF      		db	0ffh
0699  FF      		db	0ffh
069A  FF      		db	0ffh
069B  FF      		db	0ffh
069C  FF      		db	0ffh
069D  FF      		db	0ffh
069E  FF      		db	0ffh
069F  FF      		db	0ffh
06A0  FF      		db	0ffh
06A1  FF      		db	0ffh
06A2  FF      		db	0ffh
06A3  FF      		db	0ffh
06A4  FF      		db	0ffh
06A5  FF      		db	0ffh
06A6  FF      		db	0ffh
06A7  FF      		db	0ffh
06A8  FF      		db	0ffh
06A9  FF      		db	0ffh
06AA  FF      		db	0ffh
06AB  FF      		db	0ffh
06AC  FF      		db	0ffh
06AD  FF      		db	0ffh
06AE  FF      		db	0ffh
06AF  FF      		db	0ffh
06B0  FF      		db	0ffh
06B1  FF      		db	0ffh
06B2  FF      		db	0ffh
06B3  FF      		db	0ffh
06B4  FF      		db	0ffh
06B5  FF      		db	0ffh
06B6  FF      		db	0ffh
06B7  FF      		db	0ffh
06B8  FF      		db	0ffh
06B9  FF      		db	0ffh
06BA  FF      		db	0ffh
06BB  FF      		db	0ffh
06BC  FF      		db	0ffh
06BD  FF      		db	0ffh
06BE  FF      		db	0ffh
06BF  FF      		db	0ffh
06C0  FF      		db	0ffh
06C1  FF      		db	0ffh
06C2  FF      		db	0ffh
06C3  FF      		db	0ffh
06C4  FF      		db	0ffh
06C5  FF      		db	0ffh
06C6  FF      		db	0ffh
06C7  FF      		db	0ffh
06C8  FF      		db	0ffh
06C9  FF      		db	0ffh
06CA  FF      		db	0ffh
06CB  FF      		db	0ffh
06CC  FF      		db	0ffh
06CD  FF      		db	0ffh
06CE  FF      		db	0ffh
06CF  FF      		db	0ffh
06D0  FF      		db	0ffh
06D1  FF      		db	0ffh
06D2  FF      		db	0ffh
06D3  FF      		db	0ffh
06D4  FF      		db	0ffh
06D5  FF      		db	0ffh
06D6  FF      		db	0ffh
06D7  FF      		db	0ffh
06D8  FF      		db	0ffh
06D9  FF      		db	0ffh
06DA  FF      		db	0ffh
06DB  FF      		db	0ffh
06DC  FF      		db	0ffh
06DD  FF      		db	0ffh
06DE  FF      		db	0ffh
06DF  FF      		db	0ffh
06E0  FF      		db	0ffh
06E1  FF      		db	0ffh
06E2  FF      		db	0ffh
06E3  FF      		db	0ffh
06E4  FF      		db	0ffh
06E5  FF      		db	0ffh
06E6  FF      		db	0ffh
06E7  FF      		db	0ffh
06E8  FF      		db	0ffh
06E9  FF      		db	0ffh
06EA  FF      		db	0ffh
06EB  FF      		db	0ffh
06EC  FF      		db	0ffh
06ED  FF      		db	0ffh
06EE  FF      		db	0ffh
06EF  FF      		db	0ffh
06F0  FF      		db	0ffh
06F1  FF      		db	0ffh
06F2  FF      		db	0ffh
06F3  FF      		db	0ffh
06F4  FF      		db	0ffh
06F5  FF      		db	0ffh
06F6  FF      		db	0ffh
06F7  FF      		db	0ffh
06F8  FF      		db	0ffh
06F9  FF      		db	0ffh
06FA  FF      		db	0ffh
06FB  FF      		db	0ffh
06FC  FF      		db	0ffh
06FD  FF      		db	0ffh
06FE  FF      		db	0ffh
06FF  FF      		db	0ffh
0700  FF      		db	0ffh
0701  FF      		db	0ffh
0702  FF      		db	0ffh
0703  FF      		db	0ffh
0704  FF      		db	0ffh
0705  FF      		db	0ffh
0706  FF      		db	0ffh
0707  FF      		db	0ffh
0708  FF      		db	0ffh
0709  FF      		db	0ffh
070A  FF      		db	0ffh
070B  FF      		db	0ffh
070C  FF      		db	0ffh
070D  FF      		db	0ffh
070E  FF      		db	0ffh
070F  FF      		db	0ffh
0710  FF      		db	0ffh
0711  FF      		db	0ffh
0712  FF      		db	0ffh
0713  FF      		db	0ffh
0714  FF      		db	0ffh
0715  FF      		db	0ffh
0716  FF      		db	0ffh
0717  FF      		db	0ffh
0718  FF      		db	0ffh
0719  FF      		db	0ffh
071A  FF      		db	0ffh
071B  FF      		db	0ffh
071C  FF      		db	0ffh
071D  FF      		db	0ffh
071E  FF      		db	0ffh
071F  FF      		db	0ffh
0720  FF      		db	0ffh
0721  FF      		db	0ffh
0722  FF      		db	0ffh
0723  FF      		db	0ffh
0724  FF      		db	0ffh
0725  FF      		db	0ffh
0726  FF      		db	0ffh
0727  FF      		db	0ffh
0728  FF      		db	0ffh
0729  FF      		db	0ffh
072A  FF      		db	0ffh
072B  FF      		db	0ffh
072C  FF      		db	0ffh
072D  FF      		db	0ffh
072E  FF      		db	0ffh
072F  FF      		db	0ffh
0730  FF      		db	0ffh
0731  FF      		db	0ffh
0732  FF      		db	0ffh
0733  FF      		db	0ffh
0734  FF      		db	0ffh
0735  FF      		db	0ffh
0736  FF      		db	0ffh
0737  FF      		db	0ffh
0738  FF      		db	0ffh
0739  FF      		db	0ffh
073A  FF      		db	0ffh
073B  FF      		db	0ffh
073C  FF      		db	0ffh
073D  FF      		db	0ffh
073E  FF      		db	0ffh
073F  FF      		db	0ffh
0740  FF      		db	0ffh
0741  FF      		db	0ffh
0742  FF      		db	0ffh
0743  FF      		db	0ffh
0744  FF      		db	0ffh
0745  FF      		db	0ffh
0746  FF      		db	0ffh
0747  FF      		db	0ffh
0748  FF      		db	0ffh
0749  FF      		db	0ffh
074A  FF      		db	0ffh
074B  FF      		db	0ffh
074C  FF      		db	0ffh
074D  FF      		db	0ffh
074E  FF      		db	0ffh
074F  FF      		db	0ffh
0750  FF      		db	0ffh
0751  FF      		db	0ffh
0752  FF      		db	0ffh
0753  FF      		db	0ffh
0754  FF      		db	0ffh
0755  FF      		db	0ffh
0756  FF      		db	0ffh
0757  FF      		db	0ffh
0758  FF      		db	0ffh
0759  FF      		db	0ffh
075A  FF      		db	0ffh
075B  FF      		db	0ffh
075C  FF      		db	0ffh
075D  FF      		db	0ffh
075E  FF      		db	0ffh
075F  FF      		db	0ffh
0760  FF      		db	0ffh
0761  FF      		db	0ffh
0762  FF      		db	0ffh
0763  FF      		db	0ffh
0764  FF      		db	0ffh
0765  FF      		db	0ffh
0766  FF      		db	0ffh
0767  FF      		db	0ffh
0768  FF      		db	0ffh
0769  FF      		db	0ffh
076A  FF      		db	0ffh
076B  FF      		db	0ffh
076C  FF      		db	0ffh
076D  FF      		db	0ffh
076E  FF      		db	0ffh
076F  FF      		db	0ffh
0770  FF      		db	0ffh
0771  FF      		db	0ffh
0772  FF      		db	0ffh
0773  FF      		db	0ffh
0774  FF      		db	0ffh
0775  FF      		db	0ffh
0776  FF      		db	0ffh
0777  FF      		db	0ffh
0778  FF      		db	0ffh
0779  FF      		db	0ffh
077A  FF      		db	0ffh
077B  FF      		db	0ffh
077C  FF      		db	0ffh
077D  FF      		db	0ffh
077E  FF      		db	0ffh
077F  FF      		db	0ffh
0780  FF      		db	0ffh
0781  FF      		db	0ffh
0782  FF      		db	0ffh
0783  FF      		db	0ffh
0784  FF      		db	0ffh
0785  FF      		db	0ffh
0786  FF      		db	0ffh
0787  FF      		db	0ffh
0788  FF      		db	0ffh
0789  FF      		db	0ffh
078A  FF      		db	0ffh
078B  FF      		db	0ffh
078C  FF      		db	0ffh
078D  FF      		db	0ffh
078E  FF      		db	0ffh
078F  FF      		db	0ffh
0790  FF      		db	0ffh
0791  FF      		db	0ffh
0792  FF      		db	0ffh
0793  FF      		db	0ffh
0794  FF      		db	0ffh
0795  FF      		db	0ffh
0796  FF      		db	0ffh
0797  FF      		db	0ffh
0798  FF      		db	0ffh
0799  FF      		db	0ffh
079A  FF      		db	0ffh
079B  FF      		db	0ffh
079C  FF      		db	0ffh
079D  FF      		db	0ffh
079E  FF      		db	0ffh
079F  FF      		db	0ffh
07A0  FF      		db	0ffh
07A1  FF      		db	0ffh
07A2  FF      		db	0ffh
07A3  FF      		db	0ffh
07A4  FF      		db	0ffh
07A5  FF      		db	0ffh
07A6  FF      		db	0ffh
07A7  FF      		db	0ffh
07A8  FF      		db	0ffh
07A9  FF      		db	0ffh
07AA  FF      		db	0ffh
07AB  FF      		db	0ffh
07AC  FF      		db	0ffh
07AD  FF      		db	0ffh
07AE  FF      		db	0ffh
07AF  FF      		db	0ffh
07B0  FF      		db	0ffh
07B1  FF      		db	0ffh
07B2  FF      		db	0ffh
07B3  FF      		db	0ffh
07B4  FF      		db	0ffh
07B5  FF      		db	0ffh
07B6  FF      		db	0ffh
07B7  FF      		db	0ffh
07B8  FF      		db	0ffh
07B9  FF      		db	0ffh
07BA  FF      		db	0ffh
07BB  FF      		db	0ffh
07BC  FF      		db	0ffh
07BD  FF      		db	0ffh
07BE  FF      		db	0ffh
07BF  FF      		db	0ffh
07C0  FF      		db	0ffh
07C1  FF      		db	0ffh
07C2  FF      		db	0ffh
07C3  FF      		db	0ffh
07C4  FF      		db	0ffh
07C5  FF      		db	0ffh
07C6  FF      		db	0ffh
07C7  FF      		db	0ffh
07C8  FF      		db	0ffh
07C9  FF      		db	0ffh
07CA  FF      		db	0ffh
07CB  FF      		db	0ffh
07CC  FF      		db	0ffh
07CD  FF      		db	0ffh
07CE  FF      		db	0ffh
07CF  FF      		db	0ffh
07D0  FF      		db	0ffh
07D1  FF      		db	0ffh
07D2  FF      		db	0ffh
07D3  FF      		db	0ffh
07D4  FF      		db	0ffh
07D5  FF      		db	0ffh
07D6  FF      		db	0ffh
07D7  FF      		db	0ffh
07D8  FF      		db	0ffh
07D9  FF      		db	0ffh
07DA  FF      		db	0ffh
07DB  FF      		db	0ffh
07DC  FF      		db	0ffh
07DD  FF      		db	0ffh
07DE  FF      		db	0ffh
07DF  FF      		db	0ffh
07E0  FF      		db	0ffh
07E1  FF      		db	0ffh
07E2  FF      		db	0ffh
07E3  FF      		db	0ffh
07E4  FF      		db	0ffh
07E5  FF      		db	0ffh
07E6  FF      		db	0ffh
07E7  FF      		db	0ffh
07E8  FF      		db	0ffh
07E9  FF      		db	0ffh
07EA  FF      		db	0ffh
07EB  FF      		db	0ffh
07EC  FF      		db	0ffh
07ED  FF      		db	0ffh
07EE  FF      		db	0ffh
07EF  FF      		db	0ffh
07F0  FF      		db	0ffh
07F1  FF      		db	0ffh
07F2  FF      		db	0ffh
07F3  FF      		db	0ffh
07F4  FF      		db	0ffh
07F5  FF      		db	0ffh
07F6  FF      		db	0ffh
07F7  FF      		db	0ffh
07F8  FF      		db	0ffh
07F9  FF      		db	0ffh
07FA  FF      		db	0ffh
07FB  FF      		db	0ffh
07FC  FF      		db	0ffh
07FD  FF      		db	0ffh
07FE  FF      		db	0ffh
07FF  FF      		db	0ffh
		
		; RAM used...
FF00          		org	0ff00h
FF00          	addr0:	ds	2
FF02          	addr1:	ds	2
FF04          	line:	ds	64
		
FF44          		end



Statistics:

     4	passes
     0	jr promotions
   123	symbols
  2048	bytes

   800	macro calls
  3759	macro bytes
     0	invented symbols
