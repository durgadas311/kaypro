		; serial-port ROM monitor/boot for debugging Kaypro.
		; Uses "aux serial" a.k.a "Serial Printer" port.
		
0016          	VERN	equ	016h	; ROM version
		
0800          	romsiz	equ	0800h	; minimum space for ROM
		
			maclib	z80
**** z80.lib ****
**** monitor.asm ****
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
			$*macro
		
000D          	CR	equ	13
000A          	LF	equ	10
0003          	CTLC	equ	3
0007          	BEL	equ	7
0009          	TAB	equ	9
0008          	BS	equ	8
001B          	ESC	equ	27
0000          	TRM	equ	0
007F          	DEL	equ	127
		
		; WD1943 at 5.0688MHz...
000E          	B9600	equ	0eh
0005          	B300	equ	05h
		; */84 (and 10) sysport drive select
0002          	DS0	equ	0010b
0001          	DS1	equ	0001b
0003          	DSNONE	equ	0011b	; also mask
0010          	MTRON	equ	10000b	; MOTOR control
		
0004          	sio1	equ	04h	; "serial data", "keyboard"
000C          	sio2	equ	0ch	; "serial printer", "modem"
0000          	brd1	equ	00h
0008          	brd2	equ	08h
		
0000          	sioA	equ	00h	; offsets
0001          	sioB	equ	01h
		
0000          	sioD	equ	00h	; offsets
0002          	sioC	equ	02h
		
		; Choose Z80SIO port to use...
0004          	condat	equ	sio1+sioA+sioD
0006          	conctl	equ	sio1+sioA+sioC
0000          	conbrr	equ	brd1
		
0014          	sysp84	equ	14h	; sysport on */84 (and 10). */83 have nothing here.
		
0000          	stack	equ	00000h	; stack at top of memory (wrapped)
		
		; Start of ROM code
0000          		org	00000h
0008          	rst0e	equ	$+8
0000  C36A00  		jmp	init
0003  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0010          	rst1e	equ	$+8
0008  C34B00  	rst1:	jmp	swtrap
000B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0018          	rst2e	equ	$+8
0010  C34B00  	rst2:	jmp	swtrap
0013  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0020          	rst3e	equ	$+8
0018  C34B00  	rst3:	jmp	swtrap
001B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0028          	rst4e	equ	$+8
0020  C34B00  	rst4:	jmp	swtrap
0023  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0030          	rst5e	equ	$+8
0028  C34B00  	rst5:	jmp	swtrap
002B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0038          	rst6e	equ	$+8
0030  C34B00  	rst6:	jmp	swtrap
0033  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
0040          	rst7e	equ	$+8
0038  C34B00  	rst7:	jmp	swtrap
003B  FFFFFFFF		db	0ffh,0ffh,0ffh,0ffh,0ffh
      FF
		
			; NMI not a problem?
		
0040  0D0A2A2A	swt:	db	CR,LF,'*** RST ',TRM
      2A205253
      542000
		
004B  F3      	swtrap:	di		; try to recover return address...
004C  D1      		pop	d	; should be caller of RST...
004D  310000  		lxi	sp,stack
0050  D5      		push	d	; not needed?
0051  214000  		lxi	h,swt
0054  CD1406  		call	msgprt
0057  D1      		pop	d
0058  CDEB05  		call	taddr
005B  CD0A06  		call	crlf
			; TODO: print address, etc...
005E  C3DC00  		jmp	debug
		
0061  18      	sioini:	db	18h	; reset
0062  0444    		db	4,044h	;
0064  03C1    		db	3,0c1h	;
0066  05E8    		db	5,0e8h	;
0068  0100    		db	1,000h	;
0009          	siolen	equ	$-sioini
		
		; ROM start point - initialize everything
		; We know we have 64K RAM...
006A  F3      	init:	di
006B  310000  		lxi	sp,stack
		
			; init serial port
006E  3E0E    		mvi	a,B9600
0070  D300    		out	conbrr
0072  216100  		lxi	h,sioini
0075  0E06    		mvi	c,conctl
0077  0609    		mvi	b,siolen
0079          		outir
0079  EDB3    		DB	0EDH,0B3H
		
007B  21BF00  		lxi	h,signon
007E  CD1406  		call	msgprt
		
0081  CDCC06  		call	proginit
			; save registers on stack, for debugger access...
0084  C3DC00  		jmp	debug
		
0087          	belout:
0087  0E07    		mvi	c,BEL
		; Output char to console
		; C=char
0089          	conout:
0089  DB06    		in	conctl
008B  E604    		ani	00000100b
008D          		jrz	conout
008D  28FA    		DB	28H,conout-$-1
008F  79      		mov	a,c
0090  D304    		out	condat
0092  C9      		ret
		
0093  0D0A3A20	prompt:	db	CR,LF,': ',TRM
      00
		
		; Get char from console
		; Returns: A=char, stripped
0098  E5      	conin:	push	h
0099  210000  	ci2:	lxi	h,0
009C  DB06    	ci0:	in	conctl		; 11
009E  E601    		ani	00000001b	;  7
00A0          		jrnz	ci1		;  7
00A0  200A    		DB	20H,ci1-$-1
00A2  2B      		dcx	h		;  6
00A3  7D      		mov	a,l		;  4
00A4  B4      		ora	h		;  4
00A5          		jrnz	ci0		; 12 = 51 (12.75uS) (~0.8 sec)
00A5  20F5    		DB	20H,ci0-$-1
00A7  CDDC06  		call	progress	; on */83 (20.4uS or ~1.3 sec)
00AA          		jr	ci2
00AA  18ED    		DB	18H,ci2-$-1
00AC  DB04    	ci1:	in	condat
00AE  E67F    		ani	07fh
00B0  E1      		pop	h
00B1  C9      		ret
		
		; Get char from console, toupper and echo
00B2          	conine:
00B2  CD9800  		call	conin
00B5  CD2F06  		call	toupper
00B8  F5      		push	psw
00B9  4F      		mov	c,a
00BA  CD8900  		call	conout
00BD  F1      		pop	psw
00BE  C9      		ret
		
00BF  0D0A4B61	signon:	db	CR,LF,'Kaypro Monitor v'
      7970726F
      204D6F6E
      69746F72
      2076
00D1  312E36  	vernum:	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
00D4  0D0A00  		db	CR,LF,TRM
		
00D7  0D0A073F	errm:	db	CR,LF,BEL,'?',TRM
      00
		
		*********************************************************
		**  Debug mode
		*********************************************************
		
00DC          	debug:
00DC  310000  	cilp:	lxi	sp,stack
00DF  21DC00  		lxi	h,cilp		;setup return address
00E2  E5      		push	h
00E3  219300  		lxi	h,prompt	;prompt for a command
00E6  CD1406  		call	msgprt
00E9  CD3806  		call	linein		;wait for command line to be entered
00EC  1104FF  		lxi	d,line
00EF  CD8606  		call	char		;get first character
00F2  C8      		rz			;ignore line if it is empty
00F3  210D01  		lxi	h,comnds	;search table for command character
00F6  060B    		mvi	b,ncmnds	;(number of commands)
00F8  BE      	cci0:	cmp	m		;search command table
00F9  23      		inx	h
00FA          		jrz	gotocmd		;command was found, execute it
00FA  280A    		DB	28H,gotocmd-$-1
00FC  23      		inx	h		;step past routine address
00FD  23      		inx	h
00FE          		djnz	cci0		;loop untill all valid commands are checked
00FE  10F8    		DB	10H,cci0-$-1
0100  21D700  	error:	lxi	h,errm		;if command unknown, beep and re-prompt
0103  C31406  		jmp	msgprt
		
0106          	gotocmd:
0106  D5      		push	d		;save command line buffer pointer
0107  5E      		mov	e,m		;get command routine address
0108  23      		inx	h
0109  56      		mov	d,m		;DE = routine address
010A  EB      		xchg			;HL = routine address
010B  D1      		pop	d		;restore buffer pointer
010C  E9      		pchl			;jump to command routine
		
		; All commands are started with DE=next char in line buffer
010D          	comnds:
010D  3F      		db	'?'
010E  D602    		dw	Qcomnd
0110  44      		db	'D'
0111  7E03    		dw	Dcomnd
0113  53      		db	'S'
0114  E403    		dw	Scomnd
0116  47      		db	'G'
0117  4C04    		dw	Gcomnd
0119  4D      		db	'M'
011A  DD02    		dw	Mcomnd
011C  46      		db	'F'
011D  3E03    		dw	Fcomnd
011F  49      		db	'I'
0120  8404    		dw	Icomnd
0122  4F      		db	'O'
0123  D604    		dw	Ocomnd
0125  4E      		db	'N'
0126  0B05    		dw	Ncomnd
0128  54      		db	'T'
0129  8005    		dw	Tcomnd
012B  56      		db	'V'
012C  E505    		dw	Vcomnd
000B          	ncmnds	equ	($-comnds)/3
		
		*********************************************************
		**  Command subroutines
		*********************************************************
		
012E          	menu:
012E  0D0A4420		db	CR,LF,'D <start> <end> - display memory in HEX'
      3C737461
      72743E20
      3C656E64
      3E202D20
      64697370
      6C617920
      6D656D6F
      72792069
      6E204845
      58
0157  0D0A5320		db	CR,LF,'S <start> - set/view memory'
      3C737461
      72743E20
      2D207365
      742F7669
      6577206D
      656D6F72
      79
0174  0D0A2020		db	CR,LF,'    (CR) = skip fwd, ''-'' = skip bkwd, ''.'' = done'
      20202843
      5229203D
      20736B69
      70206677
      642C2027
      2D27203D
      20736B69
      7020626B
      77642C20
      272E2720
      3D20646F
      6E65
01A6  0D0A4720		db	CR,LF,'G <start> - go to address'
      3C737461
      72743E20
      2D20676F
      20746F20
      61646472
      657373
01C1  0D0A4620		db	CR,LF,'F <start> <end> <data> - fill memory'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6174613E
      202D2066
      696C6C20
      6D656D6F
      7279
01E7  0D0A4D20		db	CR,LF,'M <start> <end> <dest> - Move data'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6573743E
      202D204D
      6F766520
      64617461
020B  0D0A4920		db	CR,LF,'I <port> [num] - Input from port'
      3C706F72
      743E205B
      6E756D5D
      202D2049
      6E707574
      2066726F
      6D20706F
      7274
022D  0D0A4F20		db	CR,LF,'O <port> <value> [...] - Output to port'
      3C706F72
      743E203C
      76616C75
      653E205B
      2E2E2E5D
      202D204F
      75747075
      7420746F
      20706F72
      74
0256  0D0A4E20		db	CR,LF,'N <hw> - iNitialize hardware (KB83, KB84, CRTC)'
      3C68773E
      202D2069
      4E697469
      616C697A
      65206861
      72647761
      72652028
      4B423833
      2C204B42
      38342C20
      43525443
      29
0287  0D0A5420		db	CR,LF,'T <hw> - Test hardware (CRTC)'
      3C68773E
      202D2054
      65737420
      68617264
      77617265
      20284352
      544329
02A6  0D0A5620		db	CR,LF,'V - Show ROM version'
      2D205368
      6F772052
      4F4D2076
      65727369
      6F6E
02BC  0D0A5E43		db	CR,LF,'^C aborts command entry'
      2061626F
      72747320
      636F6D6D
      616E6420
      656E7472
      79
02D5  00      		db	TRM
		
02D6          	Qcomnd:
02D6  212E01  		lxi	h,menu
02D9  CD1406  		call	msgprt
02DC  C9      		ret
		
02DD  CD9206  	Mcomnd:	call	getaddr
02E0  DA0001  		jc	error
02E3          		bit	7,b
02E3  CB78    		DB	0CBH,7*8+b+40H
02E5  C20001  		jnz	error
02E8  2200FF  		shld	addr0
02EB  CD9206  		call	getaddr
02EE  DA0001  		jc	error
02F1          		bit	7,b
02F1  CB78    		DB	0CBH,7*8+b+40H
02F3  C20001  		jnz	error
02F6  2202FF  		shld	addr1
02F9  CD9206  		call	getaddr
02FC  DA0001  		jc	error
02FF          		bit	7,b
02FF  CB78    		DB	0CBH,7*8+b+40H
0301  C20001  		jnz	error
0304  EB      		xchg
0305          		lbcd	addr0
0305  ED4B    		DB	0EDH,4BH
0307  00FF    		DW	addr0
0309  2A02FF  		lhld	addr1
030C  B7      		ora	a
030D          		dsbc	b
030D  ED42    		DB	0EDH,b*8+42H
030F  DA0001  		jc	error
0312  23      		inx	h
0313  4D      		mov	c,l
0314  44      		mov	b,h
0315  D5      		push	d
0316  EB      		xchg
0317  09      		dad	b
0318  D1      		pop	d
0319  DA0001  		jc	error
031C  2A02FF  		lhld	addr1
031F  CD2906  		call	check
0322  DA3803  		jc	mc0
0325  2A00FF  		lhld	addr0
0328  CD2906  		call	check
032B  D23803  		jnc	mc0
032E  2A02FF  		lhld	addr1
0331  EB      		xchg
0332  09      		dad	b
0333  2B      		dcx	h
0334  EB      		xchg
0335          		lddr
0335  EDB8    		DB	0EDH,0B8H
0337  C9      		ret
0338  2A00FF  	mc0:	lhld	addr0
033B          		ldir
033B  EDB0    		DB	0EDH,0B0H
033D  C9      		ret
033E          	Fcomnd:
033E  CD9206  		call	getaddr ;get address to start at
0341  DA0001  		jc	error	;error if non-hex character
0344          		bit	7,b	;test for no address (different from 0000)
0344  CB78    		DB	0CBH,7*8+b+40H
0346  C20001  		jnz	error	;error if no address was entered
0349  2200FF  		shld	addr0	;save starting address
034C  CD9206  		call	getaddr ;get stop address
034F  DA0001  		jc	error	;error if non-hex character
0352          		bit	7,b	;test for no entry
0352  CB78    		DB	0CBH,7*8+b+40H
0354  C20001  		jnz	error	;error if no stop address
0357  2202FF  		shld	addr1	;save stop address
035A  CD9206  		call	getaddr ;get fill data
035D  DA0001  		jc	error	;error if non-hex character
0360          		bit	7,b	;test for no entry
0360  CB78    		DB	0CBH,7*8+b+40H
0362  C20001  		jnz	error	;error if no fill data
0365  7C      		mov	a,h
0366  B7      		ora	a
0367  C20001  		jnz	error
036A  4D      		mov	c,l	;(C)=fill data
036B  2A02FF  		lhld	addr1	;get stop address
036E          		lded	addr0	;get start address
036E  ED5B    		DB	0EDH,5BH
0370  00FF    		DW	addr0
0372  79      	fc0:	mov	a,c	;
0373  12      		stax	d	;put byte in memory
0374  13      		inx	d	;step to next byte
0375  7A      		mov	a,d	;
0376  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
0377  C8      		rz		;
0378  CD2906  		call	check	;test for past stop address
037B  D8      		rc	;quit if past stop address
037C          		jr	fc0
037C  18F4    		DB	18H,fc0-$-1
		
037E          	Dcomnd:		;display memory
037E  CD9206  		call	getaddr ;get address to start at
0381  DA0001  		jc	error	;error if non-hex character
0384          		bit	7,b	;test for no address (different from 0000)
0384  CB78    		DB	0CBH,7*8+b+40H
0386  C20001  		jnz	error	;error if no address was entered
0389  2200FF  		shld	addr0	;save starting address
038C  CD9206  		call	getaddr ;get stop address
038F  DA0001  		jc	error	;error if non-hex character
0392          		bit	7,b	;test for no entry
0392  CB78    		DB	0CBH,7*8+b+40H
0394  C20001  		jnz	error	;error if no stop address
0397          		lded	addr0	;get start address into (DE)
0397  ED5B    		DB	0EDH,5BH
0399  00FF    		DW	addr0
039B  CD0A06  	dis0:	call	crlf	;start on new line
039E  CDEB05  		call	taddr	;print current address
03A1  CD0506  		call	space	;delimit it from data
03A4  0610    		mvi	b,16	;display 16 bytes on each line
03A6  1A      	dis1:	ldax	d	;get byte to display
03A7  13      		inx	d	;step to next byte
03A8  CDF005  		call	hexout	;display this byte in HEX
03AB  CD0506  		call	space	;delimit it from others
03AE  7A      		mov	a,d
03AF  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
03B0          		jrz	dis2
03B0  2807    		DB	28H,dis2-$-1
03B2  CD2906  		call	check	;test for past stop address
03B5          		jrc	dis2	;quit if past stop address
03B5  3802    		DB	38H,dis2-$-1
03B7          		djnz	dis1	;else do next byte on this line
03B7  10ED    		DB	10H,dis1-$-1
03B9  CD0506  	dis2:	call	space	;delimit it from data
03BC  CD0506  		call	space
03BF          		lded	addr0
03BF  ED5B    		DB	0EDH,5BH
03C1  00FF    		DW	addr0
03C3  0610    		mvi	b,16	;display 16 bytes on each line
03C5  1A      	dis3:	ldax	d	;get byte to display
03C6  13      		inx	d	;step to next byte
03C7  0E2E    		mvi	c,'.'
03C9  FE20    		cpi	' '
03CB          		jrc	dis4
03CB  3805    		DB	38H,dis4-$-1
03CD  FE7F    		cpi	'~'+1
03CF          		jrnc	dis4
03CF  3001    		DB	30H,dis4-$-1
03D1  4F      		mov	c,a
03D2  CD8900  	dis4:	call	conout
03D5  7A      		mov	a,d
03D6  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
03D7  C8      		rz
03D8  CD2906  		call	check	;test for past stop address
03DB  D8      		rc	;quit if past stop address
03DC          		djnz	dis3	;else do next byte on this line
03DC  10E7    		DB	10H,dis3-$-1
03DE          		sded	addr0
03DE  ED53    		DB	0EDH,53H
03E0  00FF    		DW	addr0
03E2          		jr	dis0	;when line is finished, start another
03E2  18B7    		DB	18H,dis0-$-1
		
03E4          	Scomnd: 		;substitute (set) memory
03E4  CD9206  		call	getaddr ;get address to start substitution at
03E7  DA0001  		jc	error	;error if non-hex character
03EA          		bit	7,b	;test for no entry
03EA  CB78    		DB	0CBH,7*8+b+40H
03EC  C20001  		jnz	error	;error if no address
03EF  EB      		xchg		;put address in (DE)
03F0  CD0A06  	sb1:	call	crlf	;start on new line
03F3  CDEB05  		call	taddr	;print address
03F6  CD0506  		call	space	;and delimit it
03F9  1A      		ldax	d	;get current value of byte
03FA  CDF005  		call	hexout	;and display it
03FD  CD0506  		call	space	;delimit it from user's (posible) entry
0400  0600    		mvi	b,0	;zero accumilator for user's entry
0402  CDB200  	sb2:	call	conine	;get user's first character
0405  FE0D    		cpi	CR	;if CR then skip to next byte
0407          		jrz	foward
0407  2833    		DB	28H,foward-$-1
0409  FE20    		cpi	' '	;or if Space then skip to next
040B          		jrz	foward
040B  282F    		DB	28H,foward-$-1
040D  FE2D    		cpi	'-'	;if Minus then step back to previous address
040F          		jrz	bakwrd
040F  282E    		DB	28H,bakwrd-$-1
0411  FE2E    		cpi	'.'	;if Period then stop substitution
0413  C8      		rz
0414  CDB906  		call	hexcon	;if none of the above, should be HEX digit
0417          		jrc	error0	;error if not
0417  3829    		DB	38H,error0-$-1
0419          		jr	sb3	;start accumilating HEX digits
0419  1805    		DB	18H,sb3-$-1
041B  CDB906  	sb0:	call	hexcon	;test for HEX digit
041E          		jrc	error1	;error if not HEX
041E  3827    		DB	38H,error1-$-1
0420          	sb3:	slar	b	;roll accumilator to receive new digit
0420  CB20    		DB	0CBH, 20H + b
0422          		slar	b
0422  CB20    		DB	0CBH, 20H + b
0424          		slar	b
0424  CB20    		DB	0CBH, 20H + b
0426          		slar	b
0426  CB20    		DB	0CBH, 20H + b
0428  B0      		ora	b	;merge in new digit
0429  47      		mov	b,a
042A  CDB200  	sb4:	call	conine	;get next character
042D  FE0D    		cpi	CR	;if CR then put existing byte into memory
042F          		jrz	putbyte ;  and step to next.
042F  2809    		DB	28H,putbyte-$-1
0431  FE2E    		cpi	'.'
0433  C8      		rz
0434  FE7F    		cpi	del	;if DEL then restart at same address
0436          		jrz	sb1
0436  28B8    		DB	28H,sb1-$-1
0438          		jr	sb0	;else continue entering hex digits
0438  18E1    		DB	18H,sb0-$-1
043A          	putbyte:
043A  78      		mov	a,b	;store accumilated byte in memory
043B  12      		stax	d
043C          	foward:
043C  13      		inx	d	;step to next location
043D          		jr	sb1	;and allow substitution there
043D  18B1    		DB	18H,sb1-$-1
		
043F          	bakwrd:
043F  1B      		dcx	d	;move address backward one location
0440          		jr	sb1
0440  18AE    		DB	18H,sb1-$-1
		
0442  CD8700  	error0:	call	belout	;user's entry was not valid, beep and continue
0445          		jr	sb2
0445  18BB    		DB	18H,sb2-$-1
0447  CD8700  	error1:	call	belout	;same as above but for different section of routine
044A          		jr	sb4
044A  18DE    		DB	18H,sb4-$-1
		
044C          	Gcomnd: 		;jump to address given by user
044C  CD9206  		call	getaddr ;get address to jump to
044F  DA0001  		jc	error	;error if non-hex character
0452          		bit	7,b	;test for no entry
0452  CB78    		DB	0CBH,7*8+b+40H
0454  C20001  		jnz	error	;error if no address entered
0457  CD0A06  		call	crlf	;on new line,
045A  0E47    		mvi	c,'G'	;display "GO aaaa?" to ask
045C  CD8900  		call	conout	;user to verify that we should
045F  0E4F    		mvi	c,'O'	;jump to this address (in case user
0461  CD8900  		call	conout	;made a mistake we should not blindly
0464  CD0506  		call	space	;commit suicide)
0467  EB      		xchg
0468  CDEB05  		call	taddr
046B  CD0506  		call	space
046E  0E3F    		mvi	c,'?'
0470  CD8900  		call	conout
0473  CDB200  		call	conine	;wait for user to type "Y" to
0476  FE59    		cpi	'Y'	;indicate that we should jump.
0478  C0      		rnz		;abort if response was not "Y"
0479  EB      		xchg
047A  E9      		pchl		;else jump to address
		
047B  0D0A496E	inpms:	db	CR,LF,'Input ',TRM
      70757420
      00
0484          	Icomnd:
0484  CD9206  		call	getaddr ;get port address, ignore extra MSDs
0487  DA0001  		jc	error	;error if non-hex character
048A          		bit	7,b	;test for no entry
048A  CB78    		DB	0CBH,7*8+b+40H
048C  C20001  		jnz	error	;error if no address entered
048F  E5      		push	h	; save port
0490  CD9206  		call	getaddr	; hex number of inputs to do
0493  DA0001  		jc	error
0496          		bit	7,b
0496  CB78    		DB	0CBH,7*8+b+40H
0498          		jrz	ic0
0498  2803    		DB	28H,ic0-$-1
049A  210100  		lxi	h,1
049D          	ic0:
049D  E3      		xthl		; save count
049E  E5      		push	h	; re-save port
049F  217B04  		lxi	h,inpms
04A2  CD1406  		call	msgprt
04A5  E1      		pop	h
04A6  E5      		push	h
04A7  7D      		mov	a,l
04A8  CDF005  		call	hexout
04AB  CD0506  		call	space
04AE  0E3D    		mvi	c,'='
04B0  CD8900  		call	conout
			; "Input XX ="
04B3  C1      		pop	b	; port to BC
04B4  E1      		pop	h	; count to HL (L)
04B5  260D    		mvi	h,16-3
04B7  0600    		mvi	b,0	; safety
04B9  C5      		push	b	; C gets trashed by conout
04BA          	ic1:
04BA  CD0506  		call	space
04BD  C1      		pop	b
04BE  C5      		push	b
04BF          		inp	a
04BF  ED78    		DB	0EDH,a*8+40H
04C1  CDF005  		call	hexout
04C4  2D      		dcr	l	; assume <= 256
04C5          		jrz	ic2
04C5  280A    		DB	28H,ic2-$-1
04C7  25      		dcr	h	; col count
04C8          		jrnz	ic1
04C8  20F0    		DB	20H,ic1-$-1
04CA  CD0A06  		call	crlf
04CD  2610    		mvi	h,16
04CF          		jr	ic1
04CF  18E9    		DB	18H,ic1-$-1
04D1          	ic2:
04D1  C1      		pop	b	; fix stack
04D2  CD0A06  		call	crlf
04D5  C9      		ret
		
		; TODO: no feedback?
04D6          	Ocomnd:
04D6  CD9206  		call	getaddr ;get port address, ignore extra MSDs
04D9  DA0001  		jc	error	;error if non-hex character
04DC          		bit	7,b	;test for no entry
04DC  CB78    		DB	0CBH,7*8+b+40H
04DE  C20001  		jnz	error	;error if no address entered
04E1  2600    		mvi	h,0	; safety
04E3  E5      		push	h	; save port
04E4  CD9206  		call	getaddr ;get value, ignore extra MSDs
04E7  DA0001  		jc	error	;error if non-hex character
04EA          		bit	7,b	;test for no entry
04EA  CB78    		DB	0CBH,7*8+b+40H
04EC  C20001  		jnz	error	;error if no value entered
04EF  CD0A06  		call	crlf
04F2          	oc0:		; L has byte to output...
04F2  C1      		pop	b	; port
04F3  C5      		push	b
04F4          		outp	l
04F4  ED69    		DB	0EDH,l*8+41H
04F6  CD9206  		call	getaddr ;get value, ignore extra MSDs
04F9  DA0001  		jc	error	;error if non-hex character
					;NOTE: some output has been sent
04FC          		bit	7,b	;test for no entry
04FC  CB78    		DB	0CBH,7*8+b+40H
04FE          		jrz	oc0	;still more to send
04FE  28F2    		DB	28H,oc0-$-1
0500  E1      		pop	h	; discard port
0501  C9      		ret
		
0502  CD8606  	skb:	call	char
0505  C8      		rz		;end of buffer/line before a character was found (ZR)
0506  FE20    		cpi	' '	;skip all leading spaces
0508  C0      		rnz		;if not space, then done (NZ)
0509          		jr	skb	;else if space, loop untill not space
0509  18F7    		DB	18H,skb-$-1
		
050B          	Ncomnd:
050B  CD0205  		call	skb	; skip blanks
050E  CA0001  		jz	error	; required param
			; this may need refinement
0511  1B      		dcx	d
0512  212D05  		lxi	h,kb83
0515  CD7005  		call	strcmp
0518          		jrz	nkb83
0518  2822    		DB	28H,nkb83-$-1
051A  213205  		lxi	h,kb84
051D  CD7005  		call	strcmp
0520          		jrz	nkb84
0520  281E    		DB	28H,nkb84-$-1
0522  213705  		lxi	h,crtc
0525  CD7005  		call	strcmp
0528          		jrz	ncrtc
0528  2820    		DB	28H,ncrtc-$-1
052A  C30001  		jmp	error
		
052D  4B423833	kb83:	db	'KB83',TRM
      00
0532  4B423834	kb84:	db	'KB84',TRM
      00
0537  43525443	crtc:	db	'CRTC',TRM
      00
		
053C  3E05    	nkb83:	mvi	a,B300
053E  D30C    		out	0ch	; */83 baud gen for SIO1 ch B
0540  216100  	nkb84:	lxi	h,sioini
0543  0E07    		mvi	c,sio1+sioB+sioC
0545  0609    		mvi	b,siolen
0547          		outir
0547  EDB3    		DB	0EDH,0B3H
0549  C9      		ret
		
054A  216005  	ncrtc:	lxi	h,crtini
054D  0E1D    		mvi	c,1dh	; */84 CRTC 6545 data port
054F  0610    		mvi	b,16
0551  AF      		xra	a	; start with reg 00
0552  0D      	nc0:	dcr	c
0553          		outp	a	; select reg
0553  ED79    		DB	0EDH,a*8+41H
0555  3C      		inr	a	; ++reg
0556  0C      		inr	c	;
0557          		outi
0557  EDA3    		DB	0EDH,0A3H
0559          		jrnz	nc0
0559  20F7    		DB	20H,nc0-$-1
055B  3E1F    		mvi	a,1fh	; enable CRTC
055D  D31C    		out	1ch
055F  C9      		ret
		
0560  6A505699	crtini:	db	6ah,50h,56h,99h,19h,0ah,19h,19h,78h,0fh,60h,0fh,00h,00h,00h,00h
      190A1919
      780F600F
      00000000
		
0570  D5      	strcmp:	push	d
0571  AF      		xra	a
0572  BE      	sc0:	cmp	m	; TRM?
0573          		jrz	sc9	; A = 0
0573  2808    		DB	28H,sc9-$-1
0575  1A      		ldax	d
0576  96      		sub	m
0577          		jrnz	sc9	; A is NZ
0577  2004    		DB	20H,sc9-$-1
0579  23      		inx	h
057A  13      		inx	d
057B          		jr	sc0
057B  18F5    		DB	18H,sc0-$-1
057D  D1      	sc9:	pop	d
057E  B7      		ora	a
057F  C9      		ret
		
0580          	Tcomnd:
0580  CD0205  		call	skb	; skip blanks
0583  CA0001  		jz	error	; required param
			; this may need refinement
0586  1B      		dcx	d
0587  213705  		lxi	h,crtc
058A  CD7005  		call	strcmp
058D          		jrz	tcrtc
058D  2803    		DB	28H,tcrtc-$-1
058F  C30001  		jmp	error
		
0592  21CD05  	tcrtc:	lxi	h,waitm
0595  CD1406  		call	msgprt
0598  0605    		mvi	b,5	; count
059A  1E80    		mvi	e,80h	; compare
059C  3E1F    		mvi	a,1fh
059E  D31C    		out	1ch	; select reg
05A0  DB1C    	tc0:	in	1ch
05A2  E680    		ani	80h
05A4  BB      		cmp	e
05A5          		jrz	tc9
05A5  280F    		DB	28H,tc9-$-1
05A7  DB06    		in	conctl
05A9  E601    		ani	00000001b
05AB          		jrz	tc0
05AB  28F3    		DB	28H,tc0-$-1
05AD  DB04    		in	condat
05AF  21D805  		lxi	h,abrtm
05B2  CD1406  		call	msgprt
05B5  C9      		ret
05B6  7B      	tc9:	mov	a,e
05B7  EE80    		xri	80h
05B9  5F      		mov	e,a
05BA          		jrnz	tc8
05BA  200B    		DB	20H,tc8-$-1
05BC  21DE05  		lxi	h,updtm
05BF  CD1406  		call	msgprt
05C2  DB1F    		in	1fh	; clear Update
05C4          		djnz	tc0
05C4  10DA    		DB	10H,tc0-$-1
05C6  C9      		ret
05C7  CD0506  	tc8:	call	space
05CA          		djnz	tc0
05CA  10D4    		DB	10H,tc0-$-1
05CC  C9      		ret
		
05CD  0D0A5761	waitm:	db	CR,LF,'Wait... ',TRM
      69742E2E
      2E2000
05D8  41626F72	abrtm:	db	'Abort',TRM
      7400
05DE  55706461	updtm:	db	'Update',TRM
      746500
		
05E5          	Vcomnd:
05E5  21BF00  		lxi	h,signon
05E8  C31406  		jmp	msgprt
		
		*********************************************************
		**  Utility subroutines
		*********************************************************
		
05EB  7A      	taddr:	mov	a,d	;display (DE) at console in HEX
05EC  CDF005  		call	hexout	;print HI byte in HEX
05EF  7B      		mov	a,e	;now do LO byte
05F0  F5      	hexout:	push	psw	;output (A) to console in HEX
05F1  07      		rlc		;get HI digit in usable (LO) position
05F2  07      		rlc
05F3  07      		rlc
05F4  07      		rlc
05F5  CDF905  		call	nible	;and display it
05F8  F1      		pop	psw	;get LO digit back and display it
05F9  E60F    	nible:	ani	00001111b	;display LO 4 bits of (A) in HEX
05FB  C690    		adi	90h	;algorithm to convert 4-bits to ASCII
05FD  27      		daa
05FE  CE40    		aci	40h
0600  27      		daa
0601  4F      		mov	c,a	;display ASCII digit
0602  C38900  		jmp	conout
		
0605  0E20    	space:	mvi	c,' '	;send an ASCII blank to console
0607  C38900  		jmp	conout
		
060A  0E0D    	crlf:	mvi	c,CR	;send Carriage-Return/Line-Feed to console
060C  CD8900  		call	conout
060F  0E0A    		mvi	c,LF
0611  C38900  		jmp	conout
		
0614  7E      	msgprt:	mov	a,m	;send string to console, terminated by 00
0615  B7      		ora	a
0616  C8      		rz
0617  4F      		mov	c,a
0618  CD8900  		call	conout
061B  23      		inx	h
061C          		jr	msgprt
061C  18F6    		DB	18H,msgprt-$-1
		
061E  7E      	print:	mov	a,m	; BDOS func 9 style msgprt
061F  FE24    		cpi	'$'
0621  C8      		rz
0622  4F      		mov	c,a
0623  CD8900  		call	conout
0626  23      		inx	h
0627          		jr	print
0627  18F5    		DB	18H,print-$-1
		
0629  E5      	check:	push	h	;non-destuctive compare HL:DE
062A  B7      		ora	a
062B          		dsbc	d
062B  ED52    		DB	0EDH,d*8+42H
062D  E1      		pop	h
062E  C9      		ret
		
		; Convert letters to upper-case
062F          	toupper:
062F  FE61    		cpi	'a'
0631  D8      		rc
0632  FE7B    		cpi	'z'+1
0634  D0      		rnc
0635  E65F    		ani	01011111b
0637  C9      		ret
		
		; Read a line of text into 'line'
		; End with CR, honor BS
		; Reject all non-printing characters, force toupper
0638  2104FF  	linein:	lxi	h,line	;get string of characters from console, ending in CR
063B  CD9800  	li0:	call	conin	;get a character
063E  FE08    		cpi	BS	;allow BackSpacing
0640          		jrz	backup
0640  281D    		DB	28H,backup-$-1
0642  FE0D    		cpi	CR
0644          		jrz	li1
0644  282E    		DB	28H,li1-$-1
0646  FE03    		cpi	CTLC
0648          		jrz	liZ
0648  2830    		DB	28H,liZ-$-1
064A  FE20    		cpi	' '	;ignore other non-print
064C          		jrc	li0
064C  38ED    		DB	38H,li0-$-1
064E  CD2F06  		call	toupper
0651  77      		mov	m,a	;put character in line nuffer
0652  23      		inx	h
0653  4F      		mov	c,a
0654  CD8900  		call	conout	; echo character
0657  7D      		mov	a,l	;else check for pending buffer overflow
0658  D604    		sui	line mod 256
065A  FE40    		cpi	64
065C  C8      		rz		;stop if buffer full
065D          		jr	li0	;if not full, keep getting characters
065D  18DC    		DB	18H,li0-$-1
		
065F  7D      	backup:	mov	a,l	;(destructive) BackSpacing
0660  FE04    		cpi	line mod 256	;test if at beginning of line
0662          		jrz	li0	;can't backspace past start of line
0662  28D7    		DB	28H,li0-$-1
0664  0E08    		mvi	c,bs	;output BS," ",BS to erase character on screen
0666  CD8900  		call	conout	;and put cursor back one position
0669  CD0506  		call	space
066C  0E08    		mvi	c,bs
066E  CD8900  		call	conout
0671  2B      		dcx	h	;step buffer pointer back one
0672          		jr	li0	;and continue to get characters
0672  18C7    		DB	18H,li0-$-1
		
		; End line input, A=CR
0674  77      	li1:	mov	m,a	; store CR in buffer
0675  0E0D    		mvi	c,CR	;display CR so user knows we got it
0677  C38900  		jmp	conout	;then return to calling routine
		
		; Abort input
067A  0E5E    	liZ:	mvi	c,'^'
067C  CD8900  		call	conout
067F  0E43    		mvi	c,'C'
0681  CD8900  		call	conout
0684  E1      		pop	h	; always OK?
0685  C9      		ret		; return to caller's caller (main debug loop)
		
		; Get next character from line buffer.
		; DE=current pointer within 'line'
		; Returns: ZR=EOL else A=char
0686  7B      	char:	mov	a,e	;remove a character from line buffer,
0687  D604    		sui	line mod 256	;testing for no more characters
0689  D640    		sui	64
068B  C8      		rz		;return [ZR] condition if at end of buffer
068C  1A      		ldax	d
068D  FE0D    		cpi	CR
068F  C8      		rz		;also return [ZR] if at end of line
0690  13      		inx	d	;else step to next character
0691  C9      		ret		;and return [NZ]
		
		; Get HEX value from line buffer
		; Return: CY=error, HL=value, bit7(B)=1 if no input
0692          	getaddr:		;extract address from line buffer (delimitted by " ")
0692          		setb	7,b	;flag to detect no address entered
0692  CBF8    		DB	0CBH,7*8+b+0C0H
0694  210000  		lxi	h,0
0697  CD0205  		call	skb
069A  C8      		rz		;end of buffer/line before a character was found
069B          		jr	ga1	;if not space, then start getting HEX digits
069B  1804    		DB	18H,ga1-$-1
		
069D  CD8606  	ga0:	call	char
06A0  C8      		rz
06A1  CDB906  	ga1:	call	hexcon	;start assembling digits into 16 bit accumilator
06A4          		jrc	chkdlm	;check if valid delimiter before returning error.
06A4  380E    		DB	38H,chkdlm-$-1
06A6          		res	7,b	;reset flag
06A6  CBB8    		DB	0CBH,7*8+b+80H
06A8  D5      		push	d	;save buffer pointer
06A9  5F      		mov	e,a
06AA  1600    		mvi	d,0
06AC  29      		dad	h	;shift "accumulator" left 1 digit
06AD  29      		dad	h
06AE  29      		dad	h
06AF  29      		dad	h
06B0  19      		dad	d	;add in new digit
06B1  D1      		pop	d	;restore buffer pointer
06B2          		jr	ga0	;loop for next digit
06B2  18E9    		DB	18H,ga0-$-1
		
06B4  FE20    	chkdlm: cpi	' '	;blank is currently the only valid delimiter
06B6  C8      		rz
06B7  37      		stc
06B8  C9      		ret
		
06B9          	hexcon: 		;convert ASCII character to HEX digit
06B9  FE30    		cpi	'0'	;must be .GE. "0"
06BB  D8      		rc
06BC  FE3A    		cpi	'9'+1	;and be .LE. "9"
06BE          		jrc	ok0	;valid numeral.
06BE  3809    		DB	38H,ok0-$-1
06C0  FE41    		cpi	'A'	;or .GE. "A"
06C2  D8      		rc
06C3  FE47    		cpi	'F'+1	;and .LE. "F"
06C5  3F      		cmc
06C6  D8      		rc		;return [CY] if not valid HEX digit
06C7  D607    		sui	'A'-'9'-1	;convert letter
06C9  D630    	ok0:	sui	'0'	;convert (numeral) to 0-15 in (A)
06CB  C9      		ret
		
		; These only work on */84 (and 10) models.
		; Have no effect (and does nothing) on */83 models.
06CC          	proginit:
06CC  DB14    		in	sysp84
06CE  E6FC    		ani	not DSNONE
06D0  E6EF    		ani	not MTRON
06D2  F602    		ori	DS0
06D4  D314    		out	sysp84
06D6  3E41    		mvi	a,'A'
06D8  320030  		sta	3000h
06DB  C9      		ret
		
06DC          	progress:
06DC  DB14    		in	sysp84
06DE  EE03    		xri	DSNONE
06E0  D314    		out	sysp84
06E2  3A0030  		lda	3000h
06E5  EE03    		xri	00000011b
06E7  320030  		sta	3000h
06EA  C9      		ret
		
			rept	0800h-$
06EB  FF      		db	0ffh
06EC  FF      		db	0ffh
06ED  FF      		db	0ffh
06EE  FF      		db	0ffh
06EF  FF      		db	0ffh
06F0  FF      		db	0ffh
06F1  FF      		db	0ffh
06F2  FF      		db	0ffh
06F3  FF      		db	0ffh
06F4  FF      		db	0ffh
06F5  FF      		db	0ffh
06F6  FF      		db	0ffh
06F7  FF      		db	0ffh
06F8  FF      		db	0ffh
06F9  FF      		db	0ffh
06FA  FF      		db	0ffh
06FB  FF      		db	0ffh
06FC  FF      		db	0ffh
06FD  FF      		db	0ffh
06FE  FF      		db	0ffh
06FF  FF      		db	0ffh
0700  FF      		db	0ffh
0701  FF      		db	0ffh
0702  FF      		db	0ffh
0703  FF      		db	0ffh
0704  FF      		db	0ffh
0705  FF      		db	0ffh
0706  FF      		db	0ffh
0707  FF      		db	0ffh
0708  FF      		db	0ffh
0709  FF      		db	0ffh
070A  FF      		db	0ffh
070B  FF      		db	0ffh
070C  FF      		db	0ffh
070D  FF      		db	0ffh
070E  FF      		db	0ffh
070F  FF      		db	0ffh
0710  FF      		db	0ffh
0711  FF      		db	0ffh
0712  FF      		db	0ffh
0713  FF      		db	0ffh
0714  FF      		db	0ffh
0715  FF      		db	0ffh
0716  FF      		db	0ffh
0717  FF      		db	0ffh
0718  FF      		db	0ffh
0719  FF      		db	0ffh
071A  FF      		db	0ffh
071B  FF      		db	0ffh
071C  FF      		db	0ffh
071D  FF      		db	0ffh
071E  FF      		db	0ffh
071F  FF      		db	0ffh
0720  FF      		db	0ffh
0721  FF      		db	0ffh
0722  FF      		db	0ffh
0723  FF      		db	0ffh
0724  FF      		db	0ffh
0725  FF      		db	0ffh
0726  FF      		db	0ffh
0727  FF      		db	0ffh
0728  FF      		db	0ffh
0729  FF      		db	0ffh
072A  FF      		db	0ffh
072B  FF      		db	0ffh
072C  FF      		db	0ffh
072D  FF      		db	0ffh
072E  FF      		db	0ffh
072F  FF      		db	0ffh
0730  FF      		db	0ffh
0731  FF      		db	0ffh
0732  FF      		db	0ffh
0733  FF      		db	0ffh
0734  FF      		db	0ffh
0735  FF      		db	0ffh
0736  FF      		db	0ffh
0737  FF      		db	0ffh
0738  FF      		db	0ffh
0739  FF      		db	0ffh
073A  FF      		db	0ffh
073B  FF      		db	0ffh
073C  FF      		db	0ffh
073D  FF      		db	0ffh
073E  FF      		db	0ffh
073F  FF      		db	0ffh
0740  FF      		db	0ffh
0741  FF      		db	0ffh
0742  FF      		db	0ffh
0743  FF      		db	0ffh
0744  FF      		db	0ffh
0745  FF      		db	0ffh
0746  FF      		db	0ffh
0747  FF      		db	0ffh
0748  FF      		db	0ffh
0749  FF      		db	0ffh
074A  FF      		db	0ffh
074B  FF      		db	0ffh
074C  FF      		db	0ffh
074D  FF      		db	0ffh
074E  FF      		db	0ffh
074F  FF      		db	0ffh
0750  FF      		db	0ffh
0751  FF      		db	0ffh
0752  FF      		db	0ffh
0753  FF      		db	0ffh
0754  FF      		db	0ffh
0755  FF      		db	0ffh
0756  FF      		db	0ffh
0757  FF      		db	0ffh
0758  FF      		db	0ffh
0759  FF      		db	0ffh
075A  FF      		db	0ffh
075B  FF      		db	0ffh
075C  FF      		db	0ffh
075D  FF      		db	0ffh
075E  FF      		db	0ffh
075F  FF      		db	0ffh
0760  FF      		db	0ffh
0761  FF      		db	0ffh
0762  FF      		db	0ffh
0763  FF      		db	0ffh
0764  FF      		db	0ffh
0765  FF      		db	0ffh
0766  FF      		db	0ffh
0767  FF      		db	0ffh
0768  FF      		db	0ffh
0769  FF      		db	0ffh
076A  FF      		db	0ffh
076B  FF      		db	0ffh
076C  FF      		db	0ffh
076D  FF      		db	0ffh
076E  FF      		db	0ffh
076F  FF      		db	0ffh
0770  FF      		db	0ffh
0771  FF      		db	0ffh
0772  FF      		db	0ffh
0773  FF      		db	0ffh
0774  FF      		db	0ffh
0775  FF      		db	0ffh
0776  FF      		db	0ffh
0777  FF      		db	0ffh
0778  FF      		db	0ffh
0779  FF      		db	0ffh
077A  FF      		db	0ffh
077B  FF      		db	0ffh
077C  FF      		db	0ffh
077D  FF      		db	0ffh
077E  FF      		db	0ffh
077F  FF      		db	0ffh
0780  FF      		db	0ffh
0781  FF      		db	0ffh
0782  FF      		db	0ffh
0783  FF      		db	0ffh
0784  FF      		db	0ffh
0785  FF      		db	0ffh
0786  FF      		db	0ffh
0787  FF      		db	0ffh
0788  FF      		db	0ffh
0789  FF      		db	0ffh
078A  FF      		db	0ffh
078B  FF      		db	0ffh
078C  FF      		db	0ffh
078D  FF      		db	0ffh
078E  FF      		db	0ffh
078F  FF      		db	0ffh
0790  FF      		db	0ffh
0791  FF      		db	0ffh
0792  FF      		db	0ffh
0793  FF      		db	0ffh
0794  FF      		db	0ffh
0795  FF      		db	0ffh
0796  FF      		db	0ffh
0797  FF      		db	0ffh
0798  FF      		db	0ffh
0799  FF      		db	0ffh
079A  FF      		db	0ffh
079B  FF      		db	0ffh
079C  FF      		db	0ffh
079D  FF      		db	0ffh
079E  FF      		db	0ffh
079F  FF      		db	0ffh
07A0  FF      		db	0ffh
07A1  FF      		db	0ffh
07A2  FF      		db	0ffh
07A3  FF      		db	0ffh
07A4  FF      		db	0ffh
07A5  FF      		db	0ffh
07A6  FF      		db	0ffh
07A7  FF      		db	0ffh
07A8  FF      		db	0ffh
07A9  FF      		db	0ffh
07AA  FF      		db	0ffh
07AB  FF      		db	0ffh
07AC  FF      		db	0ffh
07AD  FF      		db	0ffh
07AE  FF      		db	0ffh
07AF  FF      		db	0ffh
07B0  FF      		db	0ffh
07B1  FF      		db	0ffh
07B2  FF      		db	0ffh
07B3  FF      		db	0ffh
07B4  FF      		db	0ffh
07B5  FF      		db	0ffh
07B6  FF      		db	0ffh
07B7  FF      		db	0ffh
07B8  FF      		db	0ffh
07B9  FF      		db	0ffh
07BA  FF      		db	0ffh
07BB  FF      		db	0ffh
07BC  FF      		db	0ffh
07BD  FF      		db	0ffh
07BE  FF      		db	0ffh
07BF  FF      		db	0ffh
07C0  FF      		db	0ffh
07C1  FF      		db	0ffh
07C2  FF      		db	0ffh
07C3  FF      		db	0ffh
07C4  FF      		db	0ffh
07C5  FF      		db	0ffh
07C6  FF      		db	0ffh
07C7  FF      		db	0ffh
07C8  FF      		db	0ffh
07C9  FF      		db	0ffh
07CA  FF      		db	0ffh
07CB  FF      		db	0ffh
07CC  FF      		db	0ffh
07CD  FF      		db	0ffh
07CE  FF      		db	0ffh
07CF  FF      		db	0ffh
07D0  FF      		db	0ffh
07D1  FF      		db	0ffh
07D2  FF      		db	0ffh
07D3  FF      		db	0ffh
07D4  FF      		db	0ffh
07D5  FF      		db	0ffh
07D6  FF      		db	0ffh
07D7  FF      		db	0ffh
07D8  FF      		db	0ffh
07D9  FF      		db	0ffh
07DA  FF      		db	0ffh
07DB  FF      		db	0ffh
07DC  FF      		db	0ffh
07DD  FF      		db	0ffh
07DE  FF      		db	0ffh
07DF  FF      		db	0ffh
07E0  FF      		db	0ffh
07E1  FF      		db	0ffh
07E2  FF      		db	0ffh
07E3  FF      		db	0ffh
07E4  FF      		db	0ffh
07E5  FF      		db	0ffh
07E6  FF      		db	0ffh
07E7  FF      		db	0ffh
07E8  FF      		db	0ffh
07E9  FF      		db	0ffh
07EA  FF      		db	0ffh
07EB  FF      		db	0ffh
07EC  FF      		db	0ffh
07ED  FF      		db	0ffh
07EE  FF      		db	0ffh
07EF  FF      		db	0ffh
07F0  FF      		db	0ffh
07F1  FF      		db	0ffh
07F2  FF      		db	0ffh
07F3  FF      		db	0ffh
07F4  FF      		db	0ffh
07F5  FF      		db	0ffh
07F6  FF      		db	0ffh
07F7  FF      		db	0ffh
07F8  FF      		db	0ffh
07F9  FF      		db	0ffh
07FA  FF      		db	0ffh
07FB  FF      		db	0ffh
07FC  FF      		db	0ffh
07FD  FF      		db	0ffh
07FE  FF      		db	0ffh
07FF  FF      		db	0ffh
		
		; RAM used...
FF00          		org	0ff00h
FF00          	addr0:	ds	2
FF02          	addr1:	ds	2
FF04          	line:	ds	64
		
FF44          		end



Statistics:

     4	passes
     0	jr promotions
   154	symbols
  2048	bytes

   490	macro calls
  3759	macro bytes
     0	invented symbols
