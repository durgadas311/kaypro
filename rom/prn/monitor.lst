		; serial-port ROM monitor/boot for debugging Kaypro.
		; Uses "aux serial" a.k.a "Serial Printer" port.
		
0027          	VERN	equ	027h	; ROM version
		
0000          	rom2k	equ	0
		
0000          	 if rom2k
		 else
1000          	romsiz	equ	1000h	; minimum space for ROM
		 endif
		
			maclib	z80
**** z80.lib ****
**** monitor.asm ****
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
			$*macro
		
000D          	CR	equ	13
000A          	LF	equ	10
0003          	CTLC	equ	3
0007          	BEL	equ	7
0009          	TAB	equ	9
0008          	BS	equ	8
001B          	ESC	equ	27
0000          	TRM	equ	0
007F          	DEL	equ	127
		
		; WD1943 at 5.0688MHz...
000E          	B9600	equ	0eh
0005          	B300	equ	05h
		; */84 (and 10) sysport drive select
0002          	DS0	equ	0010b
0001          	DS1	equ	0001b
0003          	DSNONE	equ	0011b	; also mask
0010          	K84MTR	equ	00010000b	; */84 (10) MOTOR control, 1=ON
0010          	K83PPS	equ	00010000b	; */83 ParPrt strobe (normally 0)
0040          	K84CCG	equ	01000000b	; */84 (10) CharGen A12
0040          	K83MTR	equ	01000000b	; */83 MOTOR control, 1=OFF
		
0004          	sio1	equ	04h	; "serial data", "keyboard"
000C          	sio2	equ	0ch	; "serial printer", "modem"
0000          	brd1	equ	00h
0008          	brd2	equ	08h
		
0000          	sioA	equ	00h	; offsets
0001          	sioB	equ	01h
		
0000          	sioD	equ	00h	; offsets
0002          	sioC	equ	02h
		
		; Choose Z80SIO port to use...
0004          	condat	equ	sio1+sioA+sioD
0006          	conctl	equ	sio1+sioA+sioC
0000          	conbrr	equ	brd1
		
0005          	kbddat	equ	sio1+sioB+sioD
0007          	kbdctl	equ	sio1+sioB+sioC
000C          	kbdbrr	equ	0ch	; */83 uses WD1943, else hardwired to 300 baud
		
001C          	crtctl	equ	1ch	; */84 and 10 only
001D          	crtdat	equ	1dh	; */84 and 10 only
001F          	crtram	equ	1fh	; also accesses CRTC
		
0014          	sysp84	equ	14h	; sysport on */84 (and 10). */83 have nothing here.
		
0010          	fpysts	equ	10h
0010          	fpycmd	equ	10h
0011          	fpytrk	equ	11h
0012          	fpysec	equ	12h
0013          	fpydat	equ	13h
		
0080          	hdddat	equ	80h
0081          	hdderr	equ	81h
0082          	hddcnt	equ	82h
0083          	hddsec	equ	83h
0084          	hddclo	equ	84h
0085          	hddchi	equ	85h
0086          	hddsdh	equ	86h
0087          	hddcmd	equ	87h
		
0000          	stack	equ	00000h	; stack at top of memory (wrapped)
		
		; Defined entry points:
		; 0003: conout, C=char
		; 000B: hexout, A=value
		; 0013: msgprt, HL=string (NUL)
		; 001B: crlf
		; 0023: (reserved)
		; 002B: (reserved)
		; 0033:	sample I/O port C, initial val B, A=max (returns DE)
		; 003B: dump samples 8000H to DE
		
		; Start of ROM code
0000          		org	00000h
0000  C37000  	reset:	jmp	init
0003  C38F00  		jmp	conout	; 0003: conout, C=char
0006  FFFF    		db	0ffh,0ffh
		
0008  C34B00  	rst1:	jmp	swtrap
000B  C37409  		jmp	hexout	; 000B:
000E  FFFF    		db	0ffh,0ffh
		
0010  C34B00  	rst2:	jmp	swtrap
0013  C39809  		jmp	msgprt	; 0013:
0016  FFFF    		db	0ffh,0ffh
		
0018  C34B00  	rst3:	jmp	swtrap
001B  C38E09  		jmp	crlf	; 001B:
001E  FFFF    		db	0ffh,0ffh
		
0020  C34B00  	rst4:	jmp	swtrap
0023  C34B00  		jmp	swtrap	; 0023:
0026  FFFF    		db	0ffh,0ffh
		
0028  C34B00  	rst5:	jmp	swtrap
002B  C34B00  		jmp	swtrap	; 002B:
002E  FFFF    		db	0ffh,0ffh
		
0030  C34B00  	rst6:	jmp	swtrap
0033  C32009  		jmp	xsamp1	; 0033: sample a port
0036  FFFF    		db	0ffh,0ffh
		
0038  C34B00  	rst7:	jmp	swtrap
003B  C34D09  		jmp	ysamp	; 003B: dump samples
003E  FFFF    		db	0ffh,0ffh
		
			; NMI needed for FLPY testing
		
0040  0D0A2A2A	swt:	db	CR,LF,'*** RST ',TRM
      2A205253
      542000
		
004B  F3      	swtrap:	di		; try to recover return address...
004C  D1      		pop	d	; should be caller of RST...
004D  310000  		lxi	sp,stack
0050  D5      		push	d	; not needed?
0051  214000  		lxi	h,swt
0054  CD9809  		call	msgprt
0057  D1      		pop	d
0058  CD6F09  		call	taddr
005B  CD8E09  		call	crlf
005E  C3E200  		jmp	debug
		
			rept	0066h-$
0061  FF      		db	0ffh
0062  FF      		db	0ffh
0063  FF      		db	0ffh
0064  FF      		db	0ffh
0065  FF      		db	0ffh
0000          	 if $ <> 0066h
		 endif
0066  C9      	nmi:	ret
		
0067  18      	sioini:	db	18h	; reset
0068  0444    		db	4,044h	; 16x, 1s, Np
006A  03C1    		db	3,0c1h	; 8b, RxEn
006C  05EA    		db	5,0eah	; DTR, 8b, TxEn, RTS
006E  0100    		db	1,000h	;
0009          	siolen	equ	$-sioini
		
		; ROM start point - initialize everything
		; We know we have 64K RAM...
0070  F3      	init:	di
0071  310000  		lxi	sp,stack
		
			; init serial port
0074  3E0E    		mvi	a,B9600
0076  D300    		out	conbrr
0078  216700  		lxi	h,sioini
007B  0E06    		mvi	c,conctl
007D  0609    		mvi	b,siolen
007F          		outir
007F  EDB3    		DB	0EDH,0B3H
		
0081  21C500  		lxi	h,signon
0084  CD9809  		call	msgprt
		
0087  CD450A  		call	proginit
008A  C3E200  		jmp	debug
		
008D          	belout:
008D  0E07    		mvi	c,BEL
		; Output char to console
		; C=char
008F          	conout:
008F  DB06    		in	conctl
0091  E604    		ani	00000100b
0093          		jrz	conout
0093  28FA    		DB	28H,conout-$-1
0095  79      		mov	a,c
0096  D304    		out	condat
0098  C9      		ret
		
0099  0D0A3A20	prompt:	db	CR,LF,': ',TRM
      00
		
		; Get char from console
		; Returns: A=char, stripped
009E  E5      	conin:	push	h
009F  210000  	ci2:	lxi	h,0
00A2  DB06    	ci0:	in	conctl		; 11
00A4  E601    		ani	00000001b	;  7
00A6          		jrnz	ci1		;  7
00A6  200A    		DB	20H,ci1-$-1
00A8  2B      		dcx	h		;  6
00A9  7D      		mov	a,l		;  4
00AA  B4      		ora	h		;  4
00AB          		jrnz	ci0		; 12 = 51 (12.75uS) (~0.8 sec)
00AB  20F5    		DB	20H,ci0-$-1
00AD  CD690A  		call	progress	; on */83 (20.4uS or ~1.3 sec)
00B0          		jr	ci2
00B0  18ED    		DB	18H,ci2-$-1
00B2  DB04    	ci1:	in	condat
00B4  E67F    		ani	07fh
00B6  E1      		pop	h
00B7  C9      		ret
		
		; Get char from console, toupper and echo
00B8          	conine:
00B8  CD9E00  		call	conin
00BB  CDA809  		call	toupper
00BE  F5      		push	psw
00BF  4F      		mov	c,a
00C0  CD8F00  		call	conout
00C3  F1      		pop	psw
00C4  C9      		ret
		
00C5  0D0A4B61	signon:	db	CR,LF,'Kaypro'
      7970726F
0000          	 if rom2k
		 endif
00CD  204D6F6E		db	' Monitor v'
      69746F72
      2076
00D7  322E37  	vernum:	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
00DA  0D0A00  		db	CR,LF,TRM
		
00DD  0D0A073F	errm:	db	CR,LF,BEL,'?',TRM
      00
		
		*********************************************************
		**  Debug mode
		*********************************************************
		
00E2          	debug:
00E2  310000  	cilp:	lxi	sp,stack
00E5  21E200  		lxi	h,cilp		;setup return address
00E8  E5      		push	h
00E9  219900  		lxi	h,prompt	;prompt for a command
00EC  CD9809  		call	msgprt
00EF  CDB109  		call	linein		;wait for command line to be entered
00F2  CD580A  		call	progoff		; turn off progress indicators
00F5  1104FF  		lxi	d,line
00F8  CDFF09  		call	char		;get first character
00FB  C8      		rz			;ignore line if it is empty
00FC  211601  		lxi	h,comnds	;search table for command character
00FF  060C    		mvi	b,ncmnds	;(number of commands)
0101  BE      	cci0:	cmp	m		;search command table
0102  23      		inx	h
0103          		jrz	gotocmd		;command was found, execute it
0103  280A    		DB	28H,gotocmd-$-1
0105  23      		inx	h		;step past routine address
0106  23      		inx	h
0107          		djnz	cci0		;loop untill all valid commands are checked
0107  10F8    		DB	10H,cci0-$-1
0109  21DD00  	error:	lxi	h,errm		;if command unknown, beep and re-prompt
010C  C39809  		jmp	msgprt
		
010F          	gotocmd:
010F  D5      		push	d		;save command line buffer pointer
0110  5E      		mov	e,m		;get command routine address
0111  23      		inx	h
0112  56      		mov	d,m		;DE = routine address
0113  EB      		xchg			;HL = routine address
0114  D1      		pop	d		;restore buffer pointer
0115  E9      		pchl			;jump to command routine
		
		; All commands are started with DE=next char in line buffer
0116          	comnds:
0116  3F      		db	'?'
0117  2C03    		dw	Qcomnd
0119  44      		db	'D'
011A  D403    		dw	Dcomnd
011C  53      		db	'S'
011D  3A04    		dw	Scomnd
011F  47      		db	'G'
0120  A204    		dw	Gcomnd
0122  4D      		db	'M'
0123  3303    		dw	Mcomnd
0125  46      		db	'F'
0126  9403    		dw	Fcomnd
0128  49      		db	'I'
0129  DD04    		dw	Icomnd
012B  4F      		db	'O'
012C  2F05    		dw	Ocomnd
012E  48      		db	'H'
012F  DA08    		dw	Hcomnd
0131  4E      		db	'N'
0132  6405    		dw	Ncomnd
0134  54      		db	'T'
0135  2806    		dw	Tcomnd
0137  56      		db	'V'
0138  BA08    		dw	Vcomnd
000C          	ncmnds	equ	($-comnds)/3
		
		*********************************************************
		**  Command subroutines
		*********************************************************
		
013A          	menu:
013A  0D0A4420		db	CR,LF,'D <start> <end> - display memory in HEX'
      3C737461
      72743E20
      3C656E64
      3E202D20
      64697370
      6C617920
      6D656D6F
      72792069
      6E204845
      58
0163  0D0A5320		db	CR,LF,'S <start> - set/view memory'
      3C737461
      72743E20
      2D207365
      742F7669
      6577206D
      656D6F72
      79
0180  0D0A2020		db	CR,LF,'    (CR) = skip fwd, ''-'' = skip bkwd, ''.'' = done'
      20202843
      5229203D
      20736B69
      70206677
      642C2027
      2D27203D
      20736B69
      7020626B
      77642C20
      272E2720
      3D20646F
      6E65
01B2  0D0A4720		db	CR,LF,'G <start> - go to address'
      3C737461
      72743E20
      2D20676F
      20746F20
      61646472
      657373
01CD  0D0A4620		db	CR,LF,'F <start> <end> <data> - fill memory'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6174613E
      202D2066
      696C6C20
      6D656D6F
      7279
01F3  0D0A4D20		db	CR,LF,'M <start> <end> <dest> - Move data'
      3C737461
      72743E20
      3C656E64
      3E203C64
      6573743E
      202D204D
      6F766520
      64617461
0217  0D0A4920		db	CR,LF,'I <port> [num] - Input from port'
      3C706F72
      743E205B
      6E756D5D
      202D2049
      6E707574
      2066726F
      6D20706F
      7274
0239  0D0A4F20		db	CR,LF,'O <port> <value> [...] - Output to port'
      3C706F72
      743E203C
      76616C75
      653E205B
      2E2E2E5D
      202D204F
      75747075
      7420746F
      20706F72
      74
0262  0D0A4820		db	CR,LF,'H - Hexload program'
      2D204865
      786C6F61
      64207072
      6F677261
      6D
0277  0D0A4E20		db	CR,LF,'N <hw> - iNitialize hardware (KB83'
      3C68773E
      202D2069
      4E697469
      616C697A
      65206861
      72647761
      72652028
      4B423833
FFFF          	 if not rom2k
029B  2C204B42		db		', KB84, CRTC, HDD'
      38342C20
      43525443
      2C204844
      44
		 endif
02AC  29      		db		')'
02AD  0D0A5420		db	CR,LF,'T <hw> - Test hardware'
      3C68773E
      202D2054
      65737420
      68617264
      77617265
02C5  0D0A2020		db	CR,LF,'  (KBD'
      284B4244
FFFF          	 if not rom2k
02CD  2C204352		db		', CRTC, VRT, CRTR, CRTF, HDD, HDRD'
      54432C20
      5652542C
      20435254
      522C2043
      5254462C
      20484444
      2C204844
      5244
		 endif
02EF  2C204644		db		', FDRD, FLPY)'
      52442C20
      464C5059
      29
02FC  0D0A5620		db	CR,LF,'V - Show ROM version'
      2D205368
      6F772052
      4F4D2076
      65727369
      6F6E
0312  0D0A5E43		db	CR,LF,'^C aborts command entry'
      2061626F
      72747320
      636F6D6D
      616E6420
      656E7472
      79
032B  00      		db	TRM
		
032C          	Qcomnd:
032C  213A01  		lxi	h,menu
032F  CD9809  		call	msgprt
0332  C9      		ret
		
0333  CD0B0A  	Mcomnd:	call	getaddr
0336  DA0901  		jc	error
0339          		bit	7,b
0339  CB78    		DB	0CBH,7*8+b+40H
033B  C20901  		jnz	error
033E  2200FF  		shld	addr0
0341  CD0B0A  		call	getaddr
0344  DA0901  		jc	error
0347          		bit	7,b
0347  CB78    		DB	0CBH,7*8+b+40H
0349  C20901  		jnz	error
034C  2202FF  		shld	addr1
034F  CD0B0A  		call	getaddr
0352  DA0901  		jc	error
0355          		bit	7,b
0355  CB78    		DB	0CBH,7*8+b+40H
0357  C20901  		jnz	error
035A  EB      		xchg
035B          		lbcd	addr0
035B  ED4B    		DB	0EDH,4BH
035D  00FF    		DW	addr0
035F  2A02FF  		lhld	addr1
0362  B7      		ora	a
0363          		dsbc	b
0363  ED42    		DB	0EDH,b*8+42H
0365  DA0901  		jc	error
0368  23      		inx	h
0369  4D      		mov	c,l
036A  44      		mov	b,h
036B  D5      		push	d
036C  EB      		xchg
036D  09      		dad	b
036E  D1      		pop	d
036F  DA0901  		jc	error
0372  2A02FF  		lhld	addr1
0375  CDA209  		call	check
0378  DA8E03  		jc	mc0
037B  2A00FF  		lhld	addr0
037E  CDA209  		call	check
0381  D28E03  		jnc	mc0
0384  2A02FF  		lhld	addr1
0387  EB      		xchg
0388  09      		dad	b
0389  2B      		dcx	h
038A  EB      		xchg
038B          		lddr
038B  EDB8    		DB	0EDH,0B8H
038D  C9      		ret
038E  2A00FF  	mc0:	lhld	addr0
0391          		ldir
0391  EDB0    		DB	0EDH,0B0H
0393  C9      		ret
0394          	Fcomnd:
0394  CD0B0A  		call	getaddr ;get address to start at
0397  DA0901  		jc	error	;error if non-hex character
039A          		bit	7,b	;test for no address (different from 0000)
039A  CB78    		DB	0CBH,7*8+b+40H
039C  C20901  		jnz	error	;error if no address was entered
039F  2200FF  		shld	addr0	;save starting address
03A2  CD0B0A  		call	getaddr ;get stop address
03A5  DA0901  		jc	error	;error if non-hex character
03A8          		bit	7,b	;test for no entry
03A8  CB78    		DB	0CBH,7*8+b+40H
03AA  C20901  		jnz	error	;error if no stop address
03AD  2202FF  		shld	addr1	;save stop address
03B0  CD0B0A  		call	getaddr ;get fill data
03B3  DA0901  		jc	error	;error if non-hex character
03B6          		bit	7,b	;test for no entry
03B6  CB78    		DB	0CBH,7*8+b+40H
03B8  C20901  		jnz	error	;error if no fill data
03BB  7C      		mov	a,h
03BC  B7      		ora	a
03BD  C20901  		jnz	error
03C0  4D      		mov	c,l	;(C)=fill data
03C1  2A02FF  		lhld	addr1	;get stop address
03C4          		lded	addr0	;get start address
03C4  ED5B    		DB	0EDH,5BH
03C6  00FF    		DW	addr0
03C8  79      	fc0:	mov	a,c	;
03C9  12      		stax	d	;put byte in memory
03CA  13      		inx	d	;step to next byte
03CB  7A      		mov	a,d	;
03CC  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
03CD  C8      		rz		;
03CE  CDA209  		call	check	;test for past stop address
03D1  D8      		rc	;quit if past stop address
03D2          		jr	fc0
03D2  18F4    		DB	18H,fc0-$-1
		
03D4          	Dcomnd:		;display memory
03D4  CD0B0A  		call	getaddr ;get address to start at
03D7  DA0901  		jc	error	;error if non-hex character
03DA          		bit	7,b	;test for no address (different from 0000)
03DA  CB78    		DB	0CBH,7*8+b+40H
03DC  C20901  		jnz	error	;error if no address was entered
03DF  2200FF  		shld	addr0	;save starting address
03E2  CD0B0A  		call	getaddr ;get stop address
03E5  DA0901  		jc	error	;error if non-hex character
03E8          		bit	7,b	;test for no entry
03E8  CB78    		DB	0CBH,7*8+b+40H
03EA  C20901  		jnz	error	;error if no stop address
03ED          		lded	addr0	;get start address into (DE)
03ED  ED5B    		DB	0EDH,5BH
03EF  00FF    		DW	addr0
03F1  CD8E09  	dis0:	call	crlf	;start on new line
03F4  CD6F09  		call	taddr	;print current address
03F7  CD8909  		call	space	;delimit it from data
03FA  0610    		mvi	b,16	;display 16 bytes on each line
03FC  1A      	dis1:	ldax	d	;get byte to display
03FD  13      		inx	d	;step to next byte
03FE  CD7409  		call	hexout	;display this byte in HEX
0401  CD8909  		call	space	;delimit it from others
0404  7A      		mov	a,d
0405  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
0406          		jrz	dis2
0406  2807    		DB	28H,dis2-$-1
0408  CDA209  		call	check	;test for past stop address
040B          		jrc	dis2	;quit if past stop address
040B  3802    		DB	38H,dis2-$-1
040D          		djnz	dis1	;else do next byte on this line
040D  10ED    		DB	10H,dis1-$-1
040F  CD8909  	dis2:	call	space	;delimit it from data
0412  CD8909  		call	space
0415          		lded	addr0
0415  ED5B    		DB	0EDH,5BH
0417  00FF    		DW	addr0
0419  0610    		mvi	b,16	;display 16 bytes on each line
041B  1A      	dis3:	ldax	d	;get byte to display
041C  13      		inx	d	;step to next byte
041D  0E2E    		mvi	c,'.'
041F  FE20    		cpi	' '
0421          		jrc	dis4
0421  3805    		DB	38H,dis4-$-1
0423  FE7F    		cpi	'~'+1
0425          		jrnc	dis4
0425  3001    		DB	30H,dis4-$-1
0427  4F      		mov	c,a
0428  CD8F00  	dis4:	call	conout
042B  7A      		mov	a,d
042C  B3      		ora	e	;if we reach 0000, stop. (don't wrap around)
042D  C8      		rz
042E  CDA209  		call	check	;test for past stop address
0431  D8      		rc	;quit if past stop address
0432          		djnz	dis3	;else do next byte on this line
0432  10E7    		DB	10H,dis3-$-1
0434          		sded	addr0
0434  ED53    		DB	0EDH,53H
0436  00FF    		DW	addr0
0438          		jr	dis0	;when line is finished, start another
0438  18B7    		DB	18H,dis0-$-1
		
043A          	Scomnd: 		;substitute (set) memory
043A  CD0B0A  		call	getaddr ;get address to start substitution at
043D  DA0901  		jc	error	;error if non-hex character
0440          		bit	7,b	;test for no entry
0440  CB78    		DB	0CBH,7*8+b+40H
0442  C20901  		jnz	error	;error if no address
0445  EB      		xchg		;put address in (DE)
0446  CD8E09  	sb1:	call	crlf	;start on new line
0449  CD6F09  		call	taddr	;print address
044C  CD8909  		call	space	;and delimit it
044F  1A      		ldax	d	;get current value of byte
0450  CD7409  		call	hexout	;and display it
0453  CD8909  		call	space	;delimit it from user's (posible) entry
0456  0600    		mvi	b,0	;zero accumilator for user's entry
0458  CDB800  	sb2:	call	conine	;get user's first character
045B  FE0D    		cpi	CR	;if CR then skip to next byte
045D          		jrz	foward
045D  2833    		DB	28H,foward-$-1
045F  FE20    		cpi	' '	;or if Space then skip to next
0461          		jrz	foward
0461  282F    		DB	28H,foward-$-1
0463  FE2D    		cpi	'-'	;if Minus then step back to previous address
0465          		jrz	bakwrd
0465  282E    		DB	28H,bakwrd-$-1
0467  FE2E    		cpi	'.'	;if Period then stop substitution
0469  C8      		rz
046A  CD320A  		call	hexcon	;if none of the above, should be HEX digit
046D          		jrc	error0	;error if not
046D  3829    		DB	38H,error0-$-1
046F          		jr	sb3	;start accumilating HEX digits
046F  1805    		DB	18H,sb3-$-1
0471  CD320A  	sb0:	call	hexcon	;test for HEX digit
0474          		jrc	error1	;error if not HEX
0474  3827    		DB	38H,error1-$-1
0476          	sb3:	slar	b	;roll accumilator to receive new digit
0476  CB20    		DB	0CBH, 20H + b
0478          		slar	b
0478  CB20    		DB	0CBH, 20H + b
047A          		slar	b
047A  CB20    		DB	0CBH, 20H + b
047C          		slar	b
047C  CB20    		DB	0CBH, 20H + b
047E  B0      		ora	b	;merge in new digit
047F  47      		mov	b,a
0480  CDB800  	sb4:	call	conine	;get next character
0483  FE0D    		cpi	CR	;if CR then put existing byte into memory
0485          		jrz	putbyte ;  and step to next.
0485  2809    		DB	28H,putbyte-$-1
0487  FE2E    		cpi	'.'
0489  C8      		rz
048A  FE7F    		cpi	del	;if DEL then restart at same address
048C          		jrz	sb1
048C  28B8    		DB	28H,sb1-$-1
048E          		jr	sb0	;else continue entering hex digits
048E  18E1    		DB	18H,sb0-$-1
0490          	putbyte:
0490  78      		mov	a,b	;store accumilated byte in memory
0491  12      		stax	d
0492          	foward:
0492  13      		inx	d	;step to next location
0493          		jr	sb1	;and allow substitution there
0493  18B1    		DB	18H,sb1-$-1
		
0495          	bakwrd:
0495  1B      		dcx	d	;move address backward one location
0496          		jr	sb1
0496  18AE    		DB	18H,sb1-$-1
		
0498  CD8D00  	error0:	call	belout	;user's entry was not valid, beep and continue
049B          		jr	sb2
049B  18BB    		DB	18H,sb2-$-1
049D  CD8D00  	error1:	call	belout	;same as above but for different section of routine
04A0          		jr	sb4
04A0  18DE    		DB	18H,sb4-$-1
		
04A2          	Gcomnd: 		;jump to address given by user
04A2  CD0B0A  		call	getaddr ;get address to jump to
04A5  DA0901  		jc	error	;error if non-hex character
04A8          		bit	7,b	;test for no entry
04A8  CB78    		DB	0CBH,7*8+b+40H
04AA  C20901  		jnz	error	;error if no address entered
04AD  CD8E09  		call	crlf	;on new line,
04B0  0E47    		mvi	c,'G'	;display "GO aaaa?" to ask
04B2  CD8F00  		call	conout	;user to verify that we should
04B5  0E4F    		mvi	c,'O'	;jump to this address (in case user
04B7  CD8F00  		call	conout	;made a mistake we should not blindly
04BA  CD8909  		call	space	;commit suicide)
04BD  EB      		xchg
04BE  CD6F09  		call	taddr
04C1  CD8909  		call	space
04C4  0E3F    		mvi	c,'?'
04C6  CD8F00  		call	conout
04C9  CDB800  		call	conine	;wait for user to type "Y" to
04CC  FE59    		cpi	'Y'	;indicate that we should jump.
04CE  C0      		rnz		;abort if response was not "Y"
04CF  CD8E09  		call	crlf	; visual feedback
04D2  EB      		xchg
04D3  E9      		pchl		;else jump to address
		
04D4  0D0A496E	inpms:	db	CR,LF,'Input ',TRM
      70757420
      00
04DD          	Icomnd:
04DD  CD0B0A  		call	getaddr ;get port address, ignore extra MSDs
04E0  DA0901  		jc	error	;error if non-hex character
04E3          		bit	7,b	;test for no entry
04E3  CB78    		DB	0CBH,7*8+b+40H
04E5  C20901  		jnz	error	;error if no address entered
04E8  E5      		push	h	; save port
04E9  CD0B0A  		call	getaddr	; hex number of inputs to do
04EC  DA0901  		jc	error
04EF          		bit	7,b
04EF  CB78    		DB	0CBH,7*8+b+40H
04F1          		jrz	ic0
04F1  2803    		DB	28H,ic0-$-1
04F3  210100  		lxi	h,1
04F6          	ic0:
04F6  E3      		xthl		; save count
04F7  E5      		push	h	; re-save port
04F8  21D404  		lxi	h,inpms
04FB  CD9809  		call	msgprt
04FE  E1      		pop	h
04FF  E5      		push	h
0500  7D      		mov	a,l
0501  CD7409  		call	hexout
0504  CD8909  		call	space
0507  0E3D    		mvi	c,'='
0509  CD8F00  		call	conout
			; "Input XX ="
050C  C1      		pop	b	; port to BC
050D  E1      		pop	h	; count to HL (L)
050E  260D    		mvi	h,16-3
0510  0600    		mvi	b,0	; safety
0512  C5      		push	b	; C gets trashed by conout
0513          	ic1:
0513  CD8909  		call	space
0516  C1      		pop	b
0517  C5      		push	b
0518          		inp	a
0518  ED78    		DB	0EDH,a*8+40H
051A  CD7409  		call	hexout
051D  2D      		dcr	l	; assume <= 256
051E          		jrz	ic2
051E  280A    		DB	28H,ic2-$-1
0520  25      		dcr	h	; col count
0521          		jrnz	ic1
0521  20F0    		DB	20H,ic1-$-1
0523  CD8E09  		call	crlf
0526  2610    		mvi	h,16
0528          		jr	ic1
0528  18E9    		DB	18H,ic1-$-1
052A          	ic2:
052A  C1      		pop	b	; fix stack
052B  CD8E09  		call	crlf
052E  C9      		ret
		
		; TODO: no feedback?
052F          	Ocomnd:
052F  CD0B0A  		call	getaddr ;get port address, ignore extra MSDs
0532  DA0901  		jc	error	;error if non-hex character
0535          		bit	7,b	;test for no entry
0535  CB78    		DB	0CBH,7*8+b+40H
0537  C20901  		jnz	error	;error if no address entered
053A  2600    		mvi	h,0	; safety
053C  E5      		push	h	; save port
053D  CD0B0A  		call	getaddr ;get value, ignore extra MSDs
0540  DA0901  		jc	error	;error if non-hex character
0543          		bit	7,b	;test for no entry
0543  CB78    		DB	0CBH,7*8+b+40H
0545  C20901  		jnz	error	;error if no value entered
0548  CD8E09  		call	crlf
054B          	oc0:		; L has byte to output...
054B  C1      		pop	b	; port
054C  C5      		push	b
054D          		outp	l
054D  ED69    		DB	0EDH,l*8+41H
054F  CD0B0A  		call	getaddr ;get value, ignore extra MSDs
0552  DA0901  		jc	error	;error if non-hex character
					;NOTE: some output has been sent
0555          		bit	7,b	;test for no entry
0555  CB78    		DB	0CBH,7*8+b+40H
0557          		jrz	oc0	;still more to send
0557  28F2    		DB	28H,oc0-$-1
0559  E1      		pop	h	; discard port
055A  C9      		ret
		
055B  CDFF09  	skb:	call	char
055E  C8      		rz		;end of buffer/line before a character was found (ZR)
055F  FE20    		cpi	' '	;skip all leading spaces
0561  C0      		rnz		;if not space, then done (NZ)
0562          		jr	skb	;else if space, loop untill not space
0562  18F7    		DB	18H,skb-$-1
		
0564          	Ncomnd:
0564  CD5B05  		call	skb	; skip blanks
0567  CA0901  		jz	error	; required param
			; this may need refinement
056A  1B      		dcx	d
056B  218E05  		lxi	h,kb83
056E  CD1406  		call	strcmp
0571          		jrz	nkb83
0571  284F    		DB	28H,nkb83-$-1
FFFF          	 if not rom2k
0573  219305  		lxi	h,kb84
0576  CD1406  		call	strcmp
0579          		jrz	nkb84
0579  284B    		DB	28H,nkb84-$-1
057B  219805  		lxi	h,crtc
057E  CD1406  		call	strcmp
0581          		jrz	ncrtc
0581  284D    		DB	28H,ncrtc-$-1
0583  21AB05  		lxi	h,hdd
0586  CD1406  		call	strcmp
0589          		jrz	nhdd
0589  286B    		DB	28H,nhdd-$-1
		 endif
058B  C30901  		jmp	error
		
058E  4B423833	kb83:	db	'KB83',TRM
      00
FFFF          	 if not rom2k
0593  4B423834	kb84:	db	'KB84',TRM
      00
0598  43525443	crtc:	db	'CRTC',TRM
      00
059D  43525452	crtr:	db	'CRTR',TRM
      00
05A2  43525446	crtf:	db	'CRTF',TRM
      00
05A7  56525400	vrt:	db	'VRT',TRM
05AB  48444400	hdd:	db	'HDD',TRM
05AF  48445244	hdrd:	db	'HDRD',TRM
      00
		 endif
05B4  46445244	fdrd:	db	'FDRD',TRM
      00
05B9  464C5059	flpy:	db	'FLPY',TRM
      00
05BE  4B424400	kbd:	db	'KBD',TRM
		
05C2  3E05    	nkb83:	mvi	a,B300
05C4  D30C    		out	kbdbrr	; */83 baud gen for SIO1 ch B
05C6  216700  	nkb84:	lxi	h,sioini
05C9  0E07    		mvi	c,kbdctl
05CB  0609    		mvi	b,siolen
05CD          		outir
05CD  EDB3    		DB	0EDH,0B3H
05CF  C9      		ret
		
FFFF          	 if not rom2k
05D0  21E605  	ncrtc:	lxi	h,crtini
05D3  0E1D    		mvi	c,crtdat	; */84 CRTC 6545 data port
05D5  0610    		mvi	b,16
05D7  AF      		xra	a	; start with reg 00
05D8  0D      	nc0:	dcr	c
05D9          		outp	a	; select reg
05D9  ED79    		DB	0EDH,a*8+41H
05DB  3C      		inr	a	; ++reg
05DC  0C      		inr	c	;
05DD          		outi
05DD  EDA3    		DB	0EDH,0A3H
05DF          		jrnz	nc0
05DF  20F7    		DB	20H,nc0-$-1
05E1  3E1F    		mvi	a,31	; R31 enables CRTC
05E3  D31C    		out	crtctl
05E5  C9      		ret
		
05E6  6A505699	crtini:	db	6ah,50h,56h,99h,19h,0ah,19h,19h,78h,0fh,60h,0fh,00h,00h,00h,00h
      190A1919
      780F600F
      00000000
		
05F6  DB14    	nhdd:	in	sysp84
05F8          		setb	1,a
05F8  CBCF    		DB	0CBH,1*8+a+0C0H
05FA  D314    		out	sysp84	; MR on (if not already)
			; need 50mS... 200000 cycles or 7693 loops
05FC  211027  		lxi	h,10000
05FF  2B      	nh0:	dcx	h	;  6
0600  7C      		mov	a,h	;  4
0601  B7      		ora	a	;  4
0602          		jrnz	nh0	; 12 = 26 cycles
0602  20FB    		DB	20H,nh0-$-1
0604  CD8E09  		call	crlf
0607  DB14    		in	sysp84
0609          		res	1,a
0609  CB8F    		DB	0CBH,1*8+a+80H
060B  D314    		out	sysp84	; MR off
060D  0E87    		mvi	c,hddcmd
060F  0600    		mvi	b,0	; assume starting status
0611  C31F08  		jmp	thdd1
		 endif
		
		; if match, return DE after last match.
		; if no match, return original DE.
0614  D5      	strcmp:	push	d
0615  AF      		xra	a
0616  BE      	sc0:	cmp	m	; TRM?
0617          		jrz	sc9	; A = 0
0617  2808    		DB	28H,sc9-$-1
0619  1A      		ldax	d
061A  96      		sub	m
061B          		jrnz	sc8	; A is NZ
061B  2008    		DB	20H,sc8-$-1
061D  23      		inx	h
061E  13      		inx	d
061F          		jr	sc0
061F  18F5    		DB	18H,sc0-$-1
0621  33      	sc9:	inx	sp	; non-destructive POP
0622  33      		inx	sp
0623  AF      		xra	a	; A=0 and ZR
0624  C9      		ret
0625  D1      	sc8:	pop	d	; restore orig location
0626  B7      		ora	a
0627  C9      		ret
		
0628          	Tcomnd:
0628  CD5B05  		call	skb	; skip blanks
062B  CA0901  		jz	error	; required param
			; this may need refinement
062E  1B      		dcx	d
062F  21BE05  		lxi	h,kbd
0632  CD1406  		call	strcmp
0635  CAC506  		jz	tkbd
FFFF          	 if not rom2k
0638  219805  		lxi	h,crtc
063B  CD1406  		call	strcmp
063E          		jrz	tcrtc
063E  2842    		DB	28H,tcrtc-$-1
0640  21A705  		lxi	h,vrt
0643  CD1406  		call	strcmp
0646  CA0207  		jz	tvrt
0649  219D05  		lxi	h,crtr
064C  CD1406  		call	strcmp
064F  CA2307  		jz	tcrtr
0652  21A205  		lxi	h,crtf
0655  CD1406  		call	strcmp
0658  CA6B07  		jz	tcrtf
065B  21AB05  		lxi	h,hdd
065E  CD1406  		call	strcmp
0661  CAE507  		jz	thdd
0664  21AF05  		lxi	h,hdrd
0667  CD1406  		call	strcmp
066A  CA2A08  		jz	thdrd
		 endif
066D  21B405  		lxi	h,fdrd
0670  CD1406  		call	strcmp
0673  CA4108  		jz	tfdrd
0676  21B905  		lxi	h,flpy
0679  CD1406  		call	strcmp
067C  CA7A08  		jz	tflpy
067F  C30901  		jmp	error
		
FFFF          	 if not rom2k
0682  21EA06  	tcrtc:	lxi	h,waitm
0685  CD9809  		call	msgprt
0688  0605    		mvi	b,5	; count
068A  1E80    		mvi	e,80h	; compare
068C  3E1F    	tc5:	mvi	a,31
068E  D31C    		out	crtctl	; select reg
0690  DB1C    	tc0:	in	crtctl
0692  E680    		ani	80h
0694  BB      		cmp	e
0695          		jrz	tc9
0695  2817    		DB	28H,tc9-$-1
0697  DB06    		in	conctl
0699  E601    		ani	00000001b
069B          		jrnz	tc6
069B  2008    		DB	20H,tc6-$-1
069D  7B      		mov	a,e
069E  B7      		ora	a
069F          		jrnz	tc0
069F  20EF    		DB	20H,tc0-$-1
06A1  DB1F    		in	crtram	; clear Update
06A3          		jr	tc5
06A3  18E7    		DB	18H,tc5-$-1
06A5  DB04    	tc6:	in	condat
06A7  21F506  		lxi	h,abrtm
06AA  CD9809  		call	msgprt
06AD  C9      		ret
06AE  7B      	tc9:	mov	a,e
06AF  EE80    		xri	80h
06B1  5F      		mov	e,a
06B2          		jrnz	tc8
06B2  200B    		DB	20H,tc8-$-1
06B4  21FB06  		lxi	h,updtm
06B7  CD9809  		call	msgprt
06BA  DB1F    		in	crtram	; clear Update
06BC          		djnz	tc5
06BC  10CE    		DB	10H,tc5-$-1
06BE  C9      		ret
06BF  CD8909  	tc8:	call	space
06C2          		djnz	tc0
06C2  10CC    		DB	10H,tc0-$-1
06C4  C9      		ret
		 endif
		
06C5  21EA06  	tkbd:	lxi	h,waitm
06C8  CD9809  		call	msgprt
06CB  DB07    	tk0:	in	kbdctl
06CD  E601    		ani	00000001b
06CF          		jrnz	tk1
06CF  200F    		DB	20H,tk1-$-1
06D1  DB06    		in	conctl
06D3  E601    		ani	00000001b
06D5          		jrz	tk0
06D5  28F4    		DB	28H,tk0-$-1
06D7  DB04    		in	condat
06D9  21F506  		lxi	h,abrtm
06DC  CD9809  		call	msgprt
06DF  C9      		ret
06E0  DB05    	tk1:	in	kbddat
06E2  CD7409  		call	hexout
06E5  CD8909  		call	space
06E8          		jr	tk0
06E8  18E1    		DB	18H,tk0-$-1
		
06EA  0D0A5761	waitm:	db	CR,LF,'Wait... ',TRM
      69742E2E
      2E2000
06F5  41626F72	abrtm:	db	'Abort',TRM
      7400
FFFF          	 if not rom2k
06FB  55706461	updtm:	db	'Update',TRM
      746500
		
0702  3E0A    	tvrt:	mvi	a,10	; we don't need many samples
0704  3202FF  		sta	addr1
0707  CD8E09  		call	crlf
070A  0E1C    		mvi	c,crtctl
070C          		inp	b
070C  ED40    		DB	0EDH,b*8+40H
			; TODO: reset Update bit? optionally?
070E  CD2309  		call	xsamp
0711  C34D09  		jmp	ysamp
		
0714  50617373	pass:	db	'Passed',TRM
      656400
071B  4661696C	fail:	db	'Failed ',TRM
      65642000
		
0723          	tcrtr:	; test read/write of CRTC cursor register pair
0723  CD8E09  		call	crlf
0726  210000  		lxi	h,0
0729  0E1D    		mvi	c,crtdat
072B  3E0E    	tr0:	mvi	a,14	; R14 = cursor hi
072D  D31C    		out	crtctl
072F          		outp	h
072F  ED61    		DB	0EDH,h*8+41H
0731  3C      		inr	a
0732  D31C    		out	crtctl
0734          		outp	l
0734  ED69    		DB	0EDH,l*8+41H
0736  3D      		dcr	a
0737  D31C    		out	crtctl
0739          		inp	d
0739  ED50    		DB	0EDH,d*8+40H
073B  3C      		inr	a
073C  D31C    		out	crtctl
073E          		inp	e
073E  ED58    		DB	0EDH,e*8+40H
			; now compare HL:DE
0740  7D      		mov	a,l
0741  BB      		cmp	e
0742          		jrnz	tr9
0742  2013    		DB	20H,tr9-$-1
0744  7C      		mov	a,h
0745  BA      		cmp	d
0746          		jrnz	tr9
0746  200F    		DB	20H,tr9-$-1
0748  23      		inx	h
0749  7C      		mov	a,h
074A  E63F    		ani	3fh
074C  67      		mov	h,a
074D  B5      		ora	l
074E          		jrnz	tr0
074E  20DB    		DB	20H,tr0-$-1
0750  211407  		lxi	h,pass
0753  CD9809  		call	msgprt
0756  C9      		ret
0757  D5      	tr9:	push	d
0758  E5      		push	h
0759  211B07  		lxi	h,fail
075C  CD9809  		call	msgprt
075F  D1      		pop	d
0760  CD6F09  		call	taddr
0763  CD8909  		call	space
0766  D1      		pop	d
0767  CD6F09  		call	taddr
076A  C9      		ret
		
		; Fill video RAM will value
076B          	tcrtf:
076B  3E20    		mvi	a,' '
076D  3200FF  		sta	addr0	; default to blanks
0770  AF      		xra	a
0771  3202FF  		sta	addr1	; default to no attributes
0774  CD0B0A  		call	getaddr ;get optional fill byte
0777  DA0901  		jc	error	;error if non-hex character
077A          		bit	7,b	;test for no entry
077A  CB78    		DB	0CBH,7*8+b+40H
077C          		jrnz	tcfX
077C  2012    		DB	20H,tcfX-$-1
077E  7D      		mov	a,l
077F  3200FF  		sta	addr0
0782  CD0B0A  		call	getaddr ;get optional attr byte
0785  DA0901  		jc	error	;error if non-hex character
0788          		bit	7,b	;test for no entry
0788  CB78    		DB	0CBH,7*8+b+40H
078A          		jrnz	tcfX
078A  2004    		DB	20H,tcfX-$-1
078C  7D      		mov	a,l
078D  3202FF  		sta	addr1
0790          	tcfX:
0790  0612    		mvi	b,18	; hi byte of addr reg
0792  0E13    		mvi	c,19	; lo byte of addr reg
0794  21D007  		lxi	h,80*25
0797  110000  		lxi	d,0
079A  3E1F    		mvi	a,1fh
079C  D31C    		out	crtctl	; clear update bit
079E  DB1C    	tcf0:	in	crtctl
07A0  07      		rlc
07A1          		jrnc	tcf0
07A1  30FB    		DB	30H,tcf0-$-1
07A3  78      		mov	a,b
07A4  D31C    		out	crtctl
07A6  7A      		mov	a,d
07A7  D31D    		out	crtdat
07A9  79      		mov	a,c
07AA  D31C    		out	crtctl
07AC  7B      		mov	a,e
07AD  D31D    		out	crtdat
07AF  3E1F    		mvi	a,1fh
07B1  D31C    		out	crtctl	; clear update bit
07B3  DB1C    	tcf1:	in	crtctl
07B5  07      		rlc
07B6          		jrnc	tcf1
07B6  30FB    		DB	30H,tcf1-$-1
07B8  3A00FF  		lda	addr0
07BB  D31F    		out	crtram
07BD  13      		inx	d
07BE  DB1C    	tcf2:	in	crtctl
07C0  07      		rlc
07C1          		jrnc	tcf2
07C1  30FB    		DB	30H,tcf2-$-1
07C3  78      		mov	a,b
07C4  D31C    		out	crtctl
07C6  7A      		mov	a,d
07C7  F608    		ori	08h	; attr RAM
07C9  D31D    		out	crtdat
07CB  79      		mov	a,c
07CC  D31C    		out	crtctl
07CE  7B      		mov	a,e
07CF  D31D    		out	crtdat
07D1  3E1F    		mvi	a,1fh
07D3  D31C    		out	crtctl	; clear update bit
07D5  DB1C    	tcf3:	in	crtctl
07D7  07      		rlc
07D8          		jrnc	tcf3
07D8  30FB    		DB	30H,tcf3-$-1
07DA  3A02FF  		lda	addr1
07DD  D31F    		out	crtram
07DF  2B      		dcx	h
07E0  7C      		mov	a,h
07E1  B5      		ora	l
07E2          		jrnz	tcf0
07E2  20BA    		DB	20H,tcf0-$-1
07E4  C9      		ret
		
		; user must have set other registers as needed
07E5          	thdd:	; issue command, wait...
07E5  3E90    		mvi	a,90h
07E7  3200FF  		sta	addr0	; default: self test
07EA  AF      		xra	a
07EB  3202FF  		sta	addr1	; default: 256 samples
07EE  CD0B0A  		call	getaddr ;get optional command
07F1  DA0901  		jc	error	;error if non-hex character
07F4          		bit	7,b	;test for no entry
07F4  CB78    		DB	0CBH,7*8+b+40H
07F6          		jrnz	thY
07F6  201B    		DB	20H,thY-$-1
07F8  7C      		mov	a,h
07F9  B7      		ora	a
07FA  C20901  		jnz	error
07FD  2200FF  		shld	addr0	;save command
0800  CD0B0A  		call	getaddr ;get sample count
0803  DA0901  		jc	error	;error if non-hex character
0806          		bit	7,b	;test for no entry
0806  CB78    		DB	0CBH,7*8+b+40H
0808  C21308  		jnz	thY
080B  7C      		mov	a,h
080C  B7      		ora	a
080D  C20901  		jnz	error
0810  2202FF  		shld	addr1	;save count
0813  CD8E09  	thY:	call	crlf
0816  0E87    		mvi	c,hddcmd
0818          		inp	b
0818  ED40    		DB	0EDH,b*8+40H
081A  3A00FF  		lda	addr0
081D  D387    		out	hddcmd
081F  CD2309  	thdd1:	call	xsamp
0822  CD4D09  	th1:	call	ysamp	; dump results from 8000h..DE
0825  DB81    		in	hdderr	; also print final error status
0827  C37409  		jmp	hexout
		
		; user setup registers and issue READ command
082A  CD8E09  	thdrd:	call	crlf
082D  210080  		lxi	h,8000h
0830  018000  		lxi	b,hdddat	; B=0 (256)
0833  DB87    		in	hddcmd
0835  E608    		ani	00001000b	; DRQ
0837          		jrz	thr9
0837  2804    		DB	28H,thr9-$-1
0839          		inir
0839  EDB2    		DB	0EDH,0B2H
083B          		inir
083B  EDB2    		DB	0EDH,0B2H
083D  EB      	thr9:	xchg
083E  C36F09  		jmp	taddr
		 endif
		
		; read a sector from the floppy.
		; user must turn on motors, select drive,
		; set side, set DDEN, and step to track.
		; data stored in 8000h
0841  AF      	tfdrd:	xra	a
0842  3200FF  		sta	addr0
0845  CD0B0A  		call	getaddr ;get optional sector
0848  DA0901  		jc	error	;error if non-hex character
084B          		bit	7,b	;test for no entry
084B  CB78    		DB	0CBH,7*8+b+40H
084D          		jrnz	tfrX
084D  2008    		DB	20H,tfrX-$-1
084F  7C      		mov	a,h
0850  B7      		ora	a
0851  C20901  		jnz	error
0854  2200FF  		shld	addr0	; allow some rediculous values
0857          	tfrX:			; (also, side 1 uses: 0A..13)
0857  CD8E09  		call	crlf
085A  3A00FF  		lda	addr0
085D  D312    		out	fpysec
085F  210080  		lxi	h,8000h
0862  011300  		lxi	b,fpydat	; B=0
0865  3E88    		mvi	a,88h	; read sector, side compare(?)
0867  D310    		out	fpycmd
0869  76      	tfr0:	hlt
086A          		ini
086A  EDA2    		DB	0EDH,0A2H
086C          		jrnz	tfr0
086C  20FB    		DB	20H,tfr0-$-1
086E  76      	tfr1:	hlt
086F          		ini
086F  EDA2    		DB	0EDH,0A2H
0871          		jrnz	tfr1
0871  20FB    		DB	20H,tfr1-$-1
0873  76      		hlt	; wait for done
0874  DB10    		in	fpysts
0876  CD7409  		call	hexout
0879  C9      		ret
		
087A          	tflpy:	; user must motor on and select drive (and side)
087A  3ED0    		mvi	a,0d0h
087C  3200FF  		sta	addr0	; default: force intr
087F  AF      		xra	a
0880  3202FF  		sta	addr1	; default: 256 samples
0883  CD0B0A  		call	getaddr ;get optional command
0886  DA0901  		jc	error	;error if non-hex character
0889          		bit	7,b	;test for no entry
0889  CB78    		DB	0CBH,7*8+b+40H
088B          		jrnz	tfX
088B  201B    		DB	20H,tfX-$-1
088D  7C      		mov	a,h
088E  B7      		ora	a
088F  C20901  		jnz	error
0892  2200FF  		shld	addr0	;save command
0895  CD0B0A  		call	getaddr ;get sample count
0898  DA0901  		jc	error	;error if non-hex character
089B          		bit	7,b	;test for no entry
089B  CB78    		DB	0CBH,7*8+b+40H
089D  C2A808  		jnz	tfX
08A0  7C      		mov	a,h
08A1  B7      		ora	a
08A2  C20901  		jnz	error
08A5  2202FF  		shld	addr1	;save count
08A8          	tfX:
08A8  CD8E09  		call	crlf
08AB  0E10    		mvi	c,fpysts
08AD          		inp	b
08AD  ED40    		DB	0EDH,b*8+40H
08AF  3A00FF  		lda	addr0	; FDC command
08B2  D310    		out	fpycmd
08B4  CD2309  		call	xsamp	; gather samples
08B7  C34D09  		jmp	ysamp	; dump samples
		
08BA          	Vcomnd:
08BA  21C500  		lxi	h,signon
08BD  C39809  		jmp	msgprt
		
		; B = checksum
08C0          	getbyte:
08C0  CDB800  		call	conine	; trashes C
08C3  CD320A  		call	hexcon
08C6  D8      		rc
08C7  07      		rlc
08C8  07      		rlc
08C9  07      		rlc
08CA  07      		rlc
08CB  5F      		mov	e,a
08CC  CDB800  		call	conine	; trashes C
08CF  CD320A  		call	hexcon
08D2  D8      		rc
08D3  B3      		ora	e
			; update checksum...
08D4  5F      		mov	e,a
08D5  80      		add	b
08D6  47      		mov	b,a
08D7  7B      		mov	a,e
08D8  B7      		ora	a
08D9  C9      		ret
		
		; Uses:
		;	E' = error indicator (used?)
		;	E = scratch (getbyte)
		;	D = count (per line)
		;	B = checksum (per line)
		;	C = scratch (conine)
		;	HL = dest (per line)
08DA          	Hcomnd:
			; TODO: clear error flag
08DA  CD8E09  	hc2:	call	crlf
08DD  CDB800  	hc0:	call	conine
08E0  FE03    		cpi	CTLC
08E2  C8      		rz
08E3  FE3A    		cpi	':'	; start of record
08E5          		jrnz	hc0
08E5  20F6    		DB	20H,hc0-$-1
08E7  0600    		mvi	b,0	; init checksum 0
08E9  CDC008  		call	getbyte	; count
08EC          		jrc	hc8
08EC  382B    		DB	38H,hc8-$-1
08EE  57      		mov	d,a
08EF          		exaf	; save copy of count
08EF  08      		DB	08H
08F0  CDC008  		call	getbyte	; addr hi
08F3          		jrc	hc8
08F3  3824    		DB	38H,hc8-$-1
08F5  67      		mov	h,a
08F6  CDC008  		call	getbyte	; addr lo
08F9          		jrc	hc8
08F9  381E    		DB	38H,hc8-$-1
08FB  6F      		mov	l,a
08FC  CDC008  		call	getbyte	; record type (ignored)
08FF          		jrc	hc8
08FF  3818    		DB	38H,hc8-$-1
0901  14      		inr	d	; +1 for checksum byte
			; TODO: range check HL... ?
0902  CDC008  	hc1:	call	getbyte
0905          		jrc	hc8
0905  3812    		DB	38H,hc8-$-1
0907  15      		dcr	d
0908          		jrz	hc7
0908  2804    		DB	28H,hc7-$-1
090A  77      		mov	m,a
090B  23      		inx	h
090C          		jr	hc1
090C  18F4    		DB	18H,hc1-$-1
090E  78      	hc7:	mov	a,b
090F  B7      		ora	a
0910          		jrnz	hc8
0910  2007    		DB	20H,hc8-$-1
0912          		exaf
0912  08      		DB	08H
0913  B7      		ora	a
0914          		jrnz	hc2
0914  20C4    		DB	20H,hc2-$-1
			; TODO: what to do with entry addr?
			; TODO: check error flag
0916  C38E09  		jmp	crlf
0919          	hc8:	; TODO: set error flag
0919  0E21    		mvi	c,'!'
091B  CD8F00  		call	conout
091E          		jr	hc0
091E  18BD    		DB	18H,hc0-$-1
		
		*********************************************************
		**  Utility subroutines
		*********************************************************
		
		; take samples from port C, storing changes in 8000H
		; B = initial value of port (may be faked).
		; samples are 3 bytes each, new port value and 16-bit iteration count.
		; returns DE pointing +1 after last sample.
0920  3202FF  	xsamp1:	sta	addr1
		; addr1 = max num samples (0=256)
0923          	xsamp:
0923  210000  		lxi	h,0
0926  110080  		lxi	d,8000h
0929          	xs0:	inp	a	; 12
0929  ED78    		DB	0EDH,a*8+40H
092B  B8      		cmp	b	;  4
092C          		jrnz	xs4	;  7
092C  200C    		DB	20H,xs4-$-1
092E  23      	xs5:	inx	h	;  6
092F  7C      		mov	a,h	;  4
0930  B5      		ora	l	;  4
0931          		jrnz	xs0	; 12 = 49 = 12.25uS (19.6uS)
0931  20F6    		DB	20H,xs0-$-1
0933  2B      		dcx	h	; show as FFFF
0934  3E01    		mvi	a,1
0936  3202FF  		sta	addr1	; force last sample
0939  78      		mov	a,b	; current register value
093A  EB      	xs4:	xchg		;  4
093B  77      		mov	m,a	;  7
093C  23      		inx	h	;  6
093D  73      		mov	m,e	;  7
093E  23      		inx	h	;  6
093F  72      		mov	m,d	;  7
0940  23      		inx	h	;  6
0941  EB      		xchg		;  4
0942  47      		mov	b,a	;  4
0943  3A02FF  		lda	addr1	; 13
0946  3D      		dcr	a	;  4
0947  3202FF  		sta	addr1	; 13
094A          		jrnz	xs5	; 12 = 93 = 23.25uS (37.2uS)
094A  20E2    		DB	20H,xs5-$-1
094C  C9      		ret
		
		; print out samples from 8000h to DE
094D          	ysamp:
094D  210080  		lxi	h,8000h
0950  7C      	ys2:	mov	a,h
0951  BA      		cmp	d
0952          		jrnz	ys3
0952  2003    		DB	20H,ys3-$-1
0954  7D      		mov	a,l
0955  BB      		cmp	e
0956  C8      		rz
0957  7E      	ys3:	mov	a,m
0958  23      		inx	h
0959  CD7409  		call	hexout
095C  CD8909  		call	space
095F  46      		mov	b,m
0960  23      		inx	h
0961  7E      		mov	a,m
0962  23      		inx	h
0963  CD7409  		call	hexout
0966  78      		mov	a,b
0967  CD7409  		call	hexout
096A  CD8E09  		call	crlf
096D          		jr	ys2
096D  18E1    		DB	18H,ys2-$-1
		
096F  7A      	taddr:	mov	a,d	;display (DE) at console in HEX
0970  CD7409  		call	hexout	;print HI byte in HEX
0973  7B      		mov	a,e	;now do LO byte
0974  F5      	hexout:	push	psw	;output (A) to console in HEX
0975  07      		rlc		;get HI digit in usable (LO) position
0976  07      		rlc
0977  07      		rlc
0978  07      		rlc
0979  CD7D09  		call	nible	;and display it
097C  F1      		pop	psw	;get LO digit back and display it
097D  E60F    	nible:	ani	00001111b	;display LO 4 bits of (A) in HEX
097F  C690    		adi	90h	;algorithm to convert 4-bits to ASCII
0981  27      		daa
0982  CE40    		aci	40h
0984  27      		daa
0985  4F      		mov	c,a	;display ASCII digit
0986  C38F00  		jmp	conout
		
0989  0E20    	space:	mvi	c,' '	;send an ASCII blank to console
098B  C38F00  		jmp	conout
		
098E  0E0D    	crlf:	mvi	c,CR	;send Carriage-Return/Line-Feed to console
0990  CD8F00  		call	conout
0993  0E0A    		mvi	c,LF
0995  C38F00  		jmp	conout
		
0998  7E      	msgprt:	mov	a,m	;send string to console, terminated by 00
0999  B7      		ora	a
099A  C8      		rz
099B  4F      		mov	c,a
099C  CD8F00  		call	conout
099F  23      		inx	h
09A0          		jr	msgprt
09A0  18F6    		DB	18H,msgprt-$-1
		
09A2  E5      	check:	push	h	;non-destuctive compare HL:DE
09A3  B7      		ora	a
09A4          		dsbc	d
09A4  ED52    		DB	0EDH,d*8+42H
09A6  E1      		pop	h
09A7  C9      		ret
		
		; Convert letters to upper-case
09A8          	toupper:
09A8  FE61    		cpi	'a'
09AA  D8      		rc
09AB  FE7B    		cpi	'z'+1
09AD  D0      		rnc
09AE  E65F    		ani	01011111b
09B0  C9      		ret
		
		; Read a line of text into 'line'
		; End with CR, honor BS
		; Reject all non-printing characters, force toupper
09B1  2104FF  	linein:	lxi	h,line	;get string of characters from console, ending in CR
09B4  CD9E00  	li0:	call	conin	;get a character
09B7  FE08    		cpi	BS	;allow BackSpacing
09B9          		jrz	backup
09B9  281D    		DB	28H,backup-$-1
09BB  FE0D    		cpi	CR
09BD          		jrz	li1
09BD  282E    		DB	28H,li1-$-1
09BF  FE03    		cpi	CTLC
09C1          		jrz	liZ
09C1  2830    		DB	28H,liZ-$-1
09C3  FE20    		cpi	' '	;ignore other non-print
09C5          		jrc	li0
09C5  38ED    		DB	38H,li0-$-1
09C7  CDA809  		call	toupper
09CA  77      		mov	m,a	;put character in line nuffer
09CB  23      		inx	h
09CC  4F      		mov	c,a
09CD  CD8F00  		call	conout	; echo character
09D0  7D      		mov	a,l	;else check for pending buffer overflow
09D1  D604    		sui	line mod 256
09D3  FE40    		cpi	64
09D5  C8      		rz		;stop if buffer full
09D6          		jr	li0	;if not full, keep getting characters
09D6  18DC    		DB	18H,li0-$-1
		
09D8  7D      	backup:	mov	a,l	;(destructive) BackSpacing
09D9  FE04    		cpi	line mod 256	;test if at beginning of line
09DB          		jrz	li0	;can't backspace past start of line
09DB  28D7    		DB	28H,li0-$-1
09DD  0E08    		mvi	c,bs	;output BS," ",BS to erase character on screen
09DF  CD8F00  		call	conout	;and put cursor back one position
09E2  CD8909  		call	space
09E5  0E08    		mvi	c,bs
09E7  CD8F00  		call	conout
09EA  2B      		dcx	h	;step buffer pointer back one
09EB          		jr	li0	;and continue to get characters
09EB  18C7    		DB	18H,li0-$-1
		
		; End line input, A=CR
09ED  77      	li1:	mov	m,a	; store CR in buffer
09EE  0E0D    		mvi	c,CR	;display CR so user knows we got it
09F0  C38F00  		jmp	conout	;then return to calling routine
		
		; Abort input
09F3  0E5E    	liZ:	mvi	c,'^'
09F5  CD8F00  		call	conout
09F8  0E43    		mvi	c,'C'
09FA  CD8F00  		call	conout
09FD  E1      		pop	h	; always OK?
09FE  C9      		ret		; return to caller's caller (main debug loop)
		
		; Get next character from line buffer.
		; DE=current pointer within 'line'
		; Returns: ZR=EOL else A=char
09FF  7B      	char:	mov	a,e	;remove a character from line buffer,
0A00  D604    		sui	line mod 256	;testing for no more characters
0A02  D640    		sui	64
0A04  C8      		rz		;return [ZR] condition if at end of buffer
0A05  1A      		ldax	d
0A06  FE0D    		cpi	CR
0A08  C8      		rz		;also return [ZR] if at end of line
0A09  13      		inx	d	;else step to next character
0A0A  C9      		ret		;and return [NZ]
		
		; Get HEX value from line buffer
		; Return: CY=error, HL=value, bit7(B)=1 if no input
0A0B          	getaddr:		;extract address from line buffer (delimitted by " ")
0A0B          		setb	7,b	;flag to detect no address entered
0A0B  CBF8    		DB	0CBH,7*8+b+0C0H
0A0D  210000  		lxi	h,0
0A10  CD5B05  		call	skb
0A13  C8      		rz		;end of buffer/line before a character was found
0A14          		jr	ga1	;if not space, then start getting HEX digits
0A14  1804    		DB	18H,ga1-$-1
		
0A16  CDFF09  	ga0:	call	char
0A19  C8      		rz
0A1A  CD320A  	ga1:	call	hexcon	;start assembling digits into 16 bit accumilator
0A1D          		jrc	chkdlm	;check if valid delimiter before returning error.
0A1D  380E    		DB	38H,chkdlm-$-1
0A1F          		res	7,b	;reset flag
0A1F  CBB8    		DB	0CBH,7*8+b+80H
0A21  D5      		push	d	;save buffer pointer
0A22  5F      		mov	e,a
0A23  1600    		mvi	d,0
0A25  29      		dad	h	;shift "accumulator" left 1 digit
0A26  29      		dad	h
0A27  29      		dad	h
0A28  29      		dad	h
0A29  19      		dad	d	;add in new digit
0A2A  D1      		pop	d	;restore buffer pointer
0A2B          		jr	ga0	;loop for next digit
0A2B  18E9    		DB	18H,ga0-$-1
		
0A2D  FE20    	chkdlm: cpi	' '	;blank is currently the only valid delimiter
0A2F  C8      		rz
0A30  37      		stc
0A31  C9      		ret
		
0A32          	hexcon: 		;convert ASCII character to HEX digit
0A32  FE30    		cpi	'0'	;must be .GE. "0"
0A34  D8      		rc
0A35  FE3A    		cpi	'9'+1	;and be .LE. "9"
0A37          		jrc	ok0	;valid numeral.
0A37  3809    		DB	38H,ok0-$-1
0A39  FE41    		cpi	'A'	;or .GE. "A"
0A3B  D8      		rc
0A3C  FE47    		cpi	'F'+1	;and .LE. "F"
0A3E  3F      		cmc
0A3F  D8      		rc		;return [CY] if not valid HEX digit
0A40  D607    		sui	'A'-'9'-1	;convert letter
0A42  D630    	ok0:	sui	'0'	;convert (numeral) to 0-15 in (A)
0A44  C9      		ret
		
		; These only work on */84 (and 10) models.
		; Have no effect (and does nothing) on */83 models.
0A45          	proginit:
0A45  AF      		xra	a
0A46          		stai
0A46  ED47    		DB	0EDH,47H
FFFF          	 if not rom2k
0A48  DB14    		in	sysp84
0A4A  E6FC    		ani	not DSNONE
0A4C  E6EF    		ani	not K84MTR
0A4E  F602    		ori	DS0
0A50  D314    		out	sysp84
		 endif
0A52  3E41    		mvi	a,'A'
0A54  320030  		sta	3000h
0A57  C9      		ret
		
0A58          	progoff:
0A58          		ldai
0A58  ED57    		DB	0EDH,57H
0A5A  C0      		rnz
0A5B  2F      		cma
0A5C          		stai
0A5C  ED47    		DB	0EDH,47H
FFFF          	 if not rom2k
0A5E  DB14    		in	sysp84
0A60  F603    		ori	DSNONE
0A62  D314    		out	sysp84
		 endif
0A64  AF      		xra	a
0A65  320030  		sta	3000h
0A68  C9      		ret
		
0A69          	progress:
0A69          		ldai
0A69  ED57    		DB	0EDH,57H
0A6B  C0      		rnz
FFFF          	 if not rom2k
0A6C  DB14    		in	sysp84
0A6E  EE03    		xri	DSNONE
0A70  D314    		out	sysp84
		 endif
0A72  3A0030  		lda	3000h
0A75  EE03    		xri	00000011b
0A77  320030  		sta	3000h
0A7A  C9      		ret
		
			rept	romsiz-$
0A7B  FF      		db	0ffh
0A7C  FF      		db	0ffh
0A7D  FF      		db	0ffh
0A7E  FF      		db	0ffh
0A7F  FF      		db	0ffh
0A80  FF      		db	0ffh
0A81  FF      		db	0ffh
0A82  FF      		db	0ffh
0A83  FF      		db	0ffh
0A84  FF      		db	0ffh
0A85  FF      		db	0ffh
0A86  FF      		db	0ffh
0A87  FF      		db	0ffh
0A88  FF      		db	0ffh
0A89  FF      		db	0ffh
0A8A  FF      		db	0ffh
0A8B  FF      		db	0ffh
0A8C  FF      		db	0ffh
0A8D  FF      		db	0ffh
0A8E  FF      		db	0ffh
0A8F  FF      		db	0ffh
0A90  FF      		db	0ffh
0A91  FF      		db	0ffh
0A92  FF      		db	0ffh
0A93  FF      		db	0ffh
0A94  FF      		db	0ffh
0A95  FF      		db	0ffh
0A96  FF      		db	0ffh
0A97  FF      		db	0ffh
0A98  FF      		db	0ffh
0A99  FF      		db	0ffh
0A9A  FF      		db	0ffh
0A9B  FF      		db	0ffh
0A9C  FF      		db	0ffh
0A9D  FF      		db	0ffh
0A9E  FF      		db	0ffh
0A9F  FF      		db	0ffh
0AA0  FF      		db	0ffh
0AA1  FF      		db	0ffh
0AA2  FF      		db	0ffh
0AA3  FF      		db	0ffh
0AA4  FF      		db	0ffh
0AA5  FF      		db	0ffh
0AA6  FF      		db	0ffh
0AA7  FF      		db	0ffh
0AA8  FF      		db	0ffh
0AA9  FF      		db	0ffh
0AAA  FF      		db	0ffh
0AAB  FF      		db	0ffh
0AAC  FF      		db	0ffh
0AAD  FF      		db	0ffh
0AAE  FF      		db	0ffh
0AAF  FF      		db	0ffh
0AB0  FF      		db	0ffh
0AB1  FF      		db	0ffh
0AB2  FF      		db	0ffh
0AB3  FF      		db	0ffh
0AB4  FF      		db	0ffh
0AB5  FF      		db	0ffh
0AB6  FF      		db	0ffh
0AB7  FF      		db	0ffh
0AB8  FF      		db	0ffh
0AB9  FF      		db	0ffh
0ABA  FF      		db	0ffh
0ABB  FF      		db	0ffh
0ABC  FF      		db	0ffh
0ABD  FF      		db	0ffh
0ABE  FF      		db	0ffh
0ABF  FF      		db	0ffh
0AC0  FF      		db	0ffh
0AC1  FF      		db	0ffh
0AC2  FF      		db	0ffh
0AC3  FF      		db	0ffh
0AC4  FF      		db	0ffh
0AC5  FF      		db	0ffh
0AC6  FF      		db	0ffh
0AC7  FF      		db	0ffh
0AC8  FF      		db	0ffh
0AC9  FF      		db	0ffh
0ACA  FF      		db	0ffh
0ACB  FF      		db	0ffh
0ACC  FF      		db	0ffh
0ACD  FF      		db	0ffh
0ACE  FF      		db	0ffh
0ACF  FF      		db	0ffh
0AD0  FF      		db	0ffh
0AD1  FF      		db	0ffh
0AD2  FF      		db	0ffh
0AD3  FF      		db	0ffh
0AD4  FF      		db	0ffh
0AD5  FF      		db	0ffh
0AD6  FF      		db	0ffh
0AD7  FF      		db	0ffh
0AD8  FF      		db	0ffh
0AD9  FF      		db	0ffh
0ADA  FF      		db	0ffh
0ADB  FF      		db	0ffh
0ADC  FF      		db	0ffh
0ADD  FF      		db	0ffh
0ADE  FF      		db	0ffh
0ADF  FF      		db	0ffh
0AE0  FF      		db	0ffh
0AE1  FF      		db	0ffh
0AE2  FF      		db	0ffh
0AE3  FF      		db	0ffh
0AE4  FF      		db	0ffh
0AE5  FF      		db	0ffh
0AE6  FF      		db	0ffh
0AE7  FF      		db	0ffh
0AE8  FF      		db	0ffh
0AE9  FF      		db	0ffh
0AEA  FF      		db	0ffh
0AEB  FF      		db	0ffh
0AEC  FF      		db	0ffh
0AED  FF      		db	0ffh
0AEE  FF      		db	0ffh
0AEF  FF      		db	0ffh
0AF0  FF      		db	0ffh
0AF1  FF      		db	0ffh
0AF2  FF      		db	0ffh
0AF3  FF      		db	0ffh
0AF4  FF      		db	0ffh
0AF5  FF      		db	0ffh
0AF6  FF      		db	0ffh
0AF7  FF      		db	0ffh
0AF8  FF      		db	0ffh
0AF9  FF      		db	0ffh
0AFA  FF      		db	0ffh
0AFB  FF      		db	0ffh
0AFC  FF      		db	0ffh
0AFD  FF      		db	0ffh
0AFE  FF      		db	0ffh
0AFF  FF      		db	0ffh
0B00  FF      		db	0ffh
0B01  FF      		db	0ffh
0B02  FF      		db	0ffh
0B03  FF      		db	0ffh
0B04  FF      		db	0ffh
0B05  FF      		db	0ffh
0B06  FF      		db	0ffh
0B07  FF      		db	0ffh
0B08  FF      		db	0ffh
0B09  FF      		db	0ffh
0B0A  FF      		db	0ffh
0B0B  FF      		db	0ffh
0B0C  FF      		db	0ffh
0B0D  FF      		db	0ffh
0B0E  FF      		db	0ffh
0B0F  FF      		db	0ffh
0B10  FF      		db	0ffh
0B11  FF      		db	0ffh
0B12  FF      		db	0ffh
0B13  FF      		db	0ffh
0B14  FF      		db	0ffh
0B15  FF      		db	0ffh
0B16  FF      		db	0ffh
0B17  FF      		db	0ffh
0B18  FF      		db	0ffh
0B19  FF      		db	0ffh
0B1A  FF      		db	0ffh
0B1B  FF      		db	0ffh
0B1C  FF      		db	0ffh
0B1D  FF      		db	0ffh
0B1E  FF      		db	0ffh
0B1F  FF      		db	0ffh
0B20  FF      		db	0ffh
0B21  FF      		db	0ffh
0B22  FF      		db	0ffh
0B23  FF      		db	0ffh
0B24  FF      		db	0ffh
0B25  FF      		db	0ffh
0B26  FF      		db	0ffh
0B27  FF      		db	0ffh
0B28  FF      		db	0ffh
0B29  FF      		db	0ffh
0B2A  FF      		db	0ffh
0B2B  FF      		db	0ffh
0B2C  FF      		db	0ffh
0B2D  FF      		db	0ffh
0B2E  FF      		db	0ffh
0B2F  FF      		db	0ffh
0B30  FF      		db	0ffh
0B31  FF      		db	0ffh
0B32  FF      		db	0ffh
0B33  FF      		db	0ffh
0B34  FF      		db	0ffh
0B35  FF      		db	0ffh
0B36  FF      		db	0ffh
0B37  FF      		db	0ffh
0B38  FF      		db	0ffh
0B39  FF      		db	0ffh
0B3A  FF      		db	0ffh
0B3B  FF      		db	0ffh
0B3C  FF      		db	0ffh
0B3D  FF      		db	0ffh
0B3E  FF      		db	0ffh
0B3F  FF      		db	0ffh
0B40  FF      		db	0ffh
0B41  FF      		db	0ffh
0B42  FF      		db	0ffh
0B43  FF      		db	0ffh
0B44  FF      		db	0ffh
0B45  FF      		db	0ffh
0B46  FF      		db	0ffh
0B47  FF      		db	0ffh
0B48  FF      		db	0ffh
0B49  FF      		db	0ffh
0B4A  FF      		db	0ffh
0B4B  FF      		db	0ffh
0B4C  FF      		db	0ffh
0B4D  FF      		db	0ffh
0B4E  FF      		db	0ffh
0B4F  FF      		db	0ffh
0B50  FF      		db	0ffh
0B51  FF      		db	0ffh
0B52  FF      		db	0ffh
0B53  FF      		db	0ffh
0B54  FF      		db	0ffh
0B55  FF      		db	0ffh
0B56  FF      		db	0ffh
0B57  FF      		db	0ffh
0B58  FF      		db	0ffh
0B59  FF      		db	0ffh
0B5A  FF      		db	0ffh
0B5B  FF      		db	0ffh
0B5C  FF      		db	0ffh
0B5D  FF      		db	0ffh
0B5E  FF      		db	0ffh
0B5F  FF      		db	0ffh
0B60  FF      		db	0ffh
0B61  FF      		db	0ffh
0B62  FF      		db	0ffh
0B63  FF      		db	0ffh
0B64  FF      		db	0ffh
0B65  FF      		db	0ffh
0B66  FF      		db	0ffh
0B67  FF      		db	0ffh
0B68  FF      		db	0ffh
0B69  FF      		db	0ffh
0B6A  FF      		db	0ffh
0B6B  FF      		db	0ffh
0B6C  FF      		db	0ffh
0B6D  FF      		db	0ffh
0B6E  FF      		db	0ffh
0B6F  FF      		db	0ffh
0B70  FF      		db	0ffh
0B71  FF      		db	0ffh
0B72  FF      		db	0ffh
0B73  FF      		db	0ffh
0B74  FF      		db	0ffh
0B75  FF      		db	0ffh
0B76  FF      		db	0ffh
0B77  FF      		db	0ffh
0B78  FF      		db	0ffh
0B79  FF      		db	0ffh
0B7A  FF      		db	0ffh
0B7B  FF      		db	0ffh
0B7C  FF      		db	0ffh
0B7D  FF      		db	0ffh
0B7E  FF      		db	0ffh
0B7F  FF      		db	0ffh
0B80  FF      		db	0ffh
0B81  FF      		db	0ffh
0B82  FF      		db	0ffh
0B83  FF      		db	0ffh
0B84  FF      		db	0ffh
0B85  FF      		db	0ffh
0B86  FF      		db	0ffh
0B87  FF      		db	0ffh
0B88  FF      		db	0ffh
0B89  FF      		db	0ffh
0B8A  FF      		db	0ffh
0B8B  FF      		db	0ffh
0B8C  FF      		db	0ffh
0B8D  FF      		db	0ffh
0B8E  FF      		db	0ffh
0B8F  FF      		db	0ffh
0B90  FF      		db	0ffh
0B91  FF      		db	0ffh
0B92  FF      		db	0ffh
0B93  FF      		db	0ffh
0B94  FF      		db	0ffh
0B95  FF      		db	0ffh
0B96  FF      		db	0ffh
0B97  FF      		db	0ffh
0B98  FF      		db	0ffh
0B99  FF      		db	0ffh
0B9A  FF      		db	0ffh
0B9B  FF      		db	0ffh
0B9C  FF      		db	0ffh
0B9D  FF      		db	0ffh
0B9E  FF      		db	0ffh
0B9F  FF      		db	0ffh
0BA0  FF      		db	0ffh
0BA1  FF      		db	0ffh
0BA2  FF      		db	0ffh
0BA3  FF      		db	0ffh
0BA4  FF      		db	0ffh
0BA5  FF      		db	0ffh
0BA6  FF      		db	0ffh
0BA7  FF      		db	0ffh
0BA8  FF      		db	0ffh
0BA9  FF      		db	0ffh
0BAA  FF      		db	0ffh
0BAB  FF      		db	0ffh
0BAC  FF      		db	0ffh
0BAD  FF      		db	0ffh
0BAE  FF      		db	0ffh
0BAF  FF      		db	0ffh
0BB0  FF      		db	0ffh
0BB1  FF      		db	0ffh
0BB2  FF      		db	0ffh
0BB3  FF      		db	0ffh
0BB4  FF      		db	0ffh
0BB5  FF      		db	0ffh
0BB6  FF      		db	0ffh
0BB7  FF      		db	0ffh
0BB8  FF      		db	0ffh
0BB9  FF      		db	0ffh
0BBA  FF      		db	0ffh
0BBB  FF      		db	0ffh
0BBC  FF      		db	0ffh
0BBD  FF      		db	0ffh
0BBE  FF      		db	0ffh
0BBF  FF      		db	0ffh
0BC0  FF      		db	0ffh
0BC1  FF      		db	0ffh
0BC2  FF      		db	0ffh
0BC3  FF      		db	0ffh
0BC4  FF      		db	0ffh
0BC5  FF      		db	0ffh
0BC6  FF      		db	0ffh
0BC7  FF      		db	0ffh
0BC8  FF      		db	0ffh
0BC9  FF      		db	0ffh
0BCA  FF      		db	0ffh
0BCB  FF      		db	0ffh
0BCC  FF      		db	0ffh
0BCD  FF      		db	0ffh
0BCE  FF      		db	0ffh
0BCF  FF      		db	0ffh
0BD0  FF      		db	0ffh
0BD1  FF      		db	0ffh
0BD2  FF      		db	0ffh
0BD3  FF      		db	0ffh
0BD4  FF      		db	0ffh
0BD5  FF      		db	0ffh
0BD6  FF      		db	0ffh
0BD7  FF      		db	0ffh
0BD8  FF      		db	0ffh
0BD9  FF      		db	0ffh
0BDA  FF      		db	0ffh
0BDB  FF      		db	0ffh
0BDC  FF      		db	0ffh
0BDD  FF      		db	0ffh
0BDE  FF      		db	0ffh
0BDF  FF      		db	0ffh
0BE0  FF      		db	0ffh
0BE1  FF      		db	0ffh
0BE2  FF      		db	0ffh
0BE3  FF      		db	0ffh
0BE4  FF      		db	0ffh
0BE5  FF      		db	0ffh
0BE6  FF      		db	0ffh
0BE7  FF      		db	0ffh
0BE8  FF      		db	0ffh
0BE9  FF      		db	0ffh
0BEA  FF      		db	0ffh
0BEB  FF      		db	0ffh
0BEC  FF      		db	0ffh
0BED  FF      		db	0ffh
0BEE  FF      		db	0ffh
0BEF  FF      		db	0ffh
0BF0  FF      		db	0ffh
0BF1  FF      		db	0ffh
0BF2  FF      		db	0ffh
0BF3  FF      		db	0ffh
0BF4  FF      		db	0ffh
0BF5  FF      		db	0ffh
0BF6  FF      		db	0ffh
0BF7  FF      		db	0ffh
0BF8  FF      		db	0ffh
0BF9  FF      		db	0ffh
0BFA  FF      		db	0ffh
0BFB  FF      		db	0ffh
0BFC  FF      		db	0ffh
0BFD  FF      		db	0ffh
0BFE  FF      		db	0ffh
0BFF  FF      		db	0ffh
0C00  FF      		db	0ffh
0C01  FF      		db	0ffh
0C02  FF      		db	0ffh
0C03  FF      		db	0ffh
0C04  FF      		db	0ffh
0C05  FF      		db	0ffh
0C06  FF      		db	0ffh
0C07  FF      		db	0ffh
0C08  FF      		db	0ffh
0C09  FF      		db	0ffh
0C0A  FF      		db	0ffh
0C0B  FF      		db	0ffh
0C0C  FF      		db	0ffh
0C0D  FF      		db	0ffh
0C0E  FF      		db	0ffh
0C0F  FF      		db	0ffh
0C10  FF      		db	0ffh
0C11  FF      		db	0ffh
0C12  FF      		db	0ffh
0C13  FF      		db	0ffh
0C14  FF      		db	0ffh
0C15  FF      		db	0ffh
0C16  FF      		db	0ffh
0C17  FF      		db	0ffh
0C18  FF      		db	0ffh
0C19  FF      		db	0ffh
0C1A  FF      		db	0ffh
0C1B  FF      		db	0ffh
0C1C  FF      		db	0ffh
0C1D  FF      		db	0ffh
0C1E  FF      		db	0ffh
0C1F  FF      		db	0ffh
0C20  FF      		db	0ffh
0C21  FF      		db	0ffh
0C22  FF      		db	0ffh
0C23  FF      		db	0ffh
0C24  FF      		db	0ffh
0C25  FF      		db	0ffh
0C26  FF      		db	0ffh
0C27  FF      		db	0ffh
0C28  FF      		db	0ffh
0C29  FF      		db	0ffh
0C2A  FF      		db	0ffh
0C2B  FF      		db	0ffh
0C2C  FF      		db	0ffh
0C2D  FF      		db	0ffh
0C2E  FF      		db	0ffh
0C2F  FF      		db	0ffh
0C30  FF      		db	0ffh
0C31  FF      		db	0ffh
0C32  FF      		db	0ffh
0C33  FF      		db	0ffh
0C34  FF      		db	0ffh
0C35  FF      		db	0ffh
0C36  FF      		db	0ffh
0C37  FF      		db	0ffh
0C38  FF      		db	0ffh
0C39  FF      		db	0ffh
0C3A  FF      		db	0ffh
0C3B  FF      		db	0ffh
0C3C  FF      		db	0ffh
0C3D  FF      		db	0ffh
0C3E  FF      		db	0ffh
0C3F  FF      		db	0ffh
0C40  FF      		db	0ffh
0C41  FF      		db	0ffh
0C42  FF      		db	0ffh
0C43  FF      		db	0ffh
0C44  FF      		db	0ffh
0C45  FF      		db	0ffh
0C46  FF      		db	0ffh
0C47  FF      		db	0ffh
0C48  FF      		db	0ffh
0C49  FF      		db	0ffh
0C4A  FF      		db	0ffh
0C4B  FF      		db	0ffh
0C4C  FF      		db	0ffh
0C4D  FF      		db	0ffh
0C4E  FF      		db	0ffh
0C4F  FF      		db	0ffh
0C50  FF      		db	0ffh
0C51  FF      		db	0ffh
0C52  FF      		db	0ffh
0C53  FF      		db	0ffh
0C54  FF      		db	0ffh
0C55  FF      		db	0ffh
0C56  FF      		db	0ffh
0C57  FF      		db	0ffh
0C58  FF      		db	0ffh
0C59  FF      		db	0ffh
0C5A  FF      		db	0ffh
0C5B  FF      		db	0ffh
0C5C  FF      		db	0ffh
0C5D  FF      		db	0ffh
0C5E  FF      		db	0ffh
0C5F  FF      		db	0ffh
0C60  FF      		db	0ffh
0C61  FF      		db	0ffh
0C62  FF      		db	0ffh
0C63  FF      		db	0ffh
0C64  FF      		db	0ffh
0C65  FF      		db	0ffh
0C66  FF      		db	0ffh
0C67  FF      		db	0ffh
0C68  FF      		db	0ffh
0C69  FF      		db	0ffh
0C6A  FF      		db	0ffh
0C6B  FF      		db	0ffh
0C6C  FF      		db	0ffh
0C6D  FF      		db	0ffh
0C6E  FF      		db	0ffh
0C6F  FF      		db	0ffh
0C70  FF      		db	0ffh
0C71  FF      		db	0ffh
0C72  FF      		db	0ffh
0C73  FF      		db	0ffh
0C74  FF      		db	0ffh
0C75  FF      		db	0ffh
0C76  FF      		db	0ffh
0C77  FF      		db	0ffh
0C78  FF      		db	0ffh
0C79  FF      		db	0ffh
0C7A  FF      		db	0ffh
0C7B  FF      		db	0ffh
0C7C  FF      		db	0ffh
0C7D  FF      		db	0ffh
0C7E  FF      		db	0ffh
0C7F  FF      		db	0ffh
0C80  FF      		db	0ffh
0C81  FF      		db	0ffh
0C82  FF      		db	0ffh
0C83  FF      		db	0ffh
0C84  FF      		db	0ffh
0C85  FF      		db	0ffh
0C86  FF      		db	0ffh
0C87  FF      		db	0ffh
0C88  FF      		db	0ffh
0C89  FF      		db	0ffh
0C8A  FF      		db	0ffh
0C8B  FF      		db	0ffh
0C8C  FF      		db	0ffh
0C8D  FF      		db	0ffh
0C8E  FF      		db	0ffh
0C8F  FF      		db	0ffh
0C90  FF      		db	0ffh
0C91  FF      		db	0ffh
0C92  FF      		db	0ffh
0C93  FF      		db	0ffh
0C94  FF      		db	0ffh
0C95  FF      		db	0ffh
0C96  FF      		db	0ffh
0C97  FF      		db	0ffh
0C98  FF      		db	0ffh
0C99  FF      		db	0ffh
0C9A  FF      		db	0ffh
0C9B  FF      		db	0ffh
0C9C  FF      		db	0ffh
0C9D  FF      		db	0ffh
0C9E  FF      		db	0ffh
0C9F  FF      		db	0ffh
0CA0  FF      		db	0ffh
0CA1  FF      		db	0ffh
0CA2  FF      		db	0ffh
0CA3  FF      		db	0ffh
0CA4  FF      		db	0ffh
0CA5  FF      		db	0ffh
0CA6  FF      		db	0ffh
0CA7  FF      		db	0ffh
0CA8  FF      		db	0ffh
0CA9  FF      		db	0ffh
0CAA  FF      		db	0ffh
0CAB  FF      		db	0ffh
0CAC  FF      		db	0ffh
0CAD  FF      		db	0ffh
0CAE  FF      		db	0ffh
0CAF  FF      		db	0ffh
0CB0  FF      		db	0ffh
0CB1  FF      		db	0ffh
0CB2  FF      		db	0ffh
0CB3  FF      		db	0ffh
0CB4  FF      		db	0ffh
0CB5  FF      		db	0ffh
0CB6  FF      		db	0ffh
0CB7  FF      		db	0ffh
0CB8  FF      		db	0ffh
0CB9  FF      		db	0ffh
0CBA  FF      		db	0ffh
0CBB  FF      		db	0ffh
0CBC  FF      		db	0ffh
0CBD  FF      		db	0ffh
0CBE  FF      		db	0ffh
0CBF  FF      		db	0ffh
0CC0  FF      		db	0ffh
0CC1  FF      		db	0ffh
0CC2  FF      		db	0ffh
0CC3  FF      		db	0ffh
0CC4  FF      		db	0ffh
0CC5  FF      		db	0ffh
0CC6  FF      		db	0ffh
0CC7  FF      		db	0ffh
0CC8  FF      		db	0ffh
0CC9  FF      		db	0ffh
0CCA  FF      		db	0ffh
0CCB  FF      		db	0ffh
0CCC  FF      		db	0ffh
0CCD  FF      		db	0ffh
0CCE  FF      		db	0ffh
0CCF  FF      		db	0ffh
0CD0  FF      		db	0ffh
0CD1  FF      		db	0ffh
0CD2  FF      		db	0ffh
0CD3  FF      		db	0ffh
0CD4  FF      		db	0ffh
0CD5  FF      		db	0ffh
0CD6  FF      		db	0ffh
0CD7  FF      		db	0ffh
0CD8  FF      		db	0ffh
0CD9  FF      		db	0ffh
0CDA  FF      		db	0ffh
0CDB  FF      		db	0ffh
0CDC  FF      		db	0ffh
0CDD  FF      		db	0ffh
0CDE  FF      		db	0ffh
0CDF  FF      		db	0ffh
0CE0  FF      		db	0ffh
0CE1  FF      		db	0ffh
0CE2  FF      		db	0ffh
0CE3  FF      		db	0ffh
0CE4  FF      		db	0ffh
0CE5  FF      		db	0ffh
0CE6  FF      		db	0ffh
0CE7  FF      		db	0ffh
0CE8  FF      		db	0ffh
0CE9  FF      		db	0ffh
0CEA  FF      		db	0ffh
0CEB  FF      		db	0ffh
0CEC  FF      		db	0ffh
0CED  FF      		db	0ffh
0CEE  FF      		db	0ffh
0CEF  FF      		db	0ffh
0CF0  FF      		db	0ffh
0CF1  FF      		db	0ffh
0CF2  FF      		db	0ffh
0CF3  FF      		db	0ffh
0CF4  FF      		db	0ffh
0CF5  FF      		db	0ffh
0CF6  FF      		db	0ffh
0CF7  FF      		db	0ffh
0CF8  FF      		db	0ffh
0CF9  FF      		db	0ffh
0CFA  FF      		db	0ffh
0CFB  FF      		db	0ffh
0CFC  FF      		db	0ffh
0CFD  FF      		db	0ffh
0CFE  FF      		db	0ffh
0CFF  FF      		db	0ffh
0D00  FF      		db	0ffh
0D01  FF      		db	0ffh
0D02  FF      		db	0ffh
0D03  FF      		db	0ffh
0D04  FF      		db	0ffh
0D05  FF      		db	0ffh
0D06  FF      		db	0ffh
0D07  FF      		db	0ffh
0D08  FF      		db	0ffh
0D09  FF      		db	0ffh
0D0A  FF      		db	0ffh
0D0B  FF      		db	0ffh
0D0C  FF      		db	0ffh
0D0D  FF      		db	0ffh
0D0E  FF      		db	0ffh
0D0F  FF      		db	0ffh
0D10  FF      		db	0ffh
0D11  FF      		db	0ffh
0D12  FF      		db	0ffh
0D13  FF      		db	0ffh
0D14  FF      		db	0ffh
0D15  FF      		db	0ffh
0D16  FF      		db	0ffh
0D17  FF      		db	0ffh
0D18  FF      		db	0ffh
0D19  FF      		db	0ffh
0D1A  FF      		db	0ffh
0D1B  FF      		db	0ffh
0D1C  FF      		db	0ffh
0D1D  FF      		db	0ffh
0D1E  FF      		db	0ffh
0D1F  FF      		db	0ffh
0D20  FF      		db	0ffh
0D21  FF      		db	0ffh
0D22  FF      		db	0ffh
0D23  FF      		db	0ffh
0D24  FF      		db	0ffh
0D25  FF      		db	0ffh
0D26  FF      		db	0ffh
0D27  FF      		db	0ffh
0D28  FF      		db	0ffh
0D29  FF      		db	0ffh
0D2A  FF      		db	0ffh
0D2B  FF      		db	0ffh
0D2C  FF      		db	0ffh
0D2D  FF      		db	0ffh
0D2E  FF      		db	0ffh
0D2F  FF      		db	0ffh
0D30  FF      		db	0ffh
0D31  FF      		db	0ffh
0D32  FF      		db	0ffh
0D33  FF      		db	0ffh
0D34  FF      		db	0ffh
0D35  FF      		db	0ffh
0D36  FF      		db	0ffh
0D37  FF      		db	0ffh
0D38  FF      		db	0ffh
0D39  FF      		db	0ffh
0D3A  FF      		db	0ffh
0D3B  FF      		db	0ffh
0D3C  FF      		db	0ffh
0D3D  FF      		db	0ffh
0D3E  FF      		db	0ffh
0D3F  FF      		db	0ffh
0D40  FF      		db	0ffh
0D41  FF      		db	0ffh
0D42  FF      		db	0ffh
0D43  FF      		db	0ffh
0D44  FF      		db	0ffh
0D45  FF      		db	0ffh
0D46  FF      		db	0ffh
0D47  FF      		db	0ffh
0D48  FF      		db	0ffh
0D49  FF      		db	0ffh
0D4A  FF      		db	0ffh
0D4B  FF      		db	0ffh
0D4C  FF      		db	0ffh
0D4D  FF      		db	0ffh
0D4E  FF      		db	0ffh
0D4F  FF      		db	0ffh
0D50  FF      		db	0ffh
0D51  FF      		db	0ffh
0D52  FF      		db	0ffh
0D53  FF      		db	0ffh
0D54  FF      		db	0ffh
0D55  FF      		db	0ffh
0D56  FF      		db	0ffh
0D57  FF      		db	0ffh
0D58  FF      		db	0ffh
0D59  FF      		db	0ffh
0D5A  FF      		db	0ffh
0D5B  FF      		db	0ffh
0D5C  FF      		db	0ffh
0D5D  FF      		db	0ffh
0D5E  FF      		db	0ffh
0D5F  FF      		db	0ffh
0D60  FF      		db	0ffh
0D61  FF      		db	0ffh
0D62  FF      		db	0ffh
0D63  FF      		db	0ffh
0D64  FF      		db	0ffh
0D65  FF      		db	0ffh
0D66  FF      		db	0ffh
0D67  FF      		db	0ffh
0D68  FF      		db	0ffh
0D69  FF      		db	0ffh
0D6A  FF      		db	0ffh
0D6B  FF      		db	0ffh
0D6C  FF      		db	0ffh
0D6D  FF      		db	0ffh
0D6E  FF      		db	0ffh
0D6F  FF      		db	0ffh
0D70  FF      		db	0ffh
0D71  FF      		db	0ffh
0D72  FF      		db	0ffh
0D73  FF      		db	0ffh
0D74  FF      		db	0ffh
0D75  FF      		db	0ffh
0D76  FF      		db	0ffh
0D77  FF      		db	0ffh
0D78  FF      		db	0ffh
0D79  FF      		db	0ffh
0D7A  FF      		db	0ffh
0D7B  FF      		db	0ffh
0D7C  FF      		db	0ffh
0D7D  FF      		db	0ffh
0D7E  FF      		db	0ffh
0D7F  FF      		db	0ffh
0D80  FF      		db	0ffh
0D81  FF      		db	0ffh
0D82  FF      		db	0ffh
0D83  FF      		db	0ffh
0D84  FF      		db	0ffh
0D85  FF      		db	0ffh
0D86  FF      		db	0ffh
0D87  FF      		db	0ffh
0D88  FF      		db	0ffh
0D89  FF      		db	0ffh
0D8A  FF      		db	0ffh
0D8B  FF      		db	0ffh
0D8C  FF      		db	0ffh
0D8D  FF      		db	0ffh
0D8E  FF      		db	0ffh
0D8F  FF      		db	0ffh
0D90  FF      		db	0ffh
0D91  FF      		db	0ffh
0D92  FF      		db	0ffh
0D93  FF      		db	0ffh
0D94  FF      		db	0ffh
0D95  FF      		db	0ffh
0D96  FF      		db	0ffh
0D97  FF      		db	0ffh
0D98  FF      		db	0ffh
0D99  FF      		db	0ffh
0D9A  FF      		db	0ffh
0D9B  FF      		db	0ffh
0D9C  FF      		db	0ffh
0D9D  FF      		db	0ffh
0D9E  FF      		db	0ffh
0D9F  FF      		db	0ffh
0DA0  FF      		db	0ffh
0DA1  FF      		db	0ffh
0DA2  FF      		db	0ffh
0DA3  FF      		db	0ffh
0DA4  FF      		db	0ffh
0DA5  FF      		db	0ffh
0DA6  FF      		db	0ffh
0DA7  FF      		db	0ffh
0DA8  FF      		db	0ffh
0DA9  FF      		db	0ffh
0DAA  FF      		db	0ffh
0DAB  FF      		db	0ffh
0DAC  FF      		db	0ffh
0DAD  FF      		db	0ffh
0DAE  FF      		db	0ffh
0DAF  FF      		db	0ffh
0DB0  FF      		db	0ffh
0DB1  FF      		db	0ffh
0DB2  FF      		db	0ffh
0DB3  FF      		db	0ffh
0DB4  FF      		db	0ffh
0DB5  FF      		db	0ffh
0DB6  FF      		db	0ffh
0DB7  FF      		db	0ffh
0DB8  FF      		db	0ffh
0DB9  FF      		db	0ffh
0DBA  FF      		db	0ffh
0DBB  FF      		db	0ffh
0DBC  FF      		db	0ffh
0DBD  FF      		db	0ffh
0DBE  FF      		db	0ffh
0DBF  FF      		db	0ffh
0DC0  FF      		db	0ffh
0DC1  FF      		db	0ffh
0DC2  FF      		db	0ffh
0DC3  FF      		db	0ffh
0DC4  FF      		db	0ffh
0DC5  FF      		db	0ffh
0DC6  FF      		db	0ffh
0DC7  FF      		db	0ffh
0DC8  FF      		db	0ffh
0DC9  FF      		db	0ffh
0DCA  FF      		db	0ffh
0DCB  FF      		db	0ffh
0DCC  FF      		db	0ffh
0DCD  FF      		db	0ffh
0DCE  FF      		db	0ffh
0DCF  FF      		db	0ffh
0DD0  FF      		db	0ffh
0DD1  FF      		db	0ffh
0DD2  FF      		db	0ffh
0DD3  FF      		db	0ffh
0DD4  FF      		db	0ffh
0DD5  FF      		db	0ffh
0DD6  FF      		db	0ffh
0DD7  FF      		db	0ffh
0DD8  FF      		db	0ffh
0DD9  FF      		db	0ffh
0DDA  FF      		db	0ffh
0DDB  FF      		db	0ffh
0DDC  FF      		db	0ffh
0DDD  FF      		db	0ffh
0DDE  FF      		db	0ffh
0DDF  FF      		db	0ffh
0DE0  FF      		db	0ffh
0DE1  FF      		db	0ffh
0DE2  FF      		db	0ffh
0DE3  FF      		db	0ffh
0DE4  FF      		db	0ffh
0DE5  FF      		db	0ffh
0DE6  FF      		db	0ffh
0DE7  FF      		db	0ffh
0DE8  FF      		db	0ffh
0DE9  FF      		db	0ffh
0DEA  FF      		db	0ffh
0DEB  FF      		db	0ffh
0DEC  FF      		db	0ffh
0DED  FF      		db	0ffh
0DEE  FF      		db	0ffh
0DEF  FF      		db	0ffh
0DF0  FF      		db	0ffh
0DF1  FF      		db	0ffh
0DF2  FF      		db	0ffh
0DF3  FF      		db	0ffh
0DF4  FF      		db	0ffh
0DF5  FF      		db	0ffh
0DF6  FF      		db	0ffh
0DF7  FF      		db	0ffh
0DF8  FF      		db	0ffh
0DF9  FF      		db	0ffh
0DFA  FF      		db	0ffh
0DFB  FF      		db	0ffh
0DFC  FF      		db	0ffh
0DFD  FF      		db	0ffh
0DFE  FF      		db	0ffh
0DFF  FF      		db	0ffh
0E00  FF      		db	0ffh
0E01  FF      		db	0ffh
0E02  FF      		db	0ffh
0E03  FF      		db	0ffh
0E04  FF      		db	0ffh
0E05  FF      		db	0ffh
0E06  FF      		db	0ffh
0E07  FF      		db	0ffh
0E08  FF      		db	0ffh
0E09  FF      		db	0ffh
0E0A  FF      		db	0ffh
0E0B  FF      		db	0ffh
0E0C  FF      		db	0ffh
0E0D  FF      		db	0ffh
0E0E  FF      		db	0ffh
0E0F  FF      		db	0ffh
0E10  FF      		db	0ffh
0E11  FF      		db	0ffh
0E12  FF      		db	0ffh
0E13  FF      		db	0ffh
0E14  FF      		db	0ffh
0E15  FF      		db	0ffh
0E16  FF      		db	0ffh
0E17  FF      		db	0ffh
0E18  FF      		db	0ffh
0E19  FF      		db	0ffh
0E1A  FF      		db	0ffh
0E1B  FF      		db	0ffh
0E1C  FF      		db	0ffh
0E1D  FF      		db	0ffh
0E1E  FF      		db	0ffh
0E1F  FF      		db	0ffh
0E20  FF      		db	0ffh
0E21  FF      		db	0ffh
0E22  FF      		db	0ffh
0E23  FF      		db	0ffh
0E24  FF      		db	0ffh
0E25  FF      		db	0ffh
0E26  FF      		db	0ffh
0E27  FF      		db	0ffh
0E28  FF      		db	0ffh
0E29  FF      		db	0ffh
0E2A  FF      		db	0ffh
0E2B  FF      		db	0ffh
0E2C  FF      		db	0ffh
0E2D  FF      		db	0ffh
0E2E  FF      		db	0ffh
0E2F  FF      		db	0ffh
0E30  FF      		db	0ffh
0E31  FF      		db	0ffh
0E32  FF      		db	0ffh
0E33  FF      		db	0ffh
0E34  FF      		db	0ffh
0E35  FF      		db	0ffh
0E36  FF      		db	0ffh
0E37  FF      		db	0ffh
0E38  FF      		db	0ffh
0E39  FF      		db	0ffh
0E3A  FF      		db	0ffh
0E3B  FF      		db	0ffh
0E3C  FF      		db	0ffh
0E3D  FF      		db	0ffh
0E3E  FF      		db	0ffh
0E3F  FF      		db	0ffh
0E40  FF      		db	0ffh
0E41  FF      		db	0ffh
0E42  FF      		db	0ffh
0E43  FF      		db	0ffh
0E44  FF      		db	0ffh
0E45  FF      		db	0ffh
0E46  FF      		db	0ffh
0E47  FF      		db	0ffh
0E48  FF      		db	0ffh
0E49  FF      		db	0ffh
0E4A  FF      		db	0ffh
0E4B  FF      		db	0ffh
0E4C  FF      		db	0ffh
0E4D  FF      		db	0ffh
0E4E  FF      		db	0ffh
0E4F  FF      		db	0ffh
0E50  FF      		db	0ffh
0E51  FF      		db	0ffh
0E52  FF      		db	0ffh
0E53  FF      		db	0ffh
0E54  FF      		db	0ffh
0E55  FF      		db	0ffh
0E56  FF      		db	0ffh
0E57  FF      		db	0ffh
0E58  FF      		db	0ffh
0E59  FF      		db	0ffh
0E5A  FF      		db	0ffh
0E5B  FF      		db	0ffh
0E5C  FF      		db	0ffh
0E5D  FF      		db	0ffh
0E5E  FF      		db	0ffh
0E5F  FF      		db	0ffh
0E60  FF      		db	0ffh
0E61  FF      		db	0ffh
0E62  FF      		db	0ffh
0E63  FF      		db	0ffh
0E64  FF      		db	0ffh
0E65  FF      		db	0ffh
0E66  FF      		db	0ffh
0E67  FF      		db	0ffh
0E68  FF      		db	0ffh
0E69  FF      		db	0ffh
0E6A  FF      		db	0ffh
0E6B  FF      		db	0ffh
0E6C  FF      		db	0ffh
0E6D  FF      		db	0ffh
0E6E  FF      		db	0ffh
0E6F  FF      		db	0ffh
0E70  FF      		db	0ffh
0E71  FF      		db	0ffh
0E72  FF      		db	0ffh
0E73  FF      		db	0ffh
0E74  FF      		db	0ffh
0E75  FF      		db	0ffh
0E76  FF      		db	0ffh
0E77  FF      		db	0ffh
0E78  FF      		db	0ffh
0E79  FF      		db	0ffh
0E7A  FF      		db	0ffh
0E7B  FF      		db	0ffh
0E7C  FF      		db	0ffh
0E7D  FF      		db	0ffh
0E7E  FF      		db	0ffh
0E7F  FF      		db	0ffh
0E80  FF      		db	0ffh
0E81  FF      		db	0ffh
0E82  FF      		db	0ffh
0E83  FF      		db	0ffh
0E84  FF      		db	0ffh
0E85  FF      		db	0ffh
0E86  FF      		db	0ffh
0E87  FF      		db	0ffh
0E88  FF      		db	0ffh
0E89  FF      		db	0ffh
0E8A  FF      		db	0ffh
0E8B  FF      		db	0ffh
0E8C  FF      		db	0ffh
0E8D  FF      		db	0ffh
0E8E  FF      		db	0ffh
0E8F  FF      		db	0ffh
0E90  FF      		db	0ffh
0E91  FF      		db	0ffh
0E92  FF      		db	0ffh
0E93  FF      		db	0ffh
0E94  FF      		db	0ffh
0E95  FF      		db	0ffh
0E96  FF      		db	0ffh
0E97  FF      		db	0ffh
0E98  FF      		db	0ffh
0E99  FF      		db	0ffh
0E9A  FF      		db	0ffh
0E9B  FF      		db	0ffh
0E9C  FF      		db	0ffh
0E9D  FF      		db	0ffh
0E9E  FF      		db	0ffh
0E9F  FF      		db	0ffh
0EA0  FF      		db	0ffh
0EA1  FF      		db	0ffh
0EA2  FF      		db	0ffh
0EA3  FF      		db	0ffh
0EA4  FF      		db	0ffh
0EA5  FF      		db	0ffh
0EA6  FF      		db	0ffh
0EA7  FF      		db	0ffh
0EA8  FF      		db	0ffh
0EA9  FF      		db	0ffh
0EAA  FF      		db	0ffh
0EAB  FF      		db	0ffh
0EAC  FF      		db	0ffh
0EAD  FF      		db	0ffh
0EAE  FF      		db	0ffh
0EAF  FF      		db	0ffh
0EB0  FF      		db	0ffh
0EB1  FF      		db	0ffh
0EB2  FF      		db	0ffh
0EB3  FF      		db	0ffh
0EB4  FF      		db	0ffh
0EB5  FF      		db	0ffh
0EB6  FF      		db	0ffh
0EB7  FF      		db	0ffh
0EB8  FF      		db	0ffh
0EB9  FF      		db	0ffh
0EBA  FF      		db	0ffh
0EBB  FF      		db	0ffh
0EBC  FF      		db	0ffh
0EBD  FF      		db	0ffh
0EBE  FF      		db	0ffh
0EBF  FF      		db	0ffh
0EC0  FF      		db	0ffh
0EC1  FF      		db	0ffh
0EC2  FF      		db	0ffh
0EC3  FF      		db	0ffh
0EC4  FF      		db	0ffh
0EC5  FF      		db	0ffh
0EC6  FF      		db	0ffh
0EC7  FF      		db	0ffh
0EC8  FF      		db	0ffh
0EC9  FF      		db	0ffh
0ECA  FF      		db	0ffh
0ECB  FF      		db	0ffh
0ECC  FF      		db	0ffh
0ECD  FF      		db	0ffh
0ECE  FF      		db	0ffh
0ECF  FF      		db	0ffh
0ED0  FF      		db	0ffh
0ED1  FF      		db	0ffh
0ED2  FF      		db	0ffh
0ED3  FF      		db	0ffh
0ED4  FF      		db	0ffh
0ED5  FF      		db	0ffh
0ED6  FF      		db	0ffh
0ED7  FF      		db	0ffh
0ED8  FF      		db	0ffh
0ED9  FF      		db	0ffh
0EDA  FF      		db	0ffh
0EDB  FF      		db	0ffh
0EDC  FF      		db	0ffh
0EDD  FF      		db	0ffh
0EDE  FF      		db	0ffh
0EDF  FF      		db	0ffh
0EE0  FF      		db	0ffh
0EE1  FF      		db	0ffh
0EE2  FF      		db	0ffh
0EE3  FF      		db	0ffh
0EE4  FF      		db	0ffh
0EE5  FF      		db	0ffh
0EE6  FF      		db	0ffh
0EE7  FF      		db	0ffh
0EE8  FF      		db	0ffh
0EE9  FF      		db	0ffh
0EEA  FF      		db	0ffh
0EEB  FF      		db	0ffh
0EEC  FF      		db	0ffh
0EED  FF      		db	0ffh
0EEE  FF      		db	0ffh
0EEF  FF      		db	0ffh
0EF0  FF      		db	0ffh
0EF1  FF      		db	0ffh
0EF2  FF      		db	0ffh
0EF3  FF      		db	0ffh
0EF4  FF      		db	0ffh
0EF5  FF      		db	0ffh
0EF6  FF      		db	0ffh
0EF7  FF      		db	0ffh
0EF8  FF      		db	0ffh
0EF9  FF      		db	0ffh
0EFA  FF      		db	0ffh
0EFB  FF      		db	0ffh
0EFC  FF      		db	0ffh
0EFD  FF      		db	0ffh
0EFE  FF      		db	0ffh
0EFF  FF      		db	0ffh
0F00  FF      		db	0ffh
0F01  FF      		db	0ffh
0F02  FF      		db	0ffh
0F03  FF      		db	0ffh
0F04  FF      		db	0ffh
0F05  FF      		db	0ffh
0F06  FF      		db	0ffh
0F07  FF      		db	0ffh
0F08  FF      		db	0ffh
0F09  FF      		db	0ffh
0F0A  FF      		db	0ffh
0F0B  FF      		db	0ffh
0F0C  FF      		db	0ffh
0F0D  FF      		db	0ffh
0F0E  FF      		db	0ffh
0F0F  FF      		db	0ffh
0F10  FF      		db	0ffh
0F11  FF      		db	0ffh
0F12  FF      		db	0ffh
0F13  FF      		db	0ffh
0F14  FF      		db	0ffh
0F15  FF      		db	0ffh
0F16  FF      		db	0ffh
0F17  FF      		db	0ffh
0F18  FF      		db	0ffh
0F19  FF      		db	0ffh
0F1A  FF      		db	0ffh
0F1B  FF      		db	0ffh
0F1C  FF      		db	0ffh
0F1D  FF      		db	0ffh
0F1E  FF      		db	0ffh
0F1F  FF      		db	0ffh
0F20  FF      		db	0ffh
0F21  FF      		db	0ffh
0F22  FF      		db	0ffh
0F23  FF      		db	0ffh
0F24  FF      		db	0ffh
0F25  FF      		db	0ffh
0F26  FF      		db	0ffh
0F27  FF      		db	0ffh
0F28  FF      		db	0ffh
0F29  FF      		db	0ffh
0F2A  FF      		db	0ffh
0F2B  FF      		db	0ffh
0F2C  FF      		db	0ffh
0F2D  FF      		db	0ffh
0F2E  FF      		db	0ffh
0F2F  FF      		db	0ffh
0F30  FF      		db	0ffh
0F31  FF      		db	0ffh
0F32  FF      		db	0ffh
0F33  FF      		db	0ffh
0F34  FF      		db	0ffh
0F35  FF      		db	0ffh
0F36  FF      		db	0ffh
0F37  FF      		db	0ffh
0F38  FF      		db	0ffh
0F39  FF      		db	0ffh
0F3A  FF      		db	0ffh
0F3B  FF      		db	0ffh
0F3C  FF      		db	0ffh
0F3D  FF      		db	0ffh
0F3E  FF      		db	0ffh
0F3F  FF      		db	0ffh
0F40  FF      		db	0ffh
0F41  FF      		db	0ffh
0F42  FF      		db	0ffh
0F43  FF      		db	0ffh
0F44  FF      		db	0ffh
0F45  FF      		db	0ffh
0F46  FF      		db	0ffh
0F47  FF      		db	0ffh
0F48  FF      		db	0ffh
0F49  FF      		db	0ffh
0F4A  FF      		db	0ffh
0F4B  FF      		db	0ffh
0F4C  FF      		db	0ffh
0F4D  FF      		db	0ffh
0F4E  FF      		db	0ffh
0F4F  FF      		db	0ffh
0F50  FF      		db	0ffh
0F51  FF      		db	0ffh
0F52  FF      		db	0ffh
0F53  FF      		db	0ffh
0F54  FF      		db	0ffh
0F55  FF      		db	0ffh
0F56  FF      		db	0ffh
0F57  FF      		db	0ffh
0F58  FF      		db	0ffh
0F59  FF      		db	0ffh
0F5A  FF      		db	0ffh
0F5B  FF      		db	0ffh
0F5C  FF      		db	0ffh
0F5D  FF      		db	0ffh
0F5E  FF      		db	0ffh
0F5F  FF      		db	0ffh
0F60  FF      		db	0ffh
0F61  FF      		db	0ffh
0F62  FF      		db	0ffh
0F63  FF      		db	0ffh
0F64  FF      		db	0ffh
0F65  FF      		db	0ffh
0F66  FF      		db	0ffh
0F67  FF      		db	0ffh
0F68  FF      		db	0ffh
0F69  FF      		db	0ffh
0F6A  FF      		db	0ffh
0F6B  FF      		db	0ffh
0F6C  FF      		db	0ffh
0F6D  FF      		db	0ffh
0F6E  FF      		db	0ffh
0F6F  FF      		db	0ffh
0F70  FF      		db	0ffh
0F71  FF      		db	0ffh
0F72  FF      		db	0ffh
0F73  FF      		db	0ffh
0F74  FF      		db	0ffh
0F75  FF      		db	0ffh
0F76  FF      		db	0ffh
0F77  FF      		db	0ffh
0F78  FF      		db	0ffh
0F79  FF      		db	0ffh
0F7A  FF      		db	0ffh
0F7B  FF      		db	0ffh
0F7C  FF      		db	0ffh
0F7D  FF      		db	0ffh
0F7E  FF      		db	0ffh
0F7F  FF      		db	0ffh
0F80  FF      		db	0ffh
0F81  FF      		db	0ffh
0F82  FF      		db	0ffh
0F83  FF      		db	0ffh
0F84  FF      		db	0ffh
0F85  FF      		db	0ffh
0F86  FF      		db	0ffh
0F87  FF      		db	0ffh
0F88  FF      		db	0ffh
0F89  FF      		db	0ffh
0F8A  FF      		db	0ffh
0F8B  FF      		db	0ffh
0F8C  FF      		db	0ffh
0F8D  FF      		db	0ffh
0F8E  FF      		db	0ffh
0F8F  FF      		db	0ffh
0F90  FF      		db	0ffh
0F91  FF      		db	0ffh
0F92  FF      		db	0ffh
0F93  FF      		db	0ffh
0F94  FF      		db	0ffh
0F95  FF      		db	0ffh
0F96  FF      		db	0ffh
0F97  FF      		db	0ffh
0F98  FF      		db	0ffh
0F99  FF      		db	0ffh
0F9A  FF      		db	0ffh
0F9B  FF      		db	0ffh
0F9C  FF      		db	0ffh
0F9D  FF      		db	0ffh
0F9E  FF      		db	0ffh
0F9F  FF      		db	0ffh
0FA0  FF      		db	0ffh
0FA1  FF      		db	0ffh
0FA2  FF      		db	0ffh
0FA3  FF      		db	0ffh
0FA4  FF      		db	0ffh
0FA5  FF      		db	0ffh
0FA6  FF      		db	0ffh
0FA7  FF      		db	0ffh
0FA8  FF      		db	0ffh
0FA9  FF      		db	0ffh
0FAA  FF      		db	0ffh
0FAB  FF      		db	0ffh
0FAC  FF      		db	0ffh
0FAD  FF      		db	0ffh
0FAE  FF      		db	0ffh
0FAF  FF      		db	0ffh
0FB0  FF      		db	0ffh
0FB1  FF      		db	0ffh
0FB2  FF      		db	0ffh
0FB3  FF      		db	0ffh
0FB4  FF      		db	0ffh
0FB5  FF      		db	0ffh
0FB6  FF      		db	0ffh
0FB7  FF      		db	0ffh
0FB8  FF      		db	0ffh
0FB9  FF      		db	0ffh
0FBA  FF      		db	0ffh
0FBB  FF      		db	0ffh
0FBC  FF      		db	0ffh
0FBD  FF      		db	0ffh
0FBE  FF      		db	0ffh
0FBF  FF      		db	0ffh
0FC0  FF      		db	0ffh
0FC1  FF      		db	0ffh
0FC2  FF      		db	0ffh
0FC3  FF      		db	0ffh
0FC4  FF      		db	0ffh
0FC5  FF      		db	0ffh
0FC6  FF      		db	0ffh
0FC7  FF      		db	0ffh
0FC8  FF      		db	0ffh
0FC9  FF      		db	0ffh
0FCA  FF      		db	0ffh
0FCB  FF      		db	0ffh
0FCC  FF      		db	0ffh
0FCD  FF      		db	0ffh
0FCE  FF      		db	0ffh
0FCF  FF      		db	0ffh
0FD0  FF      		db	0ffh
0FD1  FF      		db	0ffh
0FD2  FF      		db	0ffh
0FD3  FF      		db	0ffh
0FD4  FF      		db	0ffh
0FD5  FF      		db	0ffh
0FD6  FF      		db	0ffh
0FD7  FF      		db	0ffh
0FD8  FF      		db	0ffh
0FD9  FF      		db	0ffh
0FDA  FF      		db	0ffh
0FDB  FF      		db	0ffh
0FDC  FF      		db	0ffh
0FDD  FF      		db	0ffh
0FDE  FF      		db	0ffh
0FDF  FF      		db	0ffh
0FE0  FF      		db	0ffh
0FE1  FF      		db	0ffh
0FE2  FF      		db	0ffh
0FE3  FF      		db	0ffh
0FE4  FF      		db	0ffh
0FE5  FF      		db	0ffh
0FE6  FF      		db	0ffh
0FE7  FF      		db	0ffh
0FE8  FF      		db	0ffh
0FE9  FF      		db	0ffh
0FEA  FF      		db	0ffh
0FEB  FF      		db	0ffh
0FEC  FF      		db	0ffh
0FED  FF      		db	0ffh
0FEE  FF      		db	0ffh
0FEF  FF      		db	0ffh
0FF0  FF      		db	0ffh
0FF1  FF      		db	0ffh
0FF2  FF      		db	0ffh
0FF3  FF      		db	0ffh
0FF4  FF      		db	0ffh
0FF5  FF      		db	0ffh
0FF6  FF      		db	0ffh
0FF7  FF      		db	0ffh
0FF8  FF      		db	0ffh
0FF9  FF      		db	0ffh
0FFA  FF      		db	0ffh
0FFB  FF      		db	0ffh
0FFC  FF      		db	0ffh
0FFD  FF      		db	0ffh
0FFE  FF      		db	0ffh
0FFF  FF      		db	0ffh
0000          	 if $ <> romsiz
		 endif
		
		; RAM used...
FF00          		org	0ff00h
FF00          	addr0:	ds	2
FF02          	addr1:	ds	2
FF04          	line:	ds	64
		
FF44          		end



Statistics:

     4	passes
     0	jr promotions
   226	symbols
  4096	bytes

  1772	macro calls
  3775	macro bytes
     0	invented symbols
